/*******************************************************************

	File: annapurna_main.gdh
	
	Rules for Devanagari script, included in annapurna-R/B.gdl
	
	Author: Sharon Correll 

*******************************************************************/

/*
    This file is part of the Annapurna font family (http://software.sil.org/annapurna/) 
    and is Copyright (c) 2007-2021 SIL International (http://www.sil.org/), with 
    Reserved Font Names "Annapurna" and "SIL".

    This Font Software is licensed under the SIL Open Font License, Version 1.1. 
    You should have received a copy of the license along with this Font Software. 
    If this is not the case, go to (http://scripts.sil.org/OFL) for all the details 
    including a FAQ.
*/

#include "stddef.gdh"

Bidi = false;

// Glyph forms
#define form user1
#define F_NOMINAL	0
#define F_LIVE		1	// live consonant, including RA
#define F_HALCONS	2	// explicit halant form, followed by another consonant
#define F_HALANT	3	// explicit halant form, at the end of a word
#define F_CONJ1		4	// dead - first half of conjunct (never on RA)
						// TODO: figure out if we need to distinguish between F_CONJ1 and F_HALF
#define F_HALF		5	// dead - half-form, if any (including RA - both reph & rakar)
#define	F_NOHALANT	6	// functions like half-form in that any explicit halant is removed; following consonant "connects" backwards
//#define F_VSIGN	7	// vowel sign, vowels only

// Ra forms
#define raform user2
#define R_NOMINAL	0
#define R_REPH		1
#define R_RAKAR		2
#define R_EYELASH	3

#define attached user3  // has attachment been performed on this glyph?

// We can double up the usage on user4, since they are different contexts:
#define mergedHalant user4  // for handling the merging of a consonant and halant
#define useNarrow user4     // use a narrower version of the matra-I to avoid collisions

// Substitution passes
#define PASS_RRA		1
#define PASS_MARKSYL	2
#define PASS_RA			3
#define PASS_VORDER		4
#define PASS_NUKTA		5
#define PASS_AHKAND		5
#define PASS_REPHRAKAR	5
#define PASS_HALFFORMS	6
#define PASS_RAKARFULL	6
#define PASS_MARKMATRAI 6
#define PASS_FULLCONJ	7
#define PASS_MATRAWIDTH	7
#define	PASS_LIGBELOW	8
#define PASS_HALANT		8
#define PASS_FIXUPPERS	8
#define PASS_FRACTIONS	8
#define PASS_FEATURES	8
#define PASS_LATINDIAC	8 // currently not used
#define PASS_SUB4POS	8 // substitutions that help positioning
#define PASS_SUB4POSMORE 9
//Positioning passes
#define PASS_ATTACH		1
#define PASS_ADJUST		2


/*******************************************************************

	MORE GLYPH DEFINITIONS

*******************************************************************/

table(glyph) {AttributeOverride = false}

	//	Underlying (nominal) consonant forms

	cls_consNom = (
		DevKa	DevKha	DevGa	DevGha	DevNga	DevCa	DevCha	DevJa	DevJha	DevJha
		DevNya	DevTta	DevTtha	DevDda	DevDdha	DevNna	DevTa	DevTha	DevDa	DevDha
		DevNa	DevNaNukta	DevPa	DevPha	DevBa	DevBha	DevMa	DevYa	DevRa	DevRaNukta
		DevLa	DevLla	DevLlaNukta	DevWa	DevSha	DevSsa	DevSa	DevHa	DevKaNukta	DevKhaNukta
		DevGaNukta	DevJaNukta	DevDdaNukta	DevDdhaNukta	DevPhaNukta	DevYaNukta	DevDdaMarawari

		// In the case of a Type Tuned font where the alternate is in the cmap:
		DevJha_alt  DevJha_alt2  DevNna_archaic
	);
	
	g_ra = DevRa;
	
	g_rra = DevRaNukta;
	g_rraEyelash = DevHalfRa;

	g_zwj = unicode(0x200D);
	g_zwnj = unicode(0x200C);

	//	Consonant groups - for handling matra widths
	
	cls_fullKa		= (DevKa	DevKaNukta			DevKaR		DevKaNuktaR		DevKaR_alt); 	//	g0915_093c_094d_0930_alt
	cls_fullKha		= (DevKha	DevKhaNukta			DevKhaR		DevKhaNuktaR);
	cls_fullGa		= (DevGa	DevGaNukta			DevGaR		DevGaNuktaR);
	cls_fullGha		= (DevGha	DevGhaNukta		DevGhaR		DevGhaNuktaR);
	cls_fullNga		= (DevNga	DevNgaNukta		DevNgaR		DevNgaNuktaR);
	cls_fullCa		= (DevCa	DevCaNukta		DevCaR		DevCaNuktaR);
	cls_fullCha		= (DevCha	DevChaNukta		DevChaR		DevChaNuktaR);
	cls_fullJa		= (DevJa	DevJaNukta			DevJhaR		DevJaNuktaR);
	cls_fullJha		= (DevJha	DevJhaNukta		DevJhaR		DevJhaNuktaR);
	cls_fullJha_alt
				= (DevJha_alt	DevJhaNukta_alt	DevJhaR_alt	DevJhaNuktaR_alt);
	cls_fullJha_alt2
				= (DevJha_alt2 DevJhaNukta_alt2	DevJhaR_alt2	DevJhaNuktaR_alt2);
	cls_fullNya		= (DevNya	DevNyaNukta		DevNyaR		DevNyaNuktaR);
	cls_fullTta		= (DevTta	DevTtaNukta		DevTtaR		DevTtaNuktaR);
	cls_fullTtha	= (DevTtha	DevTthaNukta		DevTthaR		DevTthaNuktaR);
	cls_fullDda		= (DevDda	DevDdaNukta			DevDdaR		DevDdaNuktaR);
	cls_fullDdha	= (DevDdha	DevDdhaNukta			DevDdhaR		DevDdhaNuktaR);
	cls_fullNna		= (DevNna	DevNnaNukta		DevNnaR		DevNnaNuktaR	DevNna_archaic);
	cls_fullTa		= (DevTa	DevTaNukta		DevTaR		DevTaNuktaR	DevTaR_alt	DevTaNuktaR_alt);
	cls_fullTha		= (DevTha	DevThaNukta		DevThaR		DevThaNuktaR);
	cls_fullDa		= (DevDa	DevDaNukta		DevDaR		DevDaNuktaR);
	cls_fullDha		= (DevDha	DevDhaNukta		DevDhaR		DevDhaNuktaR);
	cls_fullNa		= (DevNa	DevNaNukta			DevNaR		DevNaNuktaR);
	cls_fullPa		= (DevPa	DevPaNukta		DevPaR		DevPaNuktaR);
	cls_fullPha		= (DevPha	DevPhaNukta			DevPhaR		DevPhaNuktaR);
	cls_fullBa		= (DevBa	DevBaNukta		DevBaR		DevBaNuktaR);
	cls_fullBha		= (DevBha	DevBhaNukta		DevBhaR		DevBhaNuktaR);
	cls_fullMa		= (DevMa	DevMaNukta		DevMaR		DevMaNuktaR);
	cls_fullYa		= (DevYa	DevYaNukta			DevYaR		DevYaNuktaR);
	cls_fullYa_alt	= (DevYa_alt DevYaNukta_alt		DevYaR_alt	DevYaNuktaR_alt);
	cls_fullRa		= (DevRa	DevRaNukta);
	cls_fullLa		= (DevLa	DevLaNukta		DevLaR		DevLaNuktaR);
	cls_fullLla		= (DevLla	DevLlaNukta			DevLlaR		DevLlaNuktaR);
	cls_fullWa		= (DevWa	DevWaNukta		DevWaR		DevWaNuktaR);
	cls_fullSha		= (DevSha	DevShaNukta		DevShaR		DevShaNuktaR	DevShaR_alt	DevShaNuktaR_alt);
	cls_fullSsa		= (DevSsa	DevSsaNukta		DevSsaR		DevSsaNuktaR);
	cls_fullSa		= (DevSa	DevSaNukta		DevSaR		DevSaNuktaR);
	cls_fullHa		= (DevHa	DevHaNukta		DevHaR		DevHaNuktaR);
	cls_fullGga		= (DevGga	DevGgaNukta		DevGgaR		DevGgaNuktaR);
	cls_fullJja		= (DevJja	DevJjaNukta		DevJjaR		DevJjaNuktaR);
	cls_fullDdda	= (DevDdda	DevDddaNukta		DevDddaR		DevDddaNuktaR);
	cls_fullBba		= (DevBba	DevBbaNukta		DevBbaR		DevBbaNuktaR);

	//	Vowels
	
	cls_vowelLeft = (DevMaatraI, DevPrishthamatraE);
	cls_vowelRight = (DevMaatraOOE, DevMaatraAA, DevMaatraII, DevMaatraCandraO, DevMaatraShortO, DevMaatraO, DevMaatraAU, DevMaatraAW);	// these can have RAs attached
	

	//	Nukta and nukta forms

	g_nukta = DevNukta;
	cls_woNukta = (
		DevKa		DevKha		DevGa		DevGha		DevNga		DevCa		DevCha		DevJa		DevJha
		DevNya		DevTta		DevTtha		DevDda		DevDdha		DevNna		DevTa		DevTha		DevDa
		DevDha		DevNa		DevPa		DevPha		DevBa		DevBha		DevMa		DevYa		DevRa
		DevLa		DevLla		DevWa		DevSha		DevSsa		DevSa		DevHa		DevVowelShortA		DevVowelA
		DevVowelAA		DevVowelI		DevVowelII		DevVowelU		DevVowelUU		DevVowelR		DevVowelL		DevVowelRR		DevVowelLL
		DevVowelCandraE		DevVowelShortE		DevVowelE		DevVowelAI		DevVowelCandraO		DevVowelShortO		DevVowelO		DevVowelAU		DevVowelCandraA
		DevMaatraAA		DevMaatraI		DevMaatraII		DevMaatraU		DevMaatraUU		DevMaatraR		DevMaatraRR		DevMaatraL		DevMaatraLL
		DevMaatraCandraE		DevMaatraShortE		DevMaatraE		DevMaatraAi		DevMaatraCandraO		DevMaatraShortO		DevMaatraO		DevMaatraAU		DevGga
		DevJja		DevDdda		DevBba);
				
	cls_wNukta  = (
		DevKaNukta		DevKhaNukta		DevGaNukta		DevGhaNukta	DevNgaNukta	DevCaNukta	DevChaNukta	DevJaNukta		DevJhaNukta
		DevNyaNukta	DevTtaNukta	DevTthaNukta	DevDdaNukta		DevDdhaNukta		DevNnaNukta	DevTaNukta	DevThaNukta	DevDaNukta
		DevDhaNukta	DevNaNukta		DevPaNukta	DevPhaNukta		DevBaNukta	DevBhaNukta	DevMaNukta	DevYaNukta		DevRaNukta
		DevLaNukta	DevLlaNukta		DevWaNukta	DevShaNukta	DevSsaNukta	DevSaNukta	DevHaNukta	DevVowelShortANukta	DevVowelANukta
		DevVowelAANukta	DevVowelINukta	DevVowelIINukta	DevVowelUNukta	DevVowelUUNukta	DevVowelRNukta	DevVowelLNukta	DevVowelRRNukta	DevVowelLLNukta
		DevVowelCandraENukta	DevVowelShortENukta	DevVowelENukta	DevVowelAINukta	DevVowelCandraONukta	DevVowelShortONukta	DevVowelONukta	DevVowelAUNukta	DevVowelCandraANukta
		DevMaatraAANukta	DevMaatraINukta	DevMaatraIINukta	DevMaatraUNukta	DevMaatraUUNukta	DevMaatraRNukta	DevMaatraRRNukta	DevMaatraLNukta	DevMaatraLLNukta
		DevMaatraCandraENukta	DevMaatraShortENukta	DevMaatraENukta	DevMaatraAiNukta	DevMaatraCandraONukta	DevMaatraShortONukta	DevMaatraONukta	DevMaatraAUNukta	DevGgaNukta
		DevJjaNukta	DevDddaNukta	DevBbaNukta);


	//	Akhand
	
	g_akhand = DevHalant;


	//	Half forms
	
	cls_nHalf = (
		DevKa				DevKaNukta			DevKha				DevKhaNukta			DevGa				DevGaNukta			DevGha
		DevGhaNukta			DevNga			DevNgaNukta			DevCa			DevCaNukta			DevCha			DevChaNukta
		DevJa				DevJaNukta			DevJha				DevJhaNukta		DevJha_alt			DevJhaNukta_alt	DevJha_alt2
		DevJhaNukta_alt2	DevNya				DevNya				DevNyaNukta		DevTta				DevTtaNukta
		DevTtha				DevTthaNukta		DevDda				DevDdaNukta			DevDdha				DevDdhaNukta			DevNna
		DevNnaNukta			DevTa			DevTaNukta			DevTaR	 	DevTaNuktaR			DevTha
		DevThaNukta			DevDa			DevDaNukta			DevDha			DevDhaNukta			DevNa			DevNaNukta
		DevPa				DevPaNukta		DevPha				DevPhaNukta			DevBa				DevBaNukta
		DevBha				DevBhaNukta		DevMa				DevMaNukta		DevYa				DevYaNukta			
		DevYa_alt			DevYaNukta_alt		DevRa				DevRaNukta
		DevLa				DevLaNukta		DevLla				DevLlaNukta			DevWa				DevWaNukta		DevSha
		DevSsa				DevSsaNukta		DevSa				DevSaNukta		DevHa				DevHaNukta		DevGga
		DevGgaNukta			DevJja			DevJjaNukta			DevDdda			DevDddaNukta			DevBba
		DevBbaNukta			DevNna_archaic	DevK_Ssa		DevK_Ssa_archaic				DevJ_Nya	DevT_Ta);

	cls_half = (
		DevHalfKa			DevHalfKaNukta			DevHalfKha			DevHalfKhaNukta			DevHalfGa			DevHalfGaNukta				DevHalfGha
		DevHalfGhaNukta	DevHalfNga			DevHalfNgaNukta	DevHalfCa			DevHalfCaNukta	DevHalfCha				DevHalfChaNukta
		DevHalfJa			DevHalfJaNukta			DevHalfJha			DevHalfJhaNukta	DevHalfJha_alt		DevHalfJhaNukta_alt	DevHalfJha_alt2
		DevHalfJhaNukta_alt2						DevHalfNya			DevHalfNya			DevHalfNyaNukta	DevHalfTta				DevHalfTtaNukta
		DevHalfTtha			DevHalfTthaNukta	DevHalfDda			DevHalfDdaNukta			DevHalfDdha			DevHalfDdhaNukta				DevHalfNna
		DevHalfNnaNukta	DevHalfTa			DevHalfTaNukta	DevHalfTaR		DevHalfTaNuktaR				DevHalfTha
		DevHalfThaNukta	DevHalfDa			DevHalfDaNukta	DevHalfDha			DevHalfDhaNukta	DevHalfNa				DevHalfNaNukta
		DevHalfPa			DevHalfPaNukta	DevHalfPha			DevHalfPhaNukta			DevHalfBa			DevHalfBaNukta
		DevHalfBha			DevHalfBhaNukta	DevHalfMa			DevHalfMaNukta	DevHalfYa			DevHalfYaNukta
		DevHalfYa_alt		DevHalfYaNukta_alt		DevHalfRa			DevHalfRa
		DevHalfLa			DevHalfLaNukta	DevHalfLla			DevHalfLlaNukta			DevHalfWa			DevHalfWaNukta		DevHalfSha
		DevHalfSsa			DevHalfSsaNukta	DevHalfSa			DevHalfSaNukta	DevHalfHa			DevHalfHaNukta		DevHalfGga
		DevHalfGgaNukta	DevHalfJja			DevHalfJjaNukta	DevHalfDdda			DevHalfDddaNukta	DevHalfBba
		DevHalfBbaNukta	DevHalfNna_archaic	DevHalfK_Ssa	DevHalfK_Ssa_archaic			DevHalfJ_Nya	DevHalfT_Ta);


	//	Full conjuncts
	
	//	The _cpress classes are included for documentation; they are not needed by rules.
	
	cls_0915_2ndhalf	= (DevKa				DevTa);
	cls_0915_conj 		= (DevK_Ka		DevK_Ta);
//	cls_0915_conj_cpress= (DevK_Ka_alt	DevK_Ta);
	
	cls_0919_2ndhalf	= (DevKa				DevKha				DevGa				DevGha				DevNga				DevHa);
	cls_0919_conj		= (DevNg_Ka		DevNg_Kha		DevNg_Ga		DevNg_Gha		DevNg_Nga		DevNg_Ha);
//	cls_0919_conj_cpress= (DevNg_Ka_alt	DevNg_Kha_alt	DevNg_Ga_alt	DevNg_Gha_alt	DevNg_Nga_alt	DevNg_Ha_alt);

	cls_091a_2ndhalf	= (DevCa);
	cls_091a_conj		= (DevC_Ca);
//	cls_091a_conj_cpress= (DevC_Ca_alt);
	
	cls_091f_2ndhalf	= (DevTta				DevTtha);
	cls_091f_conj		= (DevTt_Tta		DevTt_Ttha);
//	cls_091f_conj_cpress= (DevTt_Tta_alt	DevTt_Ttha_alt);
	
	cls_0920_2ndhalf	= (DevTtha);
	cls_0920_conj		= (DevTth_Ttha);
//	cls_0920_conj_cpress= (DevTth_Ttha_alt);
	
	cls_0921_2ndhalf	= (DevDda);
	cls_0921_conj		= (DevDd_Dda);
//	cls_0921_conj_cpress= (DevDd_Dda_alt);
	
	cls_0926_2ndhalf	= (DevDa			DevDha				DevMa				DevYa				DevWa);
	cls_0926_conj		= (DevD_Da	DevD_Dha	DevD_Ma	DevD_Ya	DevD_Wa);
	
	cls_0936_2ndhalf	= (DevCa			DevWa);
	cls_0936_conj		= (DevSh_Ca	DevSh_Wa);
	
	cls_0937_2ndhalf	= (DevTta			DevTtha);
	cls_0937_conj		= (DevSs_Tta	DevSs_Ttha);
	
	cls_0939_2ndhalf	= (DevNa			DevMa				DevYa				DevLa				DevWa);
	cls_0939_conj		= (DevH_Na	DevH_Ma	DevH_Ya	DevH_La	DevH_Wa);

	cls_1sthalf_0924	= (DevHalfTa		DevHalfPa);
	cls_1sthalf_0924_nom= (DevTa				DevPa);
	cls_conj_0924		= (DevT_Ta		DevP_Ta);
	
	cls_1sthalf_0928	= (DevHalfNa		DevHalfSa	DevHalfHa);
	cls_1sthalf_0928_nom= (DevNa				DevSa				DevHa);
	cls_conj_0928		= (DevN_Na		DevS_Na	DevH_Na);
	
	cls_1sthalf_0932	= (DevHalfMa		DevHalfLa);
	cls_1sthalf_0932_nom= (DevMa				DevLa);
	cls_conj_0932		= (DevM_La		DevL_La);
//	cls_conj_0932_cpress= (DevM_La_alt	DevL_La_alt);
	
	// Compressed stacked conjuncts
	
	cStackCompress = (
	    DevK_Ka_alt, DevNg_Ka_alt, DevNg_Kha_alt, DevNg_Ga_alt, DevNg_Gha_alt, 
	    DevNg_Nga_alt, DevNg_Ha_alt, DevC_Ca_alt, DevTt_Tta_alt, DevTt_Ttha_alt,
	    DevTth_Ttha_alt, DevDd_Dda_alt, DevM_La_alt, DevL_La_alt);

	cno_stackCompress = (
	    DevK_Ka, DevNg_Ka, DevNg_Kha, DevNg_Ga, DevNg_Gha, 
	    DevNg_Nga, DevNg_Ha, DevC_Ca, DevTt_Tta, DevTt_Ttha, 
	    DevTth_Ttha, DevDd_Dda, DevM_La, DevL_La);
	    
	// Lower matras cause the compression:
	cls_matraLower = (DevMaatraU  DevMaatraUU  DevMaatraR  DevMaatraRR  DevVowelLL  DevMaatraL
					DevMaatraUNukta  DevMaatraUUNukta  DevMaatraRNukta  DevMaatraRRNukta  DevVowelLLNukta  DevMaatraLNukta);

	
	//	Conjunct components
	
	cls_conjSideBySide = (DevK_Ta, DevD_Ma, DevD_Ya, DevH_Ma, DevH_Ya)
			{ component { c1 = box(0,bb.bottom,  aw/2,bb.top);
			              c2 = box(aw/2,bb.bottom,  aw,bb.top) } };
			             
	cStackCompress
			{ component { c1 = box(0, bb.bottom + bb.height/2,  aw, bb.top + 50m);
			              c2 = box(0, bb.bottom,  aw, bb.bottom + bb.height/2) } };

	DevHaNuktaMaatraUU
			{ component { c1 = box(0, bb.bottom + bb.height/3,  aw, bb.top + 50m);
			              c2 = box(0, bb.bottom,  aw, bb.bottom + bb.height/3) } };
			              
	//	All other conjuncts are split horizontally through the middle.
	//	(Because AttributeOverride is false, the side-by-side ones will retain their values.)
	cls_conjAll = (cls_0915_conj, cls_0919_conj, cls_091a_conj, cls_091f_conj, cls_0920_conj,
		cls_0921_conj, cls_0926_conj, cls_0936_conj, cls_0937_conj, cls_0939_conj, cls_conj_0924,
		cls_conj_0928, cls_conj_0932)
			{ component { c1 = box(0, bb.bottom + bb.height/2,  aw, bb.top + 50m);
			              c2 = box(0, bb.bottom,  aw, bb.bottom + bb.height/2) } };
	

	// Rakar full forms
	
	cls_woRakar = (
		DevKa		DevKha		DevGa		DevGha		DevNga		DevCa		DevCha		DevJa		DevJha
		DevNya		DevTta		DevTtha		DevDda		DevDdha		DevNna		DevTa		DevTha		DevDa
		DevDha		DevNa		DevPa		DevPha		DevBa		DevBha		DevMa		DevYa		DevLa
		DevLla		DevWa		DevSha		DevSsa		DevSa		DevHa		DevGga		DevJja		DevDdda
		DevBba		DevKaNukta		DevKhaNukta		DevGaNukta		DevGhaNukta	DevNgaNukta	DevCaNukta	DevChaNukta	DevJaNukta
		DevJhaNukta	DevNyaNukta	DevTtaNukta	DevTthaNukta	DevDdaNukta		DevDdhaNukta		DevNnaNukta	DevTaNukta	DevThaNukta
		DevDaNukta	DevDhaNukta	DevNaNukta		DevPaNukta	DevPhaNukta		DevBaNukta	DevBhaNukta	DevMaNukta	DevYaNukta		DevYaNukta_alt
		DevYa_alt
		DevLaNukta	DevLlaNukta		DevWaNukta	DevShaNukta	DevSsaNukta	DevSaNukta	DevHaNukta	DevGgaNukta	DevJjaNukta
		DevDddaNukta	DevBbaNukta	DevK_Ssa		DevJ_Nya);

	cls_wRakar = (
		DevKaR		DevKhaR		DevGaR		DevGhaR		DevNgaR		DevCaR		DevChaR		DevJaR		DevJhaR
		DevNyaR		DevTtaR		DevTthaR		DevDdaR		DevDdhaR		DevNnaR		DevTaR		DevThaR		DevDaR
		DevDhaR		DevNaR		DevPaR		DevPhaR		DevBaR		DevBhaR		DevMaR		DevYaR		DevLaR
		DevLlaR		DevWaR		DevShaR		DevSsaR		DevSaR		DevHaR		DevGgaR		DevJjaR		DevDddaR
		DevBbaR		DevKaNuktaR		DevKhaNuktaR		DevGaNuktaR		DevGhaNuktaR	DevNgaNuktaR	DevCaNuktaR	DevChaNuktaR	DevJaNuktaR
		DevJhaNuktaR	DevNyaNuktaR	DevTtaNuktaR	DevTthaNuktaR	DevDdaNuktaR		DevDdhaNuktaR		DevNnaNuktaR	DevTaNuktaR	DevThaNuktaR
		DevDaNuktaR	DevDhaNuktaR	DevNaNuktaR		DevPaNuktaR	DevPhaNuktaR		DevBaNuktaR	DevBhaNuktaR	DevMaNuktaR	DevYaNuktaR	DevYaNuktaR_alt
		DevYaR_alt
		DevLaNuktaR	DevLlaNuktaR		DevWaNuktaR	DevShaNuktaR	DevSsaNuktaR	DevSaNuktaR	DevHaNuktaR	DevGgaNuktaR	DevJjaNuktaR
		DevDddaNuktaR	DevBbaNuktaR	DevK_SsaR		DevJ_NyaR);
		
	cls_woRakarHalf = (
		DevKa		DevKha		DevGa		DevGha
		DevCa		DevJa		DevJha		DevJha_alt	
		DevNya		DevNna		DevTa		//g0924_alt
		DevTha		DevDha		DevNa
		DevNaNukta		DevPa		DevPha		DevBa
		DevBha		DevMa		DevYa		DevLa
		DevWa		DevSha		//g0936_alt
		DevSsa		DevSa		DevKaNukta		DevGaNukta
		DevJaNukta		DevPhaNukta		DevYaNukta		DevGga
		DevJja		DevBba);

	// These form rakar conjuncts with halants:
	cls_woRakarHalant = cls_woRakar;
	cls_woRakarHalant -= cls_woRakarHalf;

	// Used for placeholders:
	gBogus = pseudo(glyphid(1));

	// Rakar half forms
		
	cls_wRakarHalf = (
		DevHalfKaR	DevHalfKhaR	DevHalfGaR	DevHalfGhaR
		DevHalfCaR	DevHalfJaR	DevHalfJhaR	DevHalfJhaR_alt	
		DevHalfNyaR	DevHalfNnaR	DevHalfTaR	//g0924_094d_0930_094d_half_alt
		DevHalfThaR	DevHalfDhaR	DevHalfNaR
		DevHalfNaNuktaR	DevHalfPaR	DevHalfPhaR	DevHalfBaR
		DevHalfBhaR	DevHalfMaR	DevHalfYaR	DevHalfLaR
		DevHalfWaR	DevHalfShaR	//g0936_094d_0930_094d_half_alt
		DevHalfSsaR	DevHalfSaR	DevHalfKaNuktaR	DevHalfGaNuktaR	
		DevHalfJaNuktaR	DevHalfPhaNuktaR	DevHalfYaNuktaR	DevHalfGgaR
		DevHalfJjaR	DevHalfBbaR);

	cls_wNuktaWoRakarHalf = (
		DevKa		DevKha		DevGa		DevGha
		DevCa
		DevJa		DevJha		DevJha_alt	
		DevNya		DevNna		DevTa		//g0924_alt
		DevTha		DevDha		DevNa
		DevPa		DevPha		DevBa
		DevBha		DevMa		DevYa		DevLa
		DevWa		DevSha		//g0936_alt
		DevSsa		DevSa		DevGga
		DevJja		DevBba);

	cls_wNuktaWRakarHalf = (
		DevHalfKaNuktaR		DevHalfKhaNuktaR		DevHalfGaNuktaR		DevHalfGhaNuktaR	
		DevHalfCaNuktaR
		DevHalfJaNuktaR		DevHalfJhaNuktaR	DevHalfJhaNuktaR_alt	
		DevHalfNyaNuktaR	DevHalfNnaNuktaR	DevHalfTaNuktaR	//g0924_093c_094d_0930_094d_half_alt
		DevHalfThaNuktaR	DevHalfDhaNuktaR	DevHalfNaNuktaR
		DevHalfPaNuktaR	DevHalfPhaNuktaR		DevHalfBaNuktaR
		DevHalfBhaNuktaR	DevHalfMaNuktaR	DevHalfYaNuktaR		DevHalfLaNuktaR
		DevHalfWaNuktaR	DevHalfShaNuktaR	//g0936_093c_094d_0930_094d_half_alt
		DevHalfSsaNuktaR	DevHalfSaNuktaR	DevHalfGgaNuktaR
		DevHalfJjaNuktaR	DevHalfBbaNuktaR);

	cls_rakarHalf = (cls_wRakarHalf, cls_wNuktaWRakarHalf);
	
	cls_yaRakarHalf_pre = ( DevNga	DevCha	DevTta	DevTtha	DevDda	DevDdha	DevDa	DevHa );
	cls_yaRakarHalf_pre094d = (
		// These are place holders; they will never be matched - this allows this class to be used
		// with cls_yaRakarHalf_conj:
		gBogus	gBogus	gBogus	gBogus	gBogus	gBogus
		// These will be matched:
		DevHalfDa		DevHalfHa );

	cls_yaRakarHalf_conj = (
		DevHalfNg_YaRa		DevHalfCh_YaRa
		DevHalfTt_YaRa		DevHalfTth_YaRa
		DevHalfDd_YaRa		DevHalfDdh_YaRa
		DevHalfD_YaRa		DevHalfH_YaRa
	);
	cls_yyaRakarHalf_conj = (
		DevHalfNg_YaNuktaRa		DevHalfCh_YaNuktaRa
		DevHalfTt_YaNuktaRa		DevHalfTth_YaNuktaRa
		DevHalfDd_YaNuktaRa		DevHalfDdh_YaNuktaRa
		DevHalfD_YaNuktaRa		DevHalfH_YaNuktaRa
	);

	//	The "rakar" shows up in different forms in these glyphs. The following classes holds glyphs
	//	that show the rakar looking like a real rakar at the bottom of the glyph. Since they are
	//	so distinct, we make a real ligature out of them so the rakar can be manipulated.
	
	//	These first few have the rakars slightly higher.
	cls_wRakarCaretHigh = (DevLlaR  DevLlaNuktaR)
		{ comp    { cons  = box(0,-descent+600m,  aw,ascent);
					rakar = box(0,-descent,  aw,-descent+600m) }};
	
	cls_wRakarCaret = (
		DevNgaR		DevChaR		DevJhaR_alt2	DevTtaR
		DevTthaR		DevDdaR		DevDdhaR			DevLlaR
		DevLlaNuktaR		DevDdaNuktaR		DevDdhaNuktaR			DevJjaR
		// w/ nuktas
		DevNgaNuktaR	DevChaNuktaR	DevJhaNuktaR_alt2	DevTtaNuktaR
		DevTthaNuktaR	DevJjaNuktaR
	)
		{ comp    { cons  = box(0,-descent+400m,  aw,ascent);
					rakar = box(0,-descent,  aw,-descent+400m) }};
					
	cls_woRakarCaret = (
		DevNga		DevCha		DevJha_alt2		DevTta
		DevTtha		DevDda		DevDdha			DevLla
		DevLlaNukta		DevDdaNukta		DevDdhaNukta			DevJja
		// w/ nuktas
		DevNgaNukta		DevChaNukta		DevJhaNukta_alt2	DevTtaNukta
		DevTthaNukta		DevJjaNukta
	)

	//	These form a true ligature, where the rakar looks like a little slash buried in the glyph.
	//	For now we're not defining components for these.
/****
	cls_wRakarSlash = (
		DevKaR	DevKhaR	DevGaR	DevGhaR		DevCaR	DevJhaR	DevJhaR_alt
		DevNyaR	DevNnaR	DevTaR	DevTaR_alt	DevDdhaR	DevDaR
		DevDhaR	DevNaR	DevNaNuktaR	DevPaR		DevPhaR	DevBaR	DevBhaR
		DevMaR	DevYaR	DevYaR_alt	DevLaR	DevWaR	DevShaR	DevShaR_alt
		DevSsaR	DevSaR	DevHaR	DevKaNuktaR		DevKhaNuktaR	DevGaNuktaR	DevJaNuktaR
		DevPhaNuktaR	DevYaNuktaR	DevYaNuktaR_alt	DevGgaR	DevJjaR	DevBbaR
		// w/ nuktas
//		g0915_093c_094d_0930_alt	
		DevGhaNuktaR	DevCaNuktaR	DevJhaNuktaR		DevJhaNuktaR_alt
		DevNyaNuktaR		DevNnaNuktaR	DevTaNuktaR	DevTaNuktaR_alt	DevThaNuktaR	DevDaNuktaR
		DevDhaNuktaR		DevPaNuktaR	DevBaNuktaR	DevBhaNuktaR
		DevMaNuktaR		DevLaNuktaR	DevWaNuktaR	DevShaNuktaR		DevShaNuktaR_alt
		DevSsaNuktaR		DevSaNuktaR	DevHaNuktaR	DevGgaNuktaR		DevJjaNuktaR	DevBbaNuktaR
		// conjuncts
		DevK_SsaR	DevJ_NyaR
	);
****/

	//	Matras
	
	cls_matraI = (DevMaatraI, DevMaatraINukta);
	cls_matraI_width20 = (DevMaatraI_width20, DevMaatraINukta_width20);
	cls_matraI_width30 = (DevMaatraI_width30, DevMaatraINukta_width30);
	cls_matraI_width40 = (DevMaatraI_width40, DevMaatraINukta_width40);
	
	cls_matraII = (DevMaatraII, DevMaatraIINukta);
	cls_matraII_width20 = (DevMaatraII_width20, DevMaatraIINukta_width20);
	cls_matraII_width30 = (DevMaatraII_width30, DevMaatraIINukta_width30);
	
	cls_matraII_all = (cls_matraII, cls_matraII_width20, cls_matraII_width30);
		
	// classes to choose correct width of matra
	
	consWidth20_matraI = (cls_fullKa, cls_fullGa, cls_fullGha, cls_fullNga, cls_fullTta, cls_fullTtha, 
		cls_fullDda, cls_fullDdha, cls_fullTa, cls_fullDa, cls_fullNa, cls_fullPa, cls_fullPha, cls_fullBa, 
		cls_fullBha, cls_fullMa, cls_fullYa, cls_fullWa, cls_fullSsa, cls_fullHa, cls_fullGga, cls_fullDdda, 
		cls_fullBba, DevK_Ka, DevK_Ta, DevNg_Ka, DevNg_Kha, DevJ_Nya, 
		DevJ_NyaR, DevT_Ta, DevD_Da, DevD_Wa, DevN_Na, 
		DevP_Ta, DevM_La, DevL_La, DevSs_Tta, DevSs_Ttha, DevH_Na, 
		DevH_La, DevH_Wa);
	
	consWidth30_matraI = (cls_fullKha, cls_fullCa, cls_fullCha, cls_fullJa, cls_fullJha, cls_fullJha_alt, 
		cls_fullNya, cls_fullNna, cls_fullTha, cls_fullDha, cls_fullYa_alt, cls_fullLa, cls_fullLla, 
		cls_fullSha, cls_fullSa, cls_fullJja, DevNna_archaic, DevK_Ssa, DevK_SsaR, 
		DevK_Ssa_archaic, DevC_Ca, DevD_Dha, DevD_Ma, DevD_Ya, 
		DevSh_Ca, DevSh_Wa, DevS_Na);

	consWidth40_matraI = (DevH_Ma, DevH_Ya, cls_half);
	
	// also for conjuncts, based on width of first (top) consonant
	conjWidth20_matraI = (cls_0915_conj, cls_0919_conj, cls_091f_conj,	// ka, nga, tta,
		cls_0920_conj, cls_0921_conj, DevT_Ta, cls_0926_conj, 	// ttha, dda, ta, da,
		DevN_Na, DevP_Ta, DevM_La,				// na, pa, ma,
		cls_0937_conj, cls_0939_conj, DevH_Na );				// ssa, ha
		
	conjWidth30_matraI = (cls_091a_conj, DevL_La, cls_0936_conj, DevS_Na);	// ca, la, sha, sa
	
	
	// Would these consonants look better with the larger matra-I? I guess the designer thinks not...
//	consWidth20_matraI += (cls_fullKa, cls_fullTta, cls_fullTtha, cls_fullTa, cls_fullDa,
//		cls_fullDa_0928, cls_fullDa_092A, cls_fullDa_092b, cls_fullSsa, cls_fullSa, cls_fullHa);

	consWidth20_matraII = (cls_fullNga, cls_fullCha, cls_fullJha_alt2, cls_fullTtha, cls_fullLla, 
		DevGlottalStop, DevGlottalStop_alt, DevNg_Ka);

	consWidth30_matraII = (cls_fullKa, cls_fullJha, cls_fullPha, DevK_Ka, DevK_Ta);


	//	Ligatures below
	
	cls_noLigBelow_0939 = (DevMaatraR);
	cls_ligBelow_0939   = (DevH_Ri);
	
	cls_noLigBelow_0930 	= (DevMaatraU			DevMaatraUU);
	cls_ligBelow_0930   	= (DevR_U		DevR_UU);
	cls_ligBelow_0930_alt	= (DevRaMaatraU	DevRaMaatraUU);	// currently not used
	
	cls_noLigBelow_0931 	= (DevMaatraU			DevMaatraUU);
	cls_ligBelow_0931   	= (DevRNukta_U		DevRNukta_UU);
	cls_ligBelow_0931_alt	= (DevRaNuktaMaatraU	DevRaNuktaMaatraUU);	// currently not used
	
	// currently not used:
//	cls_ru_alt_ligs = (
//		DevRaMaatraU, DevRaNuktaMaatraU, DevRaMaatraUNukta, DevRaNuktaMaatraUNukta, 
//		DevRaMaatraUU, DevRaNuktaMaatraUU, DevRaMaatraUUNukta, DevRaNuktaMaatraUUNukta)
//			{ component { cr = box(0, bb.bottom + 550m, aw, bb.top + 50m);
//			              cu = box(0, bb.bottom,        aw, bb.bottom + 550m) } };
		
//	cls_noLigRephZwjU	= (DevMaatraU			DevMaatraUU);
//	cls_ligRephZwjU		= (g0930_200d_0941	g0930_200d_0942)
//			{ component { c1 = box(0, bb.top + 50m,      aw, bb.bottom + 550m);
//                        c2 = box(0, bb.bottom + 550m,  aw, bb.bottom) } };


	//	Halant (virama)
	
	g_halant = DevHalant;
	
	//	explicit halant forms: only needed if we have a feature to prefer the halant over the half-form
	//	for this character
//	cls_woHalant = (DevHa		 		DevHaNukta);
//	cls_wHalant  = (DevHa_halant	DevHaNukta_halant);
	
	//	These forms "look like" they have an explicit halant in them, so they do not have the
	//	matra-I reorder around them; the I goes after these forms. We are probably being a little
	//	"smarter" than absolutely necessary.
	//	Note that the place where we do the reordering is before we've actually substituted the
	//	halant form, so we test for the nominal form.
	cls_hasExplicitHalant = (DevNga, DevDdaNukta, DevCha, DevTta, DevTtha, DevDda, DevDdha, DevDa);
				// add DevHa if we add a feature to use halant form
	
	cls_halantExplicit = (DevHa_halant, DevHaNukta_halant,
		DevHalfNga, DevHalfNgaNukta, DevHalfDdaNukta,
		DevHalfTta, DevHalfTtaNukta, 
		DevHalfTtha, DevHalfTthaNukta, 
		DevHalfDda, DevHalfDdha, DevHalfDdhaNukta,
		DevHalfDa, DevHalfDaNukta);
		
	//	Alternate YA form
	
	cls_ya		= (DevYa		DevHalfYa			DevYaR		
				   DevYaNukta		DevHalfYaNukta			DevYaNuktaR);
	cls_ya_alt	= (DevYa_alt	DevHalfYa_alt		DevYaR_alt
				   DevYaNukta_alt	DevHalfYaNukta_alt		DevYaNuktaR_alt);
	
	//	This glyph causes any explicit halant in the previous consonant to be removed.
	//	It in essence forms a connection backwards to the previous consonant.
	cls_openBack = (DevYa, DevYaNukta);
	

	//	Forms that collide with reph and anusvara:
	//	break into two pieces so that we can shift the upper Candra form.
	
	//	0949 (Candra-O)  =>  0945 (Candra-E) + 093E (AA)
	g0949_top = pseudo(unicode(0x0945))			// Candra-E
		{UpperM.x = DevMaatraCandraE.UpperM.x; UpperM.y = DevMaatraCandraE.UpperM.y};
	g0949_bottom = pseudo(unicode(0x093E))		// vowel-sign AA  - also defines HalantS
		{UpperS.x = DevMaatraAA.UpperS.x; UpperS.y = DevMaatraAA.UpperS.y};
		 
	//	0949 (Candra-O) & nukta  =>  0945 (Candra-E)   +   AA-nukta
	g0949_093c_top = pseudo(unicode(0x0945)) 	// Candra-E - TODO: merge with g0949_top
		{UpperM.x = DevMaatraCandraE.UpperM.x; UpperM.y = DevMaatraCandraE.UpperM.y};
	g0949_093c_bottom = pseudo(glyphid(299))	// AA & nukta, DevMaatraAANukta - FIX THIS # FOR A NEW SET OF GLYPHS
												// glyph ID should = DevMaatraCandraONukta
		{UpperS.x = DevMaatraAANukta.UpperS.x; UpperS.y = DevMaatraAANukta.UpperS.y};	// also defines HalantS
	
	//	Candra-E  &  nukta  =>  back to its two original pieces
	g0945_093c_top = pseudo(unicode(0x0945)) 	// Candra-E
		{UpperM.x = DevMaatraCandraE.UpperM.x; UpperM.y = DevMaatraCandraE.UpperM.y};
	g0945_093c_bottom = pseudo(unicode(0x093C))	// nukta
		{NuktaM.x = DevNukta.NuktaM.x; NuktaM.y = DevNukta.NuktaM.y};	// also defines NuktaAltM
			
	cls_0949_top    = (g0949_top,    g0949_093c_top);
	cls_0949_bottom = (g0949_bottom, g0949_093c_bottom);

	cUpperDia += (g0949_top, g0949_093c_top, g0945_093c_top);
	cTakesUpperDia += (g0949_bottom, g0949_093c_bottom);
	cNuktaDia += (g0945_093c_bottom);

	cls_093b = (DevMaatraOOE);
	cls_0940 = (DevMaatraII, DevMaatraIINukta, DevMaatraII_width20, DevMaatraIINukta_width20, DevMaatraII_width30, DevMaatraIINukta_width30);
	cls_0949 = (DevMaatraCandraO, DevMaatraCandraONukta);
	cls_094a = (DevMaatraShortO, DevMaatraShortONukta);
	cls_094b = (DevMaatraO, DevMaatraONukta);
	cls_094c = (DevMaatraAU, DevMaatraAUNukta);
	cls_094f = (DevMaatraAW);
	
	cls_0945 = (DevMaatraCandraE, DevMaatraCandraENukta, g0945_093c_top, g0949_top, g0949_093c_top);
	cls_0946 = (DevMaatraShortE, DevMaatraShortENukta);
	cls_0947 = (DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt);
	cls_0948 = (DevMaatraAi, DevMaatraAiNukta);
	
	
	//	Attachments never happen across these glyphs:
	cls_noAttach = (g_space, g_zwnj);	// TODO: add punctuation?
	
	
	//	Marks can can interfere with vowels below:
	cls_lowerMark = (DevAnudatta, DevMaatraUE, DevMaatraUUE);
	
	
	// Small candrabindu:
	DevCandrabindu_alt {CaM.x = bb.left + (bb.width/2); CaM.y = bb.bottom};
	DevInvCandrabindu_alt {CaM.x = bb.left + (bb.width/2); CaM.y = bb.bottom};
	// Anusvara:
	DevAnusvara {CaM.x = bb.left + (bb.width/2); CaM.y = bb.bottom };
	
	cls_candrab = (DevCandrabindu, DevInvCandrabindu);
	cls_candrab_alt = (DevCandrabindu_alt, DevInvCandrabindu_alt);
	
	// Allow candrabindu/anusvara to attach to candra-E and other dependent vowels:
	DevMaatraOE {CaS.x = UpperM.x; CaS.y = bb.top + 100m};
	DevMaatraCandraE {CaS.x = UpperM.x - 50m; CaS.y = bb.top};
	DevMaatraShortE {CaS = point(0m, bb.bottom + 110m)};
	DevMaatraE {CaS = point(-150m, bb.bottom + 110m)};
	DevMaatraAi {CaS = point(-130m, bb.bottom + 110m)};
	
	DevMaatraCandraENukta		{CaS.x = DevMaatraCandraE.CaS.x; CaS.y = DevMaatraCandraE.CaS.y};
	DevMaatraShortENukta		{CaS.x = DevMaatraShortE.CaS.x; CaS.y = DevMaatraShortE.CaS.y};
	DevMaatraENukta		{CaS.x = DevMaatraE.CaS.x; CaS.y = DevMaatraE.CaS.y};
	DevMaatraENukta_alt	{CaS.x = DevMaatraE.CaS.x; CaS.y = DevMaatraE.CaS.y};
	DevMaatraAiNukta		{CaS.x = DevMaatraAi.CaS.x; CaS.y = DevMaatraAi.CaS.y};

	g0945_093c_top	{CaS.x = DevMaatraCandraE.CaS.x; CaS.y = DevMaatraCandraE.CaS.y};	// pseudo-glyphs that use DevMaatraCandraE (candra-E)
	g0949_top		{CaS.x = DevMaatraCandraE.CaS.x; CaS.y = DevMaatraCandraE.CaS.y};
	g0949_093c_top	{CaS.x = DevMaatraCandraE.CaS.x; CaS.y = DevMaatraCandraE.CaS.y};
		
	cls_0940 {CaS.x = UpperS.x; CaS.y = UpperS.y + 300m};
	cls_0949 {CaS.x = UpperS.x - 50m; CaS.y = bb.top};	// looks like 0945
	cls_094a {CaS.x = 525m; CaS.y = DevMaatraShortE.CaS.y};		// looks like 0946
	cls_094b {CaS.x = 400m; CaS.y = DevMaatraE.CaS.y};		// looks like 0947
	cls_094c {CaS.x = 450m; CaS.y = DevMaatraAi.CaS.y};		// looks like 0948
	
	cTakesCandra = (cls_0940, cls_0945, cls_0946, cls_0947, cls_0948, cls_0949, cls_094a, cls_094b, cls_094c, DevMaatraOE);
	cCandra = (DevCandrabindu_alt, DevAnusvara, DevInvCandrabindu_alt);

	// Special case for anusvara attaching to an iikar (the candrabindu is raised higher than we want to do
	// for the anusvara):
	DevAnusvara {AnM.x = bb.left + (bb.width/2) - 200m; AnM.y = bb.bottom + 200m };
	cls_0940 {AnS.x = UpperS.x; AnS.y = UpperS.y + 300m}; // identical to CaS
	cTakesAn = (cls_0940);
	cAn = (DevAnusvara);

	
	//	These have special glyphs for superscript reph (with or without candrabindu/anusvara).
	//	Also, nuktas have to be kept as separate glyphs and attached.
	cls_vowelRtHigh					= 	(DevMaatraShortO					DevMaatraO					DevMaatraAU
										 DevMaatraII					DevMaatraII_width20);	// currently no real-life uses of width30
	
	cls_vowelRtHigh_0930_094d		=	(DevMaatraShortOReph		DevMaatraOReph			DevMaatraAUReph
										 DevMaatraIIReph		DevMaatraII_width20Reph)									
			{ component { c1 = box(0,bb.bottom,    aw,(2*bb.top)/3);
			              c2 = box(0,(2*bb.top)/3, aw,bb.top+100m) };
			  NuktaS = point(275m, -160m) };	
			              
	cls_vowelRtHigh_0930_094d_0901	=	(DevMaatraShortORephCandrabindu	DevMaatraORephCandrabindu	DevMaatraAURephCandrabindu
										 DevMaatraIIRephCandrabindu	DevMaatraII_width20RephCandrabindu)
			{ component { c1 = box(0,bb.bottom,       aw,(2*bb.top)/3);
			              c2 = box(0,(2*bb.top)/3,    aw/2+200m,bb.top);
			              c3 = box(aw/2,(2*bb.top)/3, aw+300m,bb.top-100m) };
			  NuktaS = point(275m, -160m) };	
			              
	cls_vowelRtHigh_0930_094d_0902	=	(DevMaatraShortORephBindu	DevMaatraORephBindu	DevMaatraAURephBindu
										 DevMaatraIIRephBindu	DevMaatraII_width20RephBindu)
			{ component { c1 = box(0,bb.bottom,       aw,(2*bb.top)/3);
			              c2 = box(0,(2*bb.top)/3,    aw/2+50m,bb.top);
			              c3 = box(aw/2,(2*bb.top)/3, aw,bb.top-200m) };
			  NuktaS = point(275m, -160m) };	
			  
	cTakesNuktaDia += (cls_vowelRtHigh_0930_094d, cls_vowelRtHigh_0930_094d_0901, cls_vowelRtHigh_0930_094d_0902);
	
	DevRephCandrabindu {component {c1 = box(bb.left,bb.bottom,            bb.left+bb.width/2+100m,bb.top);
								c2 = box(bb.left+bb.width/2,bb.bottom, bb.right,bb.top-100m)}};
	DevRephBindu {component {c1 = box(bb.left,bb.bottom,            bb.left+bb.width/2+50m,bb.top);
								c2 = box(bb.left+bb.width/2,bb.bottom, bb.right,bb.top-100m)}};

endtable;

/*******************************************************************

	FEATURES

*******************************************************************/

#include "annapurna_gr_features.gdh"


/*******************************************************************

	RULES

*******************************************************************/

// SUBSTITUTION

table(substitution)

pass(PASS_RRA)	// 1

	//	RA forms
	//	Unfortunately this needs to be in a pass by itself, otherwise the rule below
	//	that marks rakar conjuncts gets confused.
	g_ra  g_nukta  >  g_rra:(1 2)  _;

endpass;


pass(PASS_MARKSYL)	// 2

	//	Mark the live and dead consonants based on the syllable structure.
	//	Live = with inherent or explicit dependent vowel; Dead = viramacized.

	//	Recognize and mark conjuncts.
	//	NOTE: These rules must match those below that actually form the conjuncts.
	//	TODO: figure out if we really need to distinguish between F_CONJ1 and F_HALF.
	
	DevKa {form = F_CONJ1}  g_nukta?  g_halant  cls_0915_2ndhalf  /  _  _  _ ^ _;
	DevNga {form = F_CONJ1}  g_nukta?  g_halant  cls_0919_2ndhalf  /  _  _  _ ^ _;
	DevCa {form = F_CONJ1}  g_nukta?  g_halant  cls_091a_2ndhalf  /  _  _  _ ^ _;
	DevTta {form = F_CONJ1}  g_nukta?  g_halant  cls_091f_2ndhalf  /  _  _  _ ^ _;
	DevTtha {form = F_CONJ1}  g_nukta?  g_halant  cls_0920_2ndhalf  /  _  _  _ ^ _;
	DevDda {form = F_CONJ1}  g_nukta?  g_halant  cls_0921_2ndhalf  /  _  _  _ ^ _;
	DevDa {form = F_CONJ1}  g_nukta?  g_halant  cls_0926_2ndhalf  /  _  _  _ ^ _;
	DevSha {form = F_CONJ1}  g_nukta?  g_halant  cls_0936_2ndhalf  /  _  _  _ ^ _;
	DevSsa {form = F_CONJ1}  g_nukta?  g_halant  cls_0937_2ndhalf  /  _  _  _ ^ _;
	DevHa {form = F_CONJ1}  g_nukta?  g_halant  cls_0939_2ndhalf  /  _  _  _ ^ _;

	cls_1sthalf_0924_nom {form = F_CONJ1}  g_nukta?  g_halant  DevTa  /  _  _  _ ^ _;
	cls_1sthalf_0928_nom {form = F_CONJ1}  g_nukta?  g_halant  DevNa  /  _  _  _ ^ _;
	cls_1sthalf_0932_nom {form = F_CONJ1}  g_nukta?  g_halant  DevLa  /  _  _  _ ^ _;
	
	//  Rakar conjuncts with halants
	cls_woRakarHalant {form = F_CONJ1}  g_ra {form = F_HALCONS; raform = R_RAKAR}  /  _=C  g_nukta?  g_halant _=R  g_halant;

	//	Rakar conjuncts (note that cls_woRakar includes forms with nuktas attached, but this rule
	//	just won't recognize them).
	cls_woRakar {form = F_CONJ1}  g_ra  /  _=C  g_nukta?  g_halant ^ _=R;
	
	//	Three-way conjuncts:
	DevKa {form = F_CONJ1}  g_halant  DevSsa {form = F_CONJ1}  g_halant  g_ra  /  _  _  _  _ ^ _;
	DevJa {form = F_CONJ1}  g_halant  DevNya {form = F_CONJ1}  g_halant  g_ra  /  _  _  _  _ ^ _;
	
	//	ZWNJ forces an explicit halant:
	cls_consNom {form = F_HALANT}  /  _  g_nukta?  g_halant  g_zwnj ^;
	
	//	Exception to the "look-like-halant" rule below: a YA has a form that "connects"
	//	with the previous consonant, even if it would normally use an explicit halant.
	cls_hasExplicitHalant {form = F_NOHALANT}  /    _  g_nukta?  g_halant ^ g_zwj?  cls_lowerMark?  cls_openBack;
	
	//	These are half-forms that "look like" they have an explicit halant, so make them
	//	behave that way.
	cls_hasExplicitHalant {form = F_HALCONS}  /  _  g_nukta?  g_halant ^ g_zwj?  cls_lowerMark?  cls_consNom;

	//	These have true half-forms:
	cls_nHalf {form = F_HALF}  /  _  g_nukta?  g_halant ^ g_zwj?  cls_lowerMark?  cls_consNom;
	
	//	ZWJ forces a half-form:
	cls_nHalf {form = F_HALF}  /  _  g_nukta?  g_halant  g_zwj ^;
	
	//	Default to halant form if there is a halant.
	cls_consNom {form = F_HALANT}  /  _  g_nukta?  g_halant ^;
	
	//	No halant--just a standard live consonant.
	cls_consNom {form = F_LIVE}  /  _  g_nukta? ^;
	
endpass;


pass(PASS_RA)	// 3

	//	Deal with behavior of RA. These rules are based roughly on the Devanagari description
	//	in the Unicode Standard book.
	
	// Special case for two ras + halants
	DevRa  g_halant  DevRa  g_halant
		> DevRa:3 {raform = R_NOMINAL}  g_halant:4  DevRa:1 {raform = R_REPH}  g_halant:2
		/  _  _  _  _  cls_consNom {form == F_LIVE};
	
	//	If RA+virama is to be applied to a dead consonant, then the mark is positioned after
	//	the whole cluster (cluster may be conjunct or half-form-plus-base) and it uses the
	//	reph (superscript) form.
	//	Don't apply this rule if the RA has already been moved (raform == REPH).
	//	Reprocess the cons-cons sequence in case it also involves a RA.
	g_ra  g_halant  _  _  >  _  _  @Rd {raform = R_REPH}  @H
		/  _=Rd {raform != R_REPH} /*dead, !rakar*/  _=H
			^  cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT}  g_nukta?  g_halant  g_zwj?
			[g_ra { form == F_HALF }  g_halant]? // rakar
			cls_consNom {form == F_LIVE}  g_nukta?
			[cls_vowelRight g_nukta?]?
			_  _;
		
	//	Otherwise, if a dead RA precedes a (plain live) consonant or halant form, it is
	//	replaced by the reph (superscript) form and reordered to be after the last element.
	//	Note that if the RA is *already* marked as a reph, it belongs with the previous syllable,
	//	not the following one.
	g_ra  g_halant  _  _  >  _  _  @Rd {raform = R_REPH}  @H
		/  _=Rd {raform != R_RAKAR && raform != R_REPH} /*- dead*/  _=H
			cls_consNom {F_LIVE <= form || form <= F_HALANT}  g_nukta?  g_halant?
			[cls_vowelRight g_nukta?]?
			_  _ ;

	//	According to the Unicode Standard, page 304, two RAs get reordered:
	g_ra  g_halant  g_ra  >  @R2  @R1 {raform = R_REPH}  @H
		/  _=R1 /*dead*/  _=H  _=R2 /*live*/;
		
	//	This is an odd sequence, but Steve Smith says it's the way fonts seem to work.
	g_rra  g_ra {raform = R_RAKAR}  /  _ /*dead*/  g_halant  _ {form == F_LIVE};
	
	//	In comformance with the ISCII standard, the half-consonant RRA is represented as
	//	eyelash-RA.
	g_rra  >  @R {raform = R_EYELASH}  /  _=R /*dead*/  g_halant;
	
	//	If the dead RA precedes ZWJ, use the eyelash-RA.
	g_ra  >  @R {raform = R_EYELASH}  /  _=R /*dead*/  g_halant  g_zwj ;

	//	Rakar half-forms.
	cls_woRakarHalf  g_halant g_ra  g_halant  >  cls_wRakarHalf:(1 2 3 4)  _  _  _
		/  _=Cd /*dead*/  _  _=Rd {form == F_HALF}  _ ;

	cls_wNuktaWoRakarHalf  g_nukta  g_halant g_ra  g_halant  >  cls_wNuktaWRakarHalf:(1 2 3 4 5)  _  _  _  _
		/  _=Cd /*dead*/  _  _  _=Rd {form == F_HALF}  _ ;


	//	When a dead consonant (other than RA--see rule above) precedes a live RA, then the
	//	consonant is replaced with its nominal form and RA is given the rakar (subscript) form.
	//	No reordering happens. Eventually the halant will be deleted, but not yet.
	cls_consNom    g_ra  >  @Cd {form = F_CONJ1}  @Rl {raform = R_RAKAR}
		/  _=Cd /*dead*/  g_nukta?  g_halant  _=Rl {form == F_LIVE};
	
	//	Use rakar otherwise. Back up and possibly process the RA further.
	//	For a rakar conjunct, the deadness of the rakar remains to possibly permit a further
	//	conjunct. 
	cls_consNom  g_ra  >  @Cd /*conj1*/  @Rd {raform = R_RAKAR} // form = F_HALF
		/  _=Cd /*dead*/  g_nukta?  g_halant ^ _=Rd {form == F_HALF}  g_halant ;
		
endpass;

pass(PASS_VORDER)	// 4

	//	Reorder I vowel (i-kaar, matra-I) and 094E.
	//	TODO: possibly add yet another consonant in the chain.


	//	Matra-I does not reorder before explicit halants - redundant.
///	cls_hasExplicitHalant  _  _  cls_vowelLeft  g_nukta  >  @Ch  @V  @N  _  _
///		/  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  _=Ch /*dead*/ {form != F_CONJ1}  g_nukta?  g_halant  _  _  cls_consNom /*live*/  g_nukta?  _=V  _=N;
///	cls_hasExplicitHalant  _  cls_vowelLeft  >  @Ch  @V  _
///		/  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  _=Ch /*dead*/ {form != F_CONJ1}  g_nukta?  g_halant  _  cls_consNom /*live*/  g_nukta?  _=V;

	// 	Matra-I does not reorder before ZWNJ - redundant.
///	g_zwnj _  _  cls_vowelLeft  g_nukta  >  @Z  @V  @N  _  _
///		/  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  cls_consNom /*dead*/  g_nukta?  g_halant  _=Z  _  _  cls_consNom /*live*/  g_nukta?  _=V  _=N;
///	g_zwnj _  cls_vowelLeft  >  @Z @V  _
///		/  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  cls_consNom /*dead*/  g_nukta?  g_halant  _=Z  _  cls_consNom /*live*/  g_nukta?  _=V;


	//	Explicit halant case: move vowel to just after the halant.
	//	NOTE: we include the explicit-halant consonant in the LHS and RHS (not just the context)
	//	in order to ensure that the rule gets matched early enough in the processing.
	cls_consNom  _  _  cls_vowelLeft  g_nukta  >  @Chal  @V  @N  _  _
		/	[ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
			_=Chal {form == F_HALCONS}  g_nukta?  g_halant  g_zwnj?
			_  _ /* insert here */
			cls_consNom /*live*/  g_nukta?
			_=V  _=N;
	cls_consNom  _  cls_vowelLeft  >  @Chal  @V  _
		/	[ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
			_=Chal {form == F_HALCONS}  g_nukta?  g_halant  g_zwnj?
			_ /* insert here */
			cls_consNom /*live*/  g_nukta?
			_=V;

	//	Normal case: move vowel to beginning of consonant cluster.
	_  _  cls_vowelLeft  g_nukta  >  @V  @N  _  _
		/	_  _ /* insert here */
			[ [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
			  cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?  
			cls_consNom /*live*/  g_nukta?  g_zwj? 
			_=V  _=N;
	_  cls_vowelLeft  >  @V  _
		/	_  /* insert here */
			[ [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
			  cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
			cls_consNom /*live*/  g_nukta?  g_zwj? 
			_=V;

	//  Rakar half-forms have already been created.
	_  _  cls_vowelLeft  g_nukta  >  @V  @N  _  _
		/	_  _ /* insert here */
			[ cls_rakarHalf  g_zwj? ]?  
			cls_consNom /*live*/  g_nukta?  g_zwj? 
			_=V  _=N;
	_  cls_vowelLeft  >  @V  _
		/	_  /* insert here */
			[ cls_rakarHalf g_zwj? ]?
			cls_consNom /*live*/  g_nukta?  g_zwj? 
			_=V;

	//	Handle the fact that reph has been reordered.
	_  _  cls_vowelLeft  g_nukta  >  @V  @N  _  _
		/	_  _ /* insert here */
			[ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT}  g_nukta?  g_halant?  g_zwj?  ]?
			cls_consNom /*live*/  g_nukta?  g_zwj? 
			g_ra {raform == R_REPH}  g_halant
			_=V  _=N;
	_  cls_vowelLeft  >  @V  _
		/	_ /* insert here */
			[ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT}  g_nukta?   g_halant?  g_zwj?  ]?
			cls_consNom /*live*/  g_nukta?  g_zwj? 
			g_ra {raform == R_REPH}  g_halant
			_=V;
		
endpass;
		
pass(PASS_NUKTA)	// 5
	//	Combine nuktas.
	
	// But DON'T do it for high vowels with reph (superscript); they use a special ligature form:
	cls_vowelRtHigh  g_nukta  g_ra  g_halant  >  @V  @N  DevRaReph:(3 4)  _
		/ _=V  _=N  _=R {raform == R_REPH}  _=H;
	
	cls_woNukta  g_nukta  >  cls_wNukta:(1 2)  _ / ^ _  _;	// reprocess for rakar

endpass;

pass(PASS_AHKAND)	// 5
	//	Akhand
	DevKa  g_akhand  DevSsa  >  DevK_Ssa:(1 2 3)  _  _;
	DevJa  g_akhand  DevNya  >  DevJ_Nya:(1 2 3)  _  _;
endpass;

pass(PASS_REPHRAKAR)	// 5
	//	Reph & Rakar
	g_ra  g_halant  >  DevRaReph:(1 2)   _  /  _=R {raform == R_REPH}   _=H;
	
	g_ra  >  DevRaVattu  /  _=R {raform == R_RAKAR} ;
	// Otherwise RA functions as the base consonant of the syllable.
endpass;


pass(PASS_HALFFORMS)	// 6
	//	Odd exceptional case:
	g_rra  g_halant  >  g_rra:(1 2)  _  /  _  _  DevRaVattu;
	
	//	Use an alternate form of YA when the previous consonant would have an explicit halant.
	//	DON'T use so-called half form (which will have the explicit halant--we want to remove it).
	//	Also back up and reprocess the YA (eg, to make a rakar ligature).
	cls_nHalf  g_halant  cls_ya  >  cls_nHalf:(C1 H)  _  cls_ya_alt 
		/  _=C1 {form == F_NOHALANT}  _=H  DevRaReph? ^ _=Y;

	//	Don't do any combining if a ZWNJ is present.
	cls_nHalf  g_halant  g_zwnj  /  _  _  DevRaReph? _ ;

	// Non-standard behavior for minority languages: eyelash ra with nukta.
	DevRaNukta  g_halant  >  DevHalfRaNukta:(1 2)  _  /  _ {form == F_HALF || form == F_CONJ1}  _  g_zwj;

	//	Special case for two ras - don't use eyelash form (generated by half-form rule below).
	DevRa  DevHalant  DevRaReph;
	
	//	Create half forms (later we will turn some of them into conjuncts).
	cls_nHalf  g_halant  >  cls_half:(1 2)  _  /  _ {form == F_HALF || form == F_CONJ1}  _ ;
endpass;

pass(PASS_RAKARFULL)	// 6
	//	Rakar full forms
	//	First do the ones that have components defined:
	
	//	Kludge: First merge consonant and halant together so they can occupy the same component:
	cls_woRakarCaret  g_halant  >  @C:(C H) {mergedHalant = true}  _
		/ ^ _=C  _=H  DevRaVattu {raform == R_RAKAR} ;
	//	Then substitute the conjunct:
	cls_woRakarCaret  DevRaVattu 
		>  cls_wRakarCaret:(C R) {comp {cons.ref=@C; rakar.ref=@R}}  _ 
		/  _=C {mergedHalant}  _=R;
		
	// No components defined:
	cls_woRakar  g_halant  DevRaVattu 
		>  cls_wRakar:(1 2 3)  _  _ ;
	
	//	If no conjunct, at least just delete the halant.
	cls_consNom  g_halant  DevRaVattu  >  cls_consNom:(1 2)  _  @3;
	
endpass;
  

table(glyph)
	cls_narrowIBeforeCandrab = (DevKha, DevKhaNukta, DevGa, DevGaNukta, DevGha, DevGhaNukta,
		DevNga, DevNgaNukta, DevTta, DevTtaNukta, DevDdaNukta, DevCa, DevCaNukta, DevCha, DevChaNukta,
		DevJa, DevJaNukta, DevJha, DevJhaNukta, DevNya, DevNyaNukta, DevDda, DevDdaNukta,
		DevDdha, DevDdhaNukta, DevNna, DevNnaNukta, DevTa, DevTaNukta,
		DevTha, DevThaNukta, DevDa, DevDaNukta, DevDha, DevDhaNukta, DevNa, DevNaNukta,
		DevPa, DevPaNukta, DevBa, DevBaNukta, DevBha, DevBhaNukta, DevMa, DevMaNukta, DevYa,
		DevYaNukta, DevLa, DevLaNukta, DevLla, DevLlaNukta, DevWa, DevWaNukta,
		DevSha, DevShaNukta, DevSsa, DevSsaNukta, DevSa, DevSaNukta, DevHa, DevHaNukta
		
	);
	cls_narrowIBeforeAnusv = (
		DevNga, DevNgaNukta, DevDdaNukta, DevCa, DevCaNukta, DevCha, DevChaNukta, DevJa, DevJaNukta,
		DevNya, DevNyaNukta, DevDda, DevDdaNukta, DevDdha, DevDdhaNukta,
		DevNna, DevNnaNukta, DevTha, DevThaNukta, DevMa, DevMaNukta, DevYa, DevYaNukta
	);
	// These are okay after all: DevGa, DevGaNukta, DevGha, DevGhaNukta, DevBha, DevJha, DevJhaNukta, DevDha, DevDhaNukta, DevBa, DevBaNukta, DevBhaNukta, DevWa, DevWaNukta, DevSha, DevShaNukta

	cls_shiftCandrabAfterI = (DevRa, DevRaNukta); // narrow reph forms
endtable;

pass(PASS_MARKMATRAI)  // 6
	//	If the swoop of the matra-I (ikar) is going to collide with a candrabindu or anusvara,
	//	use a narrower version. Here we just mark it as needing the narrower version, and we
	//	do the subtitution below.
	cls_matraI {useNarrow = true}  /  _  cls_narrowIBeforeCandrab  DevNukta?  DevCandrabindu ;
	cls_matraI {useNarrow = true}  /  _  cls_narrowIBeforeAnusv    DevNukta?  DevAnusvara ;
endpass;

pass(PASS_FULLCONJ)	//  7

	//	Full conjuncts
	//	NOTE: these rules must match those above that recognize conjuncts.
	
#define SETCOMP {component { c1.reference=@1; c2.reference=@2 }}

//	DevHalfKa  cls_0915_2ndhalf  >  _  cls_0915_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//	DevHalfNga  cls_0919_2ndhalf  >  _  cls_0919_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//	DevHalfCa  cls_091a_2ndhalf  >  _  cls_091a_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//	DevHalfTta  cls_091f_2ndhalf  >  _  cls_091f_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//	DevHalfTtha  cls_0920_2ndhalf  >  _  cls_0920_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//	DevHalfDda  cls_0921_2ndhalf  >  _  cls_0921_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//	cls_1sthalf_0932  DevLa  >  cls_conj_0932_cpress:(1 2) SETCOMP  _  / _  _  cls_matraLower;

	DevHalfKa  cls_0915_2ndhalf  >  _  cls_0915_conj:(1 2) SETCOMP;
	DevHalfNga  cls_0919_2ndhalf  >  _  cls_0919_conj:(1 2) SETCOMP;
	DevHalfCa  cls_091a_2ndhalf  >  _  cls_091a_conj:(1 2) SETCOMP;
	DevHalfTta  cls_091f_2ndhalf  >  _  cls_091f_conj:(1 2) SETCOMP;
	DevHalfTtha  cls_0920_2ndhalf  >  _  cls_0920_conj:(1 2) SETCOMP;
	DevHalfDda  cls_0921_2ndhalf  >  _  cls_0921_conj:(1 2) SETCOMP;
	DevHalfDa  cls_0926_2ndhalf  >  _  cls_0926_conj:(1 2) SETCOMP;
	DevHalfSha  cls_0936_2ndhalf  >  _  cls_0936_conj:(1 2) SETCOMP;
	DevHalfSsa  cls_0937_2ndhalf  >  _  cls_0937_conj:(1 2) SETCOMP;
	DevHalfHa  cls_0939_2ndhalf  >  _  cls_0939_conj:(1 2) SETCOMP;
	
	cls_1sthalf_0924  DevTa  >  cls_conj_0924:(1 2) SETCOMP  _;
	cls_1sthalf_0928  DevNa  >  cls_conj_0928:(1 2) SETCOMP  _;
	cls_1sthalf_0932  DevLa  >  cls_conj_0932:(1 2) SETCOMP  _;

	// rakar conjuncts
	DevHalfKa  DevHalfSsaR  >  DevHalfK_SsaR:(1 2)  _;
	DevHalfJa  DevHalfNyaR  >  DevHalfJ_NyaR:(1 2)  _;

	// These forms basically have the effect of removing the halant from the first consonant in the cluster.
	cls_yaRakarHalf_pre  g_halant  DevHalfYaR  >	cls_yaRakarHalf_conj:(1 2 3)  _  _;
	cls_yaRakarHalf_pre  g_halant  DevHalfYaNuktaR  >	cls_yyaRakarHalf_conj:(1 2 3)  _  _;

	// 0926 is different in that it has already been put into a single glyph with halant.
	cls_yaRakarHalf_pre094d  DevHalfYaR  >  cls_yaRakarHalf_conj:(1 2)  _;
	cls_yaRakarHalf_pre094d  DevHalfYaNuktaR  >  cls_yyaRakarHalf_conj:(1 2)  _;

	// The form that includes the halant is not necessary except that includes an LowerAlt att pt,
	// needed for instance for 0952.
	DevHaR       DevHalant  >  DevHalfHaR:(1 2)  _;
	DevHaNuktaR  DevHalant  >  DevHalfHaNuktaR:(1 2)  _;

endpass;

pass(PASS_MATRAWIDTH)	// 7

	//	Choose a good width for matras.
	//	Since conjuncts may not yet have been formed, this will choose the wrong width for them.
	//	Fix them below.

	//	Narrower-than-normal versions to avoid conflict with candrabindu and anusvara.
	cls_matraI  >  @1  /  _ {useNarrow == true}  consWidth20_matraI;
	cls_matraI  >  cls_matraI_width20  /  _ {useNarrow == true}  consWidth30_matraI;
	cls_matraI  >  cls_matraI_width30  /  _ {useNarrow == true}  consWidth40_matraI;
	
	cls_matraI  >  cls_matraI_width40  /  _  cls_rakarHalf;
	cls_matraI  >  cls_matraI_width20  /  _  consWidth20_matraI;
	cls_matraI  >  cls_matraI_width30  /  _  consWidth30_matraI;
	cls_matraI  >  cls_matraI_width40  /  _  consWidth40_matraI;
		
	cls_matraII  >  cls_matraII_width20  /  consWidth20_matraII  _;
	cls_matraII  >  cls_matraII_width30  /  consWidth30_matraII  _;
	
endpass;

pass(PASS_LIGBELOW)		// 8
	//	Compress stacked conjuncts where necessary. In theory we should be able to replace one conjunct with
	//	a different form, but Graphite seems to lose the ligature components. So we use separate original
	//	rules above.
	cno_stackCompress  >  cStackCompress  /  _  cls_matraLower;
	
	//	Ligatures below
	DevHa  cls_noLigBelow_0939  >  _  cls_ligBelow_0939:(1 2);
	DevRa  cls_noLigBelow_0930  >  _  cls_ligBelow_0930:(1 2);
	DevRaNukta  cls_noLigBelow_0931  >  _  cls_ligBelow_0931:(1 2);
	
	// This rule produces a warning because the ZWJ does not form a component; that's okay.
	// No longer needed.
//	DevRa  g__zero_width_joiner  cls_noLigRephZwjU
//		>  _  _  cls_ligRephZwjU:(1 2 3) { component { c1.ref = @1; c2.ref = @3 } };

	// Combinations to avoid collisions
	DevHaNukta  DevMaatraUU  >  DevHaNuktaMaatraUU:(1 2) { component { c1.ref = @1; c2.ref = @2 } }  _;
endpass;

///pass(PASS_HALANT) -- do we want a feature to turn these on?	// 8
///	//	Explicit halant forms
///	cls_woHalant  g_halant  >  cls_wHalant:(1 2)  _ ;
///endpass;


pass(PASS_FIXUPPERS)	// 8
	//	Use ligatures for high right vowels with reph (possibly with anusvara or candrabindu),
	//	to avoid collisions.
	cls_vowelRtHigh  DevRaReph           >   cls_vowelRtHigh_0930_094d:(V R)
														{component {c1.ref = @V; c2.ref = @R}}
													_
		/ _=V  g_nukta?  _=R ;
	cls_vowelRtHigh  DevRaReph  DevCandrabindu    >   cls_vowelRtHigh_0930_094d_0901:(V R A)
														{component {c1.ref = @V; c2.ref = @R; c3.ref = @A}}
													_  _
		/ _=V  g_nukta?  _=R  _=A ;
	cls_vowelRtHigh  DevRaReph  DevAnusvara    >   cls_vowelRtHigh_0930_094d_0902:(V R C)
														{component {c1.ref = @V; c2.ref = @R; c3.ref = @C}}
													_  _
		/ _=V  g_nukta?  _=R  _=C ;
		
	//	Any other case of reph + upper mark:
	DevRaReph  DevCandrabindu   >   DevRephCandrabindu:(1 2) {component {c1.ref = @1; c2.ref = @2}}  _;
	DevRaReph  DevAnusvara   >   DevRephBindu:(1 2) {component {c1.ref = @1; c2.ref = @2}}  _;
	
	// No special glyph for inverted candrabindu--use a small form and squeeze it in:
	DevInvCandrabindu  >  DevInvCandrabindu_alt  /  (cls_vowelRtHigh_0930_094d  DevRaReph)  _ ;
	
	//	Use small candrabindu whenever there is something else above the baseline.
	cls_candrab  >  cls_candrab_alt
			/  (cls_0945  cls_0946  cls_0947  cls_0948  DevMaatraOE)  _;			// dependent vowels
	cls_candrab  >  cls_candrab_alt
			/  (cls_0940  cls_0949  cls_094a  cls_094b  cls_094c  DevMaatraOOE  DevMaatraAW)  _;	// tall vowels
	cls_candrab  >  cls_candrab_alt 
			/  (DevMaatraOOE DevMaatraAW)  g_nukta  _;
	cls_candrab  >  cls_candrab_alt
			/  (DevVowelCandraA  DevVowelCandraANukta  DevVowelOE  DevVowelOOE  DevVowelAW  DevVowelUE  DevVowelUUE)  g_nukta?  _;
	
	//	Now that the conjuncts have been created, use a narrower matra-I where necessary.
	cls_matraI_width30  >  cls_matraI_width20  /  _  conjWidth20_matraI;
	cls_matraI_width40  >  cls_matraI_width20  /  _  conjWidth20_matraI;
	cls_matraI_width40  >  cls_matraI_width30  /  _  conjWidth30_matraI;
	
	//	No combined form for this vowel, but just use an alternate reph that fits better.
	DevRaReph  >  DevRaReph_alt  /  DevMaatraAW  g_nukta?  _;
	
	
endpass;

pass(PASS_FRACTIONS)	// 8
	//	Fractions
	DevOne  (g__frac_slash g_slash)  DevFour  >  DevOneQuarter:(1 2 3)  _  _;
	DevOne  (g__frac_slash g_slash)  DevTwo  >  DevOneHalf:(1 2 3)  _  _;
	DevThree  (g__frac_slash g_slash)  DevFour  >  DevThreeQuarters:(1 2 3)  _  _;
endpass;

//	Classes for features
table(glyph)
	c_091d_noalt = (
		DevJha		DevHalfJha		DevJhaNukta			DevHalfJhaNukta
		DevJhaR					DevJhaNuktaR);

	c_091d_alt1 = (
		DevJha_alt	DevHalfJha_alt	DevJhaNukta_alt		DevHalfJhaNukta_alt
		DevJhaR_alt				DevJhaNuktaR_alt);
		
	c_091d_alt2 = (
		DevJha_alt2	DevHalfJha_alt2	DevJhaNukta_alt2	DevHalfJhaNukta_alt2
		DevJhaR_alt2				DevJhaNuktaR_alt2);
		

	c_kra_noalt	= (DevKaR		DevKaNuktaR				DevHalfKaR		DevHalfKaNuktaR);
	c_kra_alt	= (DevKaR_alt	DevKaNuktaR_alt			DevHalfKaR_alt	DevHalfKaNuktaR_alt);
	
	c_tra_noalt	= (DevTaR		DevTaNuktaR		DevHalfTaR		DevHalfTaNuktaR);
	c_tra_alt	= (DevTaR_alt	DevTaNuktaR_alt	DevHalfTaR_alt	DevHalfTaNuktaR_alt);

	c_shra_noalt= (DevShaR		DevShaNuktaR		DevHalfShaR		DevHalfShaNuktaR);
	c_shra_alt	= (DevShaR_alt	DevShaNuktaR_alt	DevHalfShaR_alt	DevHalfShaNuktaR_alt);
	
	c_ukar_noalt= (DevMaatraUNukta			DevMaatraUUNukta);
	c_ukar_alt	= (DevMaatraUNukta_alt		DevMaatraUUNukta_alt);
	c_ukar_alt2 = (DevMaatraUNukta_alt2		DevMaatraUUNukta_alt2);

	c_ekar_noalt= (DevMaatraENukta);
	c_ekar_alt	= (DevMaatraENukta_alt);
	
	//	Alternate DYA & HYA forms
	
	cls_dyahya			= (DevD_Ya				DevH_Ya);
	cls_dyyahyya		= (DevD_YaNukta				DevH_YaNukta);
	cls_dyahya_alt		= (DevD_Ya_alt			DevH_Ya_alt);
	cls_daha_half		= (DevHalfDa				DevHalfHa);
	cls_dyahya_half		= (DevD_HalfYa	DevH_HalfYa);
	cls_dyyahyya_half	= (DevD_HalfYaNukta	DevH_HalfYaNukta);
	cls_dyrhyr			= (DevD_YaRa	DevH_YaRa);
	cls_dyyrhyyr		= (DevD_YaNuktaRa	DevH_YaNuktaRa);
	
	cls_dyahya_ligs = (cls_dyyahyya, cls_dyahya_half, cls_dyyahyya_half, cls_dyrhyr, cls_dyyrhyyr)
		{ component { c1 = box(0,-descent,    aw/2,ascent);
			          c2 = box(aw/2,-descent, aw,ascent) } };
	
	g_ya		= (DevYa);
	g_ya_half	= (DevHalfYa);
	g_yya		= (DevYaNukta);
	g_yya_half	= (DevHalfYaNukta);
	g_ya_ra		= (DevYaR);
	g_yya_ra	= (DevYaNuktaR);

	cls_ya_noalt 			= (DevYa,								DevYaNukta);
	cls_ya_noalt_half		= (DevHalfYa,						DevHalfYaNukta);
	cls_ya_ra_noalt 		= (DevYaR,						DevYaNuktaR);
	cls_rya_alt 			= (DevRa_Ya,			DevRa_YaNukta);
	cls_rya_alt_half 		= (DevRa_HalfYa,	DevRa_HalfYaNukta);
	cls_rya_ra_alt_half 	= (DevRa_YaRa,	DevRa_YaNuktaRa);
	
endtable; // glyph

pass(PASS_FEATURES)	// 8

if (jha == india)
	c_091d_alt1  >  c_091d_noalt;
	c_091d_alt2  >  c_091d_noalt;
endif;

if (jha == nepal)
	c_091d_noalt  >  c_091d_alt1;
	c_091d_alt2   >  c_091d_alt1;
endif;

if (jha == newar)
	c_091d_noalt  >  c_091d_alt2;
	c_091d_alt1   >  c_091d_alt2;
endif;


if (kra)
	c_kra_noalt  >  c_kra_alt;
else
	c_kra_alt  >  c_kra_noalt;
endif;


if (tra)
	c_tra_noalt  >  c_tra_alt;
else
	c_tra_alt  >  c_tra_noalt;
endif;


if (shra)
	c_shra_noalt  >  c_shra_alt;
else
	c_shra_alt  >  c_shra_noalt;
endif;


if (dyahya)
	cls_dyahya  >  cls_dyahya_alt;
	cls_daha_half  g_yya       >  cls_dyyahyya:(1 2)      {comp {c1.ref = @1; c2.ref = @2}}  _ ;
	cls_daha_half  g_ya_half   >  cls_dyahya_half:(1 2)   {comp {c1.ref = @1; c2.ref = @2}}  _ ;
	cls_daha_half  g_yya_half  >  cls_dyyahyya_half:(1 2) {comp {c1.ref = @1; c2.ref = @2}}  _ ;
	cls_daha_half  g_ya_ra     >  cls_dyrhyr:(1 2)        {comp {c1.ref = @1; c2.ref = @2}}  _ ;
	cls_daha_half  g_yya_ra    >  cls_dyyrhyyr:(1 2)      {comp {c1.ref = @1; c2.ref = @2}}  _ ;
endif;

if (rya)
	DevRa DevHalant g_zwnj cls_ya_ra_noalt		>  _  _  _  cls_rya_ra_alt_half:(1 2 3 4);
	///g0930 DevHalant g_zwnj cls_ya_noalt DevHalant  	>  _  _  _  cls_rya_alt_half:(1 2 3 4 5) _;  // SC
	DevRa DevHalant g_zwnj cls_ya_noalt_half  	>  _  _  _  cls_rya_alt_half:(1 2 3 4);      // JC
	DevRa DevHalant g_zwnj cls_ya_noalt  		>  _  _  _  cls_rya_alt:(1 2 3 4) ;
endif;

if (ukar)
	c_ukar_noalt  >  c_ukar_alt2  /  cStackCompress _ ;
	c_ukar_noalt  >  c_ukar_alt;
else
	c_ukar_alt   >  c_ukar_noalt;
	c_ukar_alt2  >  c_ukar_noalt;
endif;

if (ekar)
	c_ekar_noalt  >  c_ekar_alt;
else
	c_ekar_alt  >  c_ekar_noalt;
endif;


if (digit5)
	DevFive  >  DevFive_alt;
else
	DevFive_alt  >  DevFive;
endif;

if (digit8)
	DevEight  >  DevEight_alt;
else
	DevEight_alt  >  DevEight;
endif;

if (digit9 == form1)
	DevNine_alt  >  DevNine;
	DevNine_alt2 >  DevNine;
endif;
if (digit9 == form2)
	DevNine      >  DevNine_alt;
	DevNine_alt2 >  DevNine_alt;
endif;
if (digit9 == form3)
	DevNine     >  DevNine_alt2;
	DevNine_alt >  DevNine_alt2;
endif;


if (visargabar)
	DevVisarga  >  DevVisarga_alt;
else
	DevVisarga_alt  >  DevVisarga;
endif;

if (glottalbar) // alternate form has no bar
	DevGlottalStop  >  DevGlottalStop_alt;
else
	DevGlottalStop_alt  >  DevGlottalStop;
endif;


if (archaic)
	cno_archaic  >  carchaic;
else
	carchaic  >  cno_archaic;
endif;

endpass; // PASS_FEATURES


pass(PASS_LATINDIAC)	// 8

endpass; // PASS_LATINDIAC

// Classes for collision-fixing substitution
table(glyph)
	cls_conjunctsYaAlt = (DevNg_Ya   DevCh_Ya   DevTt_Ya   DevTth_Ya   DevDd_Ya
		DevDdh_Ya   DevNg_YaNukta   DevCh_YaNukta   DevTt_YaNukta   DevTth_YaNukta   DevDd_YaNukta
		DevDdh_YaNukta   DevNg_YaRa   DevCh_YaRa   DevTt_YaRa
		DevTth_YaRa   DevDd_YaRa   DevDdh_YaRa   DevNg_YaNuktaRa
		DevCh_YaNuktaRa   DevTt_YaNuktaRa   DevTth_YaNuktaRa   DevDd_YaNuktaRa
		DevDdh_YaNuktaRa);
	
	cls_consNarrowRightOfStem2 = (cls_fullKha  cls_fullGa cls_fullGha  cls_fullNga  cls_fullCa  cls_fullCha
		cls_fullJa  cls_fullJha  cls_fullNya  cls_fullTta  cls_fullTtha  cls_fullDda  cls_fullDdha  cls_fullNna
		cls_fullTa  cls_fullTha  cls_fullDa   cls_fullDha  cls_fullNa    cls_fullPa   cls_fullBa    cls_fullBha
		cls_fullMa  cls_fullYa   cls_fullRa   cls_fullLa   cls_fullLla   cls_fullWa   cls_fullSha   cls_fullSsa
		cls_fullSa  cls_fullHa   DevK_Ssa   DevK_SsaR   DevK_Ssa_archaic   DevC_Ca
		DevJ_Nya   DevJ_NyaR   DevT_Ta   DevD_Da   DevD_Dha
		DevD_Ma   DevD_Ya  DevD_Wa  DevN_Na   DevP_Ta   DevM_La
		DevL_La   DevSh_Ca   DevSh_Wa   DevSs_Tta   DevSs_Ttha   DevS_Na
		DevH_Na   DevH_Ma   DevH_Ya   DevH_La   DevH_Wa   DevH_Ri
		cls_conjunctsYaAlt);
		
	cls_matraAndRephComb = (DevMaatraShortEReph   DevMaatraShortERephBindu   DevMaatraShortERephCandrabindu   DevMaatraEReph
	 	DevMaatraERephBindu   DevMaatraERephCandrabindu   DevMaatraAiReph   DevMaatraAiRephBindu   DevMaatraAiRephCandrabindu
	 	DevRaReph   DevRaReph_alt   DevRaReph_alt2   DevRephBindu   DevRephCandrabindu);

	cls_matraWOreph = (DevMaatraShortE  DevMaatraE  DevMaatraAi);
	 	
	cls_matraSpacingAdj = (DevMaatraCandraO   DevMaatraCandraONukta   DevMaatraShortO   DevMaatraShortONukta   DevMaatraO   DevMaatraONukta   DevMaatraAU   DevMaatraAUNukta);
	 
	cls_matraSpacingLeft2 = (DevMaatraIIReph   DevMaatraIIRephBindu   DevMaatraII_width20RephBindu
	 	DevMaatraIIRephCandrabindu   DevMaatraII_width20RephCandrabindu  DevMaatraShortOReph
	 	DevMaatraShortORephBindu   DevMaatraShortORephCandrabindu   DevMaatraOReph   DevMaatraORephBindu
	 	DevMaatraORephCandrabindu   DevMaatraAUReph   DevMaatraAURephBindu   DevMaatraAURephCandrabindu
		//g094a  DevMaatraShortONukta  DevMaatraO  DevMaatraONukta  DevMaatraAU   DevMaatraAUNukta  -   
		);
	 	
	cls_vowelMatraCandrabFix = (DevMaatraCandraLongE   DevMaatraOOE   DevMaatraCandraO  DevMaatraCandraONukta   DevMaatraShortO   DevMaatraShortONukta   DevMaatraO   DevMaatraONukta
	 	DevMaatraAU   DevMaatraAUNukta   DevMaatraCandraE   DevMaatraCandraENukta   DevMaatraShortE   DevMaatraShortENukta   DevMaatraE   DevMaatraENukta   DevMaatraENukta_alt
	 	DevMaatraAi   DevMaatraAiNukta   DevVowelShortA   DevVowelShortANukta   DevVowelCandraA   DevVowelCandraANukta   DevVowelCandraO   DevVowelCandraONukta   DevVowelShortO   DevVowelShortONukta
	 	DevVowelO   DevVowelONukta   DevVowelAU   DevVowelAUNukta   DevVowelII   DevVowelIINukta   DevVowelCandraE   DevVowelCandraENukta   DevVowelShortE   DevVowelShortENukta
	 	DevVowelAI   DevVowelAINukta   cls_matraII_all   DevMaatraOE);

    cls_ra_rra = (DevRa DevRaNukta);
	cls_ra_0947small = (DevRaE  DevRaNuktaE);
	cls_ra_0948small = (DevRaAi  DevRaNuktaAi);

	cls_candrab_collide = (DevCandrabindu  DevMaatraCandraLongE  DevMaatraCandraE  DevMaatraCandraENukta);

	cls_reph_collide = (DevRaReph DevRaReph_alt DevRaReph_alt2  DevRephBindu  DevRephCandrabindu);
endtable

pass(PASS_SUB4POS)	// 8
	//	The candra-O (w & w/o nukta) collides with the reph:
	//	break it into two glyphs so that we can adjust it.
	cls_0949    _  >  cls_0949_bottom:1  cls_0949_top$1:1       /  _  _  DevRaReph;
	//	Same for candra-E + nukta
	DevMaatraCandraENukta  _  >  g0945_093c_top:2   g0945_093c_bottom:2  /  DevRaReph  _  _  ;
	
	//	The candra-O/E collides with the anusvara: break into two pieces.
	cls_0949    _  >  cls_0949_bottom:1  g0949_top:1          /  _  _  DevAnusvara=A;
	DevMaatraCandraENukta  _  >  g0945_093c_top:1   g0945_093c_bottom:1  /  _  _  DevAnusvara=A;
	
	// Two matching diacritics in a row should have an intervening dotted circle.
	DevCandrabindu  _  DevCandrabindu   >   @1  g__dotted_circ:3  @3;
	DevAnusvara  _  DevAnusvara   >   @1  g__dotted_circ:3  @3;
	DevNukta  _  DevNukta   >   @1  g__dotted_circ:3  @3;
	DevMaatraU  _  DevMaatraU   >   @1  g__dotted_circ:3  @3;
	DevMaatraUU  _  DevMaatraUU   >   @1  g__dotted_circ:3  @3;
	DevMaatraR  _  DevMaatraR   >   @1  g__dotted_circ:3  @3;
	DevMaatraRR  _  DevMaatraRR   >   @1  g__dotted_circ:3  @3;
	DevMaatraCandraE  _  DevMaatraCandraE   >   @1  g__dotted_circ:3  @3;
	DevMaatraShortE  _  DevMaatraShortE   >   @1  g__dotted_circ:3  @3;
	DevMaatraE  _  DevMaatraE   >   @1  g__dotted_circ:3  @3;
	DevMaatraAi  _  DevMaatraAi   >   @1  g__dotted_circ:3  @3;
	DevHalant  _  DevHalant   >   @1  g__dotted_circ:3  @3;
	DevUdatta  _  DevUdatta   >   @1  g__dotted_circ:3  @3;
	DevAnudatta  _  DevAnudatta   >   @1  g__dotted_circ:3  @3;
	DevGrave  _  DevGrave   >   @1  g__dotted_circ:3  @3;
	DevAcute  _  DevAcute   >   @1  g__dotted_circ:3  @3;
	DevMaatraCandraLongE  _  DevMaatraCandraLongE   >   @1  g__dotted_circ:3  @3;
	DevMaatraUE  _  DevMaatraUE   >   @1  g__dotted_circ:3  @3;
	DevMaatraUUE  _  DevMaatraUUE   >   @1  g__dotted_circ:3  @3;

endpass;

pass(PASS_SUB4POSMORE)

	// Matra I & II collides with preceding candrabindu
	
	cls_ra_rra  DevMaatraE  >  cls_ra_0947small:(1 2)  _  / DevMaatraAA  cls_candrab_collide _ _;
	cls_ra_rra  DevMaatraAi  >  cls_ra_0948small:(1 2)  _  / DevMaatraAA  cls_candrab_collide _ _;

	cls_ra_rra  DevMaatraE  >  cls_ra_0947small:(1 2)  _  /  (cls_vowelMatraCandrabFix cls_matraSpacingAdj)  (DevCandrabindu DevCandrabindu_alt)  DevAnusvara  _  _;
	cls_ra_rra  DevMaatraAi  >  cls_ra_0948small:(1 2)  _  /  (cls_vowelMatraCandrabFix cls_matraSpacingAdj)  (DevCandrabindu DevCandrabindu_alt)  DevAnusvara  _  _;

	cls_ra_rra  DevMaatraE  >  cls_ra_0947small:(1 2)  _  /  cls_matraSpacingLeft2  _  _;
	cls_ra_rra  DevMaatraAi  >  cls_ra_0948small:(1 2)  _  /  cls_matraSpacingLeft2  _  _;

	cls_ra_rra  DevMaatraE  >  cls_ra_0947small:(1 2)  _  /  cls_consNarrowRightOfStem2  cls_matraAndRephComb  cls_matraWOreph?  _  _;
	cls_ra_rra  DevMaatraAi  >  cls_ra_0948small:(1 2)  _  /  cls_consNarrowRightOfStem2  cls_matraAndRephComb  cls_matraWOreph? _  _;

	cls_ra_rra  DevMaatraE  >  cls_ra_0947small:(1 2)  _  /  cls_consNarrowRightOfStem2 DevCandrabindu  _  _;
	cls_ra_rra  DevMaatraAi  >  cls_ra_0948small:(1 2)  _  /  cls_consNarrowRightOfStem2 DevCandrabindu  _  _;

	cls_ra_rra  DevMaatraE  >  cls_ra_0947small:(1 2)  _  /  cls_candrab_collide cls_reph_collide  _  _;
	cls_ra_rra  DevMaatraAi  >  cls_ra_0948small:(1 2)  _  /  cls_candrab_collide cls_reph_collide  _  _;

	cls_ra_rra  DevMaatraE  >  cls_ra_0947small:(1 2)  _  /  DevMaatraCandraO  _  _;
	cls_ra_rra  DevMaatraAi  >  cls_ra_0948small:(1 2)  _  /  DevMaatraCandraO  _  _;
endpass;

endtable; // substitution


// POSITIONING


table(glyph)

	// Redefine these classes to include only diacritics (this is due to an infelicity in the
	// behavior of makegdl which produces annapurna.gdl):
	cnUpperDiaX = (DevNukta, DevMaatraU, DevMaatraUNukta, DevMaatraUNukta_alt, DevMaatraUU, DevMaatraUUNukta,
		DevMaatraUUNukta_alt, DevMaatraR, DevMaatraRNukta, DevMaatraRR, DevMaatraRRNukta,
		DevHalant, DevAnudatta, DevGrave, DevAcute, DevMaatraCandraLongE, DevMaatraUE, DevMaatraUUE,
		DevMaatraL, DevMaatraLNukta, DevMaatraLL, DevMaatraLLNukta,
		DevRaReph); // handle using Reph, not Upper
	cnUpperCenterDiaX = (DevRaReph, DevNukta, DevMaatraU, DevMaatraUNukta, DevMaatraUNukta_alt, DevMaatraUU, DevMaatraUUNukta,
		DevMaatraUUNukta_alt, DevMaatraR, DevMaatraRNukta, DevMaatraRR, DevMaatraRRNukta,
		DevMaatraCandraENukta, DevMaatraShortE, DevMaatraShortENukta, DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt, DevMaatraAi, DevMaatraAiNukta,
		DevHalant, DevAnudatta, DevMaatraCandraLongE, DevMaatraUE, DevMaatraUUE, DevMaatraL, DevMaatraLNukta, DevMaatraLL, DevMaatraLLNukta,
		DevCandrabindu, DevAnusvara, DevMaatraCandraE); // these last three don't really use UpperCenter even though it is defined
	cnLowerDiaX = (DevCandrabindu, DevAnusvara, DevRaReph, DevNukta, DevMaatraU, DevMaatraUU,
		DevMaatraCandraE, DevMaatraCandraENukta, DevMaatraShortE, DevMaatraShortENukta, DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt, DevMaatraAi, DevMaatraAiNukta,
		DevHalant, DevUdatta, DevAnudatta, DevGrave, DevAcute, DevMaatraCandraLongE, DevMaatraUE, DevMaatraUUE);
	cnLowerCenterDiaX = (DevCandrabindu, DevAnusvara, DevRaReph, DevNukta,
		DevMaatraU, DevMaatraUNukta, DevMaatraUNukta_alt, DevMaatraUU, DevMaatraUUNukta,
		DevMaatraUUNukta_alt, DevMaatraR, DevMaatraRNukta, DevMaatraRR, DevMaatraRRNukta,
		DevMaatraCandraE, DevMaatraCandraENukta, DevMaatraShortE, DevMaatraShortENukta, DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt, DevMaatraAi, DevMaatraAiNukta,
		DevHalant, DevUdatta, DevGrave, DevAcute, DevMaatraCandraLongE,
		DevMaatraL, DevMaatraLNukta, DevMaatraLL, DevMaatraLLNukta);
	cnLowerAltDiaX = (DevCandrabindu, DevAnusvara, DevRaReph, DevNukta,		// used for attaching 0952 to half-forms
		DevMaatraU, DevMaatraUNukta, DevMaatraUNukta_alt, DevMaatraUU, DevMaatraUUNukta,
		DevMaatraUUNukta_alt, DevMaatraR, DevMaatraRNukta, DevMaatraRR, DevMaatraRRNukta,
		DevMaatraCandraE, DevMaatraCandraENukta, DevMaatraShortE, DevMaatraShortENukta, DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt, DevMaatraAi, DevMaatraAiNukta,
		DevHalant, DevUdatta, DevGrave, DevAcute, DevMaatraCandraLongE,
		DevMaatraL, DevMaatraLNukta, DevMaatraLL, DevMaatraLLNukta);
	cnNuktaDiaX = (DevCandrabindu, DevAnusvara, DevRaReph,
		DevMaatraU, DevMaatraUNukta, DevMaatraUNukta_alt, DevMaatraUU, DevMaatraUUNukta,
		DevMaatraUUNukta_alt, DevMaatraR, DevMaatraRNukta, DevMaatraRR, DevMaatraRRNukta,
		DevMaatraCandraE, DevMaatraCandraENukta, DevMaatraShortE, DevMaatraShortENukta, DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt, DevMaatraAi, DevMaatraAiNukta,
		DevHalant, DevUdatta, DevAnudatta, DevGrave, DevAcute, DevMaatraCandraLongE, DevMaatraUE, DevMaatraUUE,
		DevMaatraL, DevMaatraLNukta, DevMaatraLL, DevMaatraLLNukta);
	cnHalantDiaX = (DevCandrabindu, DevAnusvara, DevRaReph, DevNukta,
		DevMaatraU, DevMaatraUNukta, DevMaatraUNukta_alt, DevMaatraUU, DevMaatraUUNukta,
		DevMaatraUUNukta_alt, DevMaatraR, DevMaatraRNukta, DevMaatraRR, DevMaatraRRNukta,
		DevMaatraCandraE, DevMaatraCandraENukta, DevMaatraShortE, DevMaatraShortENukta, DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt, DevMaatraAi, DevMaatraAiNukta,
		DevUdatta, DevAnudatta, DevGrave, DevAcute, DevMaatraCandraLongE, DevMaatraUE, DevMaatraUUE,
		DevMaatraL, DevMaatraLNukta, DevMaatraLL, DevMaatraLLNukta);
	
	//	To handle the fact that both reph and vowel-diacritics need to attach at the same
	//	place (assumes order is C R V): we include reph in the cnUpperDiaX class (above)
	//	so that first the V will be attached using the Upper rule. Then we attach
	//	the reph using the Reph rule, which actually uses the Upper APs. This works
	//	because in Graphite the longest rule is attached first.

	cRephDia = (DevRaReph);
	cTakesRephDia = cTakesUpperDia;
	cnTakesRephDia = cnTakesUpperDia;
	cnRephDiaX = (DevCandrabindu, DevAnusvara, DevNukta,
		DevMaatraU, DevMaatraUNukta, DevMaatraUNukta_alt, DevMaatraUU, DevMaatraUUNukta,
		DevMaatraUUNukta_alt, DevMaatraR, DevMaatraRNukta, DevMaatraRR, DevMaatraRRNukta,
		DevMaatraCandraE, DevMaatraCandraENukta, DevMaatraShortE, DevMaatraShortENukta, DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt, DevMaatraAi, DevMaatraAiNukta,
		DevHalant, DevUdatta, DevAnudatta, DevGrave, DevAcute, DevMaatraCandraLongE, DevMaatraUE, DevMaatraUUE,
		DevMaatraL, DevMaatraLNukta, DevMaatraLL, DevMaatraLLNukta);

	cnRaDiaX = (cUpperDia, cLowerDia, cLowerCenterDia, cLowerAltDia, cHalantDia, cNuktaDia, cRephDia);
		
	//	The UpperCenter AP shouldn't really be used for anything but the acute and grave accents.
	cUpperCenterDiaX = (DevGrave, DevAcute);
	
	cnCaX = (DevAnusvara);	// kind of bogus, but the way we do positioning, we expect a class like this

endtable; // glyph

table(positioning)

pass(PASS_ATTACH)	// 9

// Optional diacritic sequence
#define DIASEQ3(x) [ x [ x x? ]? ]?
#define DIASEQ2(x) [ x x? ]?

//	The SD version of the rules is the one that uses insert = true on the diacritics, so that they
//	can be selected independently of the base.

#define pos_rule(  t, x, a, w, n)   t  x {attach {to = @1; at = a; with = w}; attached = 1} / ^ _ DIASEQ2(n) _ {attached == 0}
#define pos_ruleSD(t, x, a, w, n)   t  x {attach {to = @1; at = a; with = w}; insert = 1; attached = 1} / ^ _ DIASEQ2(n) _ {attached == 0}

// Since we don't have ligature components for the base-plus-nukta forms, to be consistent we don't
// allow insertions before the nuktas below. But allow insertion everywhere else.

//if (select_diac)
	pos_ruleSD(cTakesAn,			cAn,			AnS,			AnM,			cnCaX);
	pos_ruleSD(cTakesCandra,			cCandra,			CaS,			CaM,			cnCaX);
	pos_ruleSD(cTakesUpperDia,		cUpperDia,		UpperS,			UpperM, 		cnUpperDiaX);
	pos_ruleSD(cTakesUpperCenterDia,cUpperCenterDiaX,UpperCenterS,	UpperCenterM,	cnUpperCenterDiaX);
	pos_ruleSD(cTakesLowerDia,		cLowerDia,		LowerS,			LowerM, 		cnLowerDiaX);
	pos_ruleSD(cTakesLowerCenterDia,cLowerCenterDia,LowerCenterS,	LowerCenterM,	cnLowerCenterDiaX);
	pos_ruleSD(cTakesLowerAltDia,	cLowerAltDia,	LowerAltS,		LowerAltM,		cnLowerAltDiaX);
	pos_ruleSD(cTakesHalantDia,		cHalantDia,		HalantS,		HalantM,		cnHalantDiaX);
	// Don't allow the nukta to be selected independently:
//	pos_ruleSD(cTakesNuktaDia,		cNuktaDia,		NuktaS,			NuktaM,			cnNuktaDiaX);
	pos_ruleSD(cTakesRephDia,		cRephDia,		UpperS,			UpperM,			cnRephDiaX);
	pos_ruleSD(cTakesRaDia,			cRaDia,			RaS,			RaM,			cnRaDiaX);
//else
//	pos_rule(cTakesAn,				cAn,			AnS,			AnM,			cnCaX);
//	pos_rule(cTakesCandra,				cCandra,			CaS,			CaM,			cnCaX);
//	pos_rule(cTakesUpperDia,		cUpperDia,		UpperS,			UpperM, 		cnUpperDiaX);
//	pos_rule(cTakesUpperCenterDia,	cUpperCenterDiaX,UpperCenterS,	UpperCenterM,	cnUpperCenterDiaX);
//	pos_rule(cTakesLowerDia,		cLowerDia,		LowerS,			LowerM, 		cnLowerDiaX);
//	pos_rule(cTakesLowerCenterDia,	cLowerCenterDia,LowerCenterS,	LowerCenterM,	cnLowerCenterDiaX);
//	pos_rule(cTakesLowerAltDia,		cLowerAltDia,	LowerAltS,		LowerAltM,		cnLowerAltDiaX);
//	pos_rule(cTakesHalantDia,		cHalantDia,		HalantS,		HalantM,		cnHalantDiaX);
	// Don't allow the nukta to be selected independently:
	pos_rule(cTakesNuktaDia,		cNuktaDia,		NuktaS,			NuktaM,			cnNuktaDiaX);	
//	pos_rule(cTakesRephDia,			cRephDia,		UpperS,			UpperM,			cnRephDiaX);
//endif;

endpass;


// Classes for collision fixing, etc.
table(glyph)

	cls_vowelWWideRt = (cls_fullKa);	// cls_fullTtha, cls_fullRa
	
	cls_nukta = (g_nukta, g0945_093c_bottom);
	
endtable;

pass(PASS_ADJUST) // 10

	//	Adjust positions to avoid collisions, etc.

	//	Modifiers above
	
	(DevMaatraCandraE, DevMaatraCandraENukta)  DevCandrabindu {shift {x = 700m}};
	
	(DevMaatraCandraE, g0945_093c_top, g0949_top, g0949_093c_top)  DevAnusvara {shift {x = 600m; y = -300m}}  /  cls_vowelWWideRt  _  cls_nukta?  _ ;
	(DevMaatraCandraE, g0945_093c_top, g0949_top, g0949_093c_top) {shift.x = -300m}  DevAnusvara {shift {x = 600m; y = -300m}}  /  _  cls_nukta?  _ ;
	
	(DevMaatraShortE, DevMaatraShortENukta)  cls_candrab_alt {shift.x = 70m};
	(DevMaatraAi, DevMaatraAiNukta)  cls_candrab_alt {shift.x = 80m};
	(DevMaatraShortO, DevMaatraShortONukta)  cls_candrab_alt {shift.x = 50m};
	(DevMaatraO, DevMaatraONukta)  cls_candrab_alt {shift.x = 40m};
	(DevMaatraAU, DevMaatraAUNukta)  cls_candrab_alt {shift.x = 70m};
	
	DevMaatraOOE                cls_candrab_alt {shift.y = 250m}  /  _  g_nukta?  _;
	DevMaatraAW                cls_candrab_alt {shift {x = 230m; y = 200m}}  /  _  g_nukta?  _;
	

	//	Signs above

	DevCandrabindu                DevUdatta {shift {x =-160m; y = 560m}};
	DevCandrabindu                DevGrave {shift {x =  80m; y = 500m}};
	DevCandrabindu                DevAcute {shift {          y = 500m}};
	DevAnusvara                DevUdatta {shift {x =  90m; y = 320m}};
	DevAnusvara                DevGrave {shift {x = 300m; y = 260m}};
	DevAnusvara                DevAcute {shift {x = 200m; y = 260m}};
	(DevMaatraCandraE, DevMaatraCandraENukta)  DevUdatta {shift {x =-130m; y = 250m}};
	(DevMaatraCandraE, DevMaatraCandraENukta)  DevGrave {shift {          y = 250m}};
	(DevMaatraCandraE, DevMaatraCandraENukta)  DevAcute {shift {x = 200m; y = 250m}};
	(DevMaatraShortE, DevMaatraShortENukta)  DevUdatta {shift {          y = 250m}};
	(DevMaatraShortE, DevMaatraShortENukta)  DevGrave {shift {          y = 250m}};
	(DevMaatraShortE, DevMaatraShortENukta)  DevAcute {shift {          y = 250m}};
	(DevMaatraAi, DevMaatraAiNukta)  DevUdatta {shift {          y = 160m}};
	(DevMaatraAi, DevMaatraAiNukta)  DevGrave {shift {          y = 250m}};
	(DevMaatraAi, DevMaatraAiNukta)  DevAcute {shift {x = 230m; y = 280m}};
	DevRaReph      DevGrave {shift {x =-250m; y = 350m}};
	DevRaReph      DevAcute {shift {x = 100m; y = 500m}};
	
	(DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt)  DevUdatta {shift {y = 160m}};
	(DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt)  DevGrave {shift {y = 160m}};
	(DevMaatraE, DevMaatraENukta, DevMaatraENukta_alt)  DevAcute {shift {y = 250m}};
	
	DevMaatraOE  (DevInvCandrabindu DevCandrabindu) {shift.y = 250m};

	//	Signs below
	
	(DevMaatraU DevMaatraUU) (DevMaatraUE DevMaatraUUE) {shift.y = -630m}; // not needed because these don't occur together, but oh well
	
	DevMaatraU  DevAnudatta {shift.y =-560m};
	DevMaatraUU  DevAnudatta {shift.y =-600m};	// removed shift.x = 500m
	DevMaatraR  cls_lowerMark {shift {x = 200m; y =-560m}};
	DevMaatraRR  cls_lowerMark {shift {          y =-650m}};
	DevMaatraL  cls_lowerMark {shift {x = 100m; y =-620m}};
	DevMaatraLL  cls_lowerMark {shift {x = 100m; y =-650m}};
	
	//	Reph and vowel sign collisions
	//	Note that the reph has been reordered away from its original position.
	
	cls_0949_bottom  cls_0949_top {shift.x = -350m}  DevRaReph {shift.x = 300m};
	
//	DevRaReph {shift.x = 300m}  g0945_093c_top {shift.x = -375m}  g0945_093c_bottom {shift.x = 375m}; 
	DevRaReph {shift.x = 300m}  (cls_0945 DevMaatraCandraLongE) {shift.x = -375m};
	DevRaReph {shift.x = 100m}  cls_0946;
	DevRaReph {shift.x =  90m}  cls_0947;
	DevRaReph {shift.x = 120m}  cls_0948;
	
	DevRaReph_alt {shift.x = 200m}  /  DevMaatraAW  g_nukta? _ ;
	
	DevRaReph {shift.x = 350m}  /  DevMaatraOOE  _;
	
	// swoop of the matra-I (ikar) hits candrabindu with narrow consonant in between
	cls_matraI  cls_shiftCandrabAfterI  DevCandrabindu {shift.x = 250m; shift.y = 75m};
	
	//	This vowel does not have the reph combined form like 094a-094c do (cls_vowelRtHigh).
	//	So shift as best we can.
	DevMaatraAW  DevRaReph_alt {shift.x = 140m}  /  _  g_nukta?  _;
	
	//	Tall vowels with candrabindu/anusvara
	
	cls_candrab_alt {shift{x = -100m; y = 250m}}	/ (DevVowelCandraA DevVowelCandraANukta )  g_nukta?  _;
	cls_candrab_alt {shift.y = 250m}				/ (DevVowelOE DevVowelOOE)  g_nukta?  _;
	DevAnusvara {shift.y = 250m}							/ (DevVowelCandraA DevVowelCandraANukta DevVowelOE DevVowelOOE)  g_nukta? _;
	(cls_candrab_alt DevAnusvara) {shift{x = 300m; y = 50m}}	/  DevVowelAW  g_nukta? ^ _;
	
	//	Tall vowel signs with inverted candrabindu--there are no combined forms for these,
	//	so just shift as best we can.
	
	cls_candrab_alt {shift.x = 120m}	/  cls_matraII_width30  _;
	cls_candrab_alt {shift.x = 190m}	/  cls_matraII_width20  _;
	cls_candrab_alt {shift.x = 220m}	/  cls_matraII_all  _;
	
	// Reph, and tall vowels signs with attached reph:
	DevInvCandrabindu_alt {shift {x = 350m; y = -50m}}
		/ (DevRaReph  DevMaatraIIReph  DevMaatraII_width20Reph  DevMaatraShortOReph  DevMaatraOReph  DevMaatraAUReph) _;
	DevInvCandrabindu_alt {shift {x = 350m; y = -50m}}
		/  consWidth30_matraII  DevRaReph  (cls_0946 cls_0947 cls_0948)  _;
	DevInvCandrabindu_alt {shift {x = 350m; y = -50m}}
		/  DevRaReph  (cls_0946 cls_0947 cls_0948)  _;
	
	// RA + nukta with U/UU below.
	// Note: this rule only applies when the RU/RUU alternate is turned on;
	// otherwise a special ligature is used.
	DevRaNukta  (DevMaatraU DevMaatraUNukta DevMaatraUU DevMaatraUUNukta) {shift.y = -80m};
		
endpass;


endtable; // positioning


/******************
// OpenType classes not used by Graphite
table(glyph)
	cls_fullCons = (	// cDevFullCForms
		DevKa	DevKha	DevGa	DevGha	DevNga	DevCa	DevCha	DevJa	DevJha	DevNya	DevTta
		DevTtha	DevDda	DevDdha	DevNna	DevTa	DevTha	DevDa	DevDha	DevNa	DevPa	DevPha
		DevBa	DevBha	DevMa	DevYa	DevRa	DevLa	DevLla	DevWa	DevSha	DevSsa	DevSa
		DevHa	DevGga	DevJja	DevDdda	DevBba	DevGlottalStop);
	cls_consNoHaNoHalf = (	// cDevFullCForms_noHa_noHalf
		DevKa	DevKha	DevGa	DevGha	DevCa	DevJa	DevJha	DevNya	DevNna	DevTa	DevTha 
		DevDha	DevNa	DevPa	DevPha	DevBa	DevBha	DevMa	DevYa	DevRa	DevLa	DevLla
		DevWa	DevSha	DevSsa	DevSa	DevGga	DevJja	DevBba	DevGlottalStop);
	cls_fullConsNukta = (	// cDevFullCNukta
		DevKaNukta		DevKhaNukta		DevGaNukta		DevGhaNukta	DevNgaNukta	DevCaNukta	DevChaNukta	DevJaNukta 
		DevJhaNukta	DevNyaNukta DevTtaNukta	DevTthaNukta	DevDdaNukta		DevDdhaNukta		DevNnaNukta DevTaNukta
		DevThaNukta	DevDaNukta	DevDhaNukta	DevNaNukta		DevPaNukta	DevPhaNukta		DevBaNukta	DevBhaNukta
		DevMaNukta	DevYaNukta		DevRaNukta		DevLaNukta	DevLlaNukta		DevWaNukta	DevShaNukta	DevSsaNukta
		DevSaNukta	DevHaNukta	DevGgaNukta	DevJjaNukta	DevDddaNukta	DevBbaNukta);
	cls_fullConsNuktaRakar = (	// cDevFullCNuktaRakar
		DevKaNuktaR		DevKhaNuktaR		DevGaNuktaR		DevGhaNuktaR
		DevNgaNuktaR	DevCaNuktaR	DevChaNuktaR	DevJaNuktaR
		DevJhaNuktaR	DevNyaNuktaR	DevTtaNuktaR	DevTthaNuktaR
		DevDdaNuktaR		DevDdhaNuktaR		DevNnaNuktaR	DevTaNuktaR
		DevThaNuktaR	DevDaNuktaR	DevDhaNuktaR	DevNaNuktaR
		DevPaNuktaR	DevPhaNuktaR		DevBaNuktaR	DevBhaNuktaR
		DevMaNuktaR	DevYaNuktaR		DevLaNuktaR	DevLlaNuktaR
		DevWaNuktaR	DevShaNuktaR	DevSsaNuktaR	DevSaNuktaR
		DevHaNuktaR	DevGgaNuktaR	DevJjaNuktaR	DevDddaNuktaR
		DevBbaNuktaR);
	cls_fullConsNuktaNoHaNoHalf = (	// cDevFullCNukta_noHa_noHalf
		DevKaNukta		DevKhaNukta		DevGaNukta		DevGhaNukta	DevCaNukta	DevJaNukta		DevJhaNukta	DevNyaNukta 
		DevNnaNukta	DevTaNukta	DevThaNukta	DevDhaNukta	DevNaNukta		DevPaNukta	DevPhaNukta		DevBaNukta 
		DevBhaNukta	DevMaNukta	DevYaNukta		DevRaNukta		DevLaNukta	DevLlaNukta		DevWaNukta	DevShaNukta 
		DevSsaNukta	DevSaNukta	DevGgaNukta	DevJjaNukta	DevBbaNukta);
	cls_fullConsRakar = (	// cDevFullCRakar
		DevKaR	DevKhaR	DevGaR	DevGhaR	DevNgaR
		DevCaR	DevChaR	DevJaR	DevJhaR	DevNyaR
		DevTtaR	DevTthaR	DevDdaR	DevDdhaR	DevNnaR
		DevTaR	DevThaR	DevDaR	DevDhaR	DevNaR
		DevPaR	DevPhaR	DevBaR	DevBhaR	DevMaR
		DevYaR	DevLaR	DevLlaR	DevWaR	DevShaR 
		DevSsaR	DevSaR	DevHaR	DevGgaR	DevJjaR
		DevDddaR	DevBbaR);
	cls_fullVowels = (	// cDevFullVowels
		DevVowelShortA	DevVowelA	DevVowelAA	DevVowelI	DevVowelII	DevVowelU	DevVowelUU	DevVowelR	DevVowelRR DevVowelL	DevVowelLL	DevVowelCandraE
		DevVowelShortE	DevVowelE	DevVowelAI	DevVowelCandraO	DevVowelShortO	DevVowelO	DevVowelAU	DevVowelCandraA);
	cls_fullVowelsNukta = (	// cDevFullVowelsNukta
		DevVowelShortANukta	DevVowelANukta	DevVowelAANukta	DevVowelINukta	DevVowelIINukta	DevVowelUNukta	DevVowelUUNukta	DevVowelRNukta
		DevVowelRRNukta DevVowelLNukta	DevVowelLLNukta	DevVowelCandraENukta	DevVowelShortENukta	DevVowelENukta	DevVowelAINukta	DevVowelCandraONukta
		DevVowelShortONukta	DevVowelONukta	DevVowelAUNukta	DevVowelCandraANukta);
	// cDevFullVowelsNukta_noE-Ai...
endtable;
********************/
