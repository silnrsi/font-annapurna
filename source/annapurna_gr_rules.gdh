/*******************************************************************

    File: annapurna_main.gdh

    Rules for Devanagari script, included in annapurna-R/B.gdl

    Author: Sharon Correll

*******************************************************************/

/*
    This file is part of the Annapurna font family (https://software.sil.org/annapurna/)
    and is Copyright (c) 2007-2023 SIL International (https://www.sil.org/), with
    Reserved Font Names "Annapurna" and "SIL".

    This Font Software is licensed under the SIL Open Font License, Version 1.1.
    You should have received a copy of the license along with this Font Software.
    If this is not the case, go to (https://scripts.sil.org/OFL) for all the details
    including a FAQ.
*/

#include "stddef.gdh"

Bidi = false;

// Glyph forms
#define form user1
#define F_NOMINAL    0
#define F_LIVE        1    // live consonant, including RA
#define F_HALCONS    2    // explicit halant form, followed by another consonant
#define F_HALANT    3    // explicit halant form, at the end of a word
#define F_CONJ1        4    // dead - first half of conjunct (never on RA)
// TODO: figure out if we need to distinguish between F_CONJ1 and F_HALF
#define F_HALF        5    // dead - half-form, if any (including RA - both reph & rakar)
#define F_NOHALANT    6    // functions like half-form in that any explicit halant is removed; following consonant "connects" backwards
//#define F_VSIGN    7    // vowel sign, vowels only

// Ra forms
#define raform user2
#define R_NOMINAL    0
#define R_REPH        1
#define R_REPH_P    2    // final position is pending
#define R_RAKAR        3
#define R_EYELASH    4

#define attached user3  // has attachment been performed on this glyph?

// We can double up the usage on user4, since they are different contexts:
#define mergedHalant user4  // for handling the merging of a consonant and halant
#define useNarrow user4     // use a narrower version of the matra-I to avoid collisions

// Substitution passes
#define PASS_RRA        1
#define PASS_MARKSYL    2
#define PASS_RA            3
#define PASS_VORDER        4
#define PASS_NUKTA        5
#define PASS_AHKAND        5
#define PASS_REPHRAKAR    5
#define PASS_HALFFORMS    6
#define PASS_RAKARFULL    6
#define PASS_MARKMATRAI 6
#define PASS_FULLCONJ    7
#define PASS_MATRAWIDTH    7
#define    PASS_LIGBELOW    8
#define PASS_HALANT        8
#define PASS_FIXUPPERS    8
#define PASS_FRACTIONS    8
#define PASS_FEATURES    8
#define PASS_LATINDIAC    8 // currently not used
#define PASS_LATINPUNCT    8 
#define PASS_SUB4POS    8 // substitutions that help positioning
#define PASS_SUB4POSMORE 9
//Positioning passes
#define PASS_ATTACH        1
#define PASS_ADJUST        2


/*******************************************************************

    MORE GLYPH DEFINITIONS

*******************************************************************/

table(glyph) {AttributeOverride = false}

    //    Underlying (nominal) consonant forms

    cls_consNom = (
        g__dev_ka    g__dev_kha    g__dev_ga    g__dev_gha    g__dev_nga    g__dev_ca    g__dev_cha    g__dev_ja    g__dev_jha    g__dev_nya
        g__dev_tta    g__dev_ttha    g__dev_dda    g__dev_ddha    g__dev_nna    g__dev_ta    g__dev_tha    g__dev_da    g__dev_dha    g__dev_na
        g__dev_na_nukta    g__dev_pa    g__dev_pha    g__dev_ba    g__dev_bha    g__dev_ma    g__dev_ya    g__dev_ra    g__dev_ra_nukta    g__dev_la
        g__dev_lla    g__dev_lla_nukta    g__dev_wa    g__dev_sha    g__dev_ssa    g__dev_sa    g__dev_ha    g__dev_ka_nukta    g__dev_kha_nukta    g__dev_ga_nukta
        g__dev_ja_nukta    g__dev_dda_nukta    g__dev_ddha_nukta    g__dev_pha_nukta    g__dev_ya_nukta    g__dev_dda_marawari

        // In the case of a Type Tuned font where the alternate is in the cmap:
        g__dev_jha_alt  g__dev_jha_alt2  g__dev_nna_archaic
    );

    g_ra = g__dev_ra;

    g_rra = g__dev_ra_nukta;
    g_rraEyelash = g__dev_half_ra;

    g_zwj = unicode(0x200D);
    g_zwnj = unicode(0x200C);

    //    Consonant groups - for handling matra widths

    cls_fullKa        = (g__dev_ka    g__dev_ka_nukta            g__dev_ka_r        g__dev_ka_nukta_r        g__dev_ka_r_alt);     //    g0915_093c_094d_0930_alt
    cls_fullKha        = (g__dev_kha    g__dev_kha_nukta            g__dev_kha_r        g__dev_kha_nukta_r);
    cls_fullGa        = (g__dev_ga    g__dev_ga_nukta            g__dev_ga_r        g__dev_ga_nukta_r);
    cls_fullGha        = (g__dev_gha    g__dev_gha_nukta        g__dev_gha_r        g__dev_gha_nukta_r);
    cls_fullNga        = (g__dev_nga    g__dev_nga_nukta        g__dev_nga_r        g__dev_nga_nukta_r);
    cls_fullCa        = (g__dev_ca    g__dev_ca_nukta        g__dev_ca_r        g__dev_ca_nukta_r);
    cls_fullCha        = (g__dev_cha    g__dev_cha_nukta        g__dev_cha_r        g__dev_cha_nukta_r);
    cls_fullJa        = (g__dev_ja    g__dev_ja_nukta            g__dev_jha_r        g__dev_ja_nukta_r);
    cls_fullJha        = (g__dev_jha    g__dev_jha_nukta        g__dev_jha_r        g__dev_jha_nukta_r);
    cls_fullJha_alt
                = (g__dev_jha_alt    g__dev_jha_nukta_alt    g__dev_jha_r_alt    g__dev_jha_nukta_r_alt);
    cls_fullJha_alt2
                = (g__dev_jha_alt2 g__dev_jha_nukta_alt2    g__dev_jha_r_alt2    g__dev_jha_nukta_r_alt2);
    cls_fullNya        = (g__dev_nya    g__dev_nya_nukta        g__dev_nya_r        g__dev_nya_nukta_r);
    cls_fullTta        = (g__dev_tta    g__dev_tta_nukta        g__dev_tta_r        g__dev_tta_nukta_r);
    cls_fullTtha    = (g__dev_ttha    g__dev_ttha_nukta        g__dev_ttha_r        g__dev_ttha_nukta_r);
    cls_fullDda        = (g__dev_dda    g__dev_dda_nukta            g__dev_dda_r        g__dev_dda_nukta_r);
    cls_fullDdha    = (g__dev_ddha    g__dev_ddha_nukta            g__dev_ddha_r        g__dev_ddha_nukta_r);
    cls_fullNna        = (g__dev_nna    g__dev_nna_nukta        g__dev_nna_r        g__dev_nna_nukta_r    g__dev_nna_archaic);
    cls_fullTa        = (g__dev_ta    g__dev_ta_nukta        g__dev_ta_r        g__dev_ta_nukta_r    g__dev_ta_r_alt    g__dev_ta_nukta_r_alt);
    cls_fullTha        = (g__dev_tha    g__dev_tha_nukta        g__dev_tha_r        g__dev_tha_nukta_r);
    cls_fullDa        = (g__dev_da    g__dev_da_nukta        g__dev_da_r        g__dev_da_nukta_r);
    cls_fullDha        = (g__dev_dha    g__dev_dha_nukta        g__dev_dha_r        g__dev_dha_nukta_r);
    cls_fullNa        = (g__dev_na    g__dev_na_nukta            g__dev_na_r        g__dev_na_nukta_r);
    cls_fullPa        = (g__dev_pa    g__dev_pa_nukta        g__dev_pa_r        g__dev_pa_nukta_r);
    cls_fullPha        = (g__dev_pha    g__dev_pha_nukta            g__dev_pha_r        g__dev_pha_nukta_r);
    cls_fullBa        = (g__dev_ba    g__dev_ba_nukta        g__dev_ba_r        g__dev_ba_nukta_r);
    cls_fullBha        = (g__dev_bha    g__dev_bha_nukta        g__dev_bha_r        g__dev_bha_nukta_r);
    cls_fullMa        = (g__dev_ma    g__dev_ma_nukta        g__dev_ma_r        g__dev_ma_nukta_r);
    cls_fullYa        = (g__dev_ya    g__dev_ya_nukta            g__dev_ya_r        g__dev_ya_nukta_r);
    cls_fullYa_alt    = (g__dev_ya_alt g__dev_ya_nukta_alt        g__dev_ya_r_alt    g__dev_ya_nukta_r_alt);
    cls_fullRa        = (g__dev_ra    g__dev_ra_nukta);
    cls_fullLa        = (g__dev_la    g__dev_la_nukta        g__dev_la_r        g__dev_la_nukta_r);
    cls_fullLla        = (g__dev_lla    g__dev_lla_nukta            g__dev_lla_r        g__dev_lla_nukta_r);
    cls_fullWa        = (g__dev_wa    g__dev_wa_nukta        g__dev_wa_r        g__dev_wa_nukta_r);
    cls_fullSha        = (g__dev_sha    g__dev_sha_nukta        g__dev_sha_r        g__dev_sha_nukta_r    g__dev_sha_r_alt    g__dev_sha_nukta_r_alt);
    cls_fullSsa        = (g__dev_ssa    g__dev_ssa_nukta        g__dev_ssa_r        g__dev_ssa_nukta_r);
    cls_fullSa        = (g__dev_sa    g__dev_sa_nukta        g__dev_sa_r        g__dev_sa_nukta_r);
    cls_fullHa        = (g__dev_ha    g__dev_ha_nukta        g__dev_ha_r        g__dev_ha_nukta_r);
    cls_fullGga        = (g__dev_gga    g__dev_gga_nukta        g__dev_gga_r        g__dev_gga_nukta_r);
    cls_fullJja        = (g__dev_jja    g__dev_jja_nukta        g__dev_jja_r        g__dev_jja_nukta_r);
    cls_fullDdda    = (g__dev_ddda    g__dev_ddda_nukta        g__dev_ddda_r        g__dev_ddda_nukta_r);
    cls_fullBba        = (g__dev_bba    g__dev_bba_nukta        g__dev_bba_r        g__dev_bba_nukta_r);

    //    Vowels

    cls_vowelLeft = (g__dev_maatra_i, g__dev_prishthamatra_e);
    cls_vowelRight = (g__dev_maatra_o_o_e, g__dev_maatra_a_a, g__dev_maatra_i_i, g__dev_maatra_candra_o, g__dev_maatra_short_o, g__dev_maatra_o, g__dev_maatra_a_u, g__dev_maatra_a_w);    // these can have RAs attached


    //    Nukta and nukta forms

    g_nukta = g__dev_nukta;
    cls_woNukta = (
        g__dev_ka        g__dev_kha        g__dev_ga        g__dev_gha        g__dev_nga        g__dev_ca        g__dev_cha        g__dev_ja        g__dev_jha
        g__dev_nya        g__dev_tta        g__dev_ttha        g__dev_dda        g__dev_ddha        g__dev_nna        g__dev_ta        g__dev_tha        g__dev_da
        g__dev_dha        g__dev_na        g__dev_pa        g__dev_pha        g__dev_ba        g__dev_bha        g__dev_ma        g__dev_ya        g__dev_ra
        g__dev_la        g__dev_lla        g__dev_wa        g__dev_sha        g__dev_ssa        g__dev_sa        g__dev_ha        g__dev_vowel_short_a        g__dev_vowel_a
        g__dev_vowel_a_a        g__dev_vowel_i        g__dev_vowel_i_i        g__dev_vowel_u        g__dev_vowel_u_u        g__dev_vowel_r        g__dev_vowel_l        g__dev_vowel_r_r        g__dev_vowel_l_l
        g__dev_vowel_candra_e        g__dev_vowel_short_e        g__dev_vowel_e        g__dev_vowel_a_i        g__dev_vowel_candra_o        g__dev_vowel_short_o        g__dev_vowel_o        g__dev_vowel_a_u        g__dev_vowel_candra_a
        g__dev_maatra_a_a        g__dev_maatra_i        g__dev_maatra_i_i        g__dev_maatra_u        g__dev_maatra_u_u        g__dev_maatra_r        g__dev_maatra_r_r        g__dev_maatra_l        g__dev_maatra_l_l
        g__dev_maatra_candra_e        g__dev_maatra_short_e        g__dev_maatra_e        g__dev_maatra_ai        g__dev_maatra_candra_o        g__dev_maatra_short_o        g__dev_maatra_o        g__dev_maatra_a_u        g__dev_gga
        g__dev_jja        g__dev_ddda        g__dev_bba);

    cls_wNukta  = (
        g__dev_ka_nukta        g__dev_kha_nukta        g__dev_ga_nukta        g__dev_gha_nukta    g__dev_nga_nukta    g__dev_ca_nukta    g__dev_cha_nukta    g__dev_ja_nukta        g__dev_jha_nukta
        g__dev_nya_nukta    g__dev_tta_nukta    g__dev_ttha_nukta    g__dev_dda_nukta        g__dev_ddha_nukta        g__dev_nna_nukta    g__dev_ta_nukta    g__dev_tha_nukta    g__dev_da_nukta
        g__dev_dha_nukta    g__dev_na_nukta        g__dev_pa_nukta    g__dev_pha_nukta        g__dev_ba_nukta    g__dev_bha_nukta    g__dev_ma_nukta    g__dev_ya_nukta        g__dev_ra_nukta
        g__dev_la_nukta    g__dev_lla_nukta        g__dev_wa_nukta    g__dev_sha_nukta    g__dev_ssa_nukta    g__dev_sa_nukta    g__dev_ha_nukta    g__dev_vowel_short_a_nukta    g__dev_vowel_a_nukta
        g__dev_vowel_a_a_nukta    g__dev_vowel_i_nukta    g__dev_vowel_i_i_nukta    g__dev_vowel_u_nukta    g__dev_vowel_u_u_nukta    g__dev_vowel_r_nukta    g__dev_vowel_l_nukta    g__dev_vowel_r_r_nukta    g__dev_vowel_l_l_nukta
        g__dev_vowel_candra_e_nukta    g__dev_vowel_short_e_nukta    g__dev_vowel_e_nukta    g__dev_vowel_a_i_nukta    g__dev_vowel_candra_o_nukta    g__dev_vowel_short_o_nukta    g__dev_vowel_o_nukta    g__dev_vowel_a_u_nukta    g__dev_vowel_candra_a_nukta
        g__dev_maatra_a_a_nukta    g__dev_maatra_i_nukta    g__dev_maatra_i_i_nukta    g__dev_maatra_u_nukta    g__dev_maatra_u_u_nukta    g__dev_maatra_r_nukta    g__dev_maatra_r_r_nukta    g__dev_maatra_l_nukta    g__dev_maatra_l_l_nukta
        g__dev_maatra_candra_e_nukta    g__dev_maatra_short_e_nukta    g__dev_maatra_e_nukta    g__dev_maatra_ai_nukta    g__dev_maatra_candra_o_nukta    g__dev_maatra_short_o_nukta    g__dev_maatra_o_nukta    g__dev_maatra_a_u_nukta    g__dev_gga_nukta
        g__dev_jja_nukta    g__dev_ddda_nukta    g__dev_bba_nukta);


    //    Akhand

    g_akhand = g__dev_halant;


    //    Half forms

    cls_nHalf = (
        g__dev_ka                g__dev_ka_nukta            g__dev_kha                g__dev_kha_nukta            g__dev_ga                g__dev_ga_nukta            g__dev_gha
        g__dev_gha_nukta            g__dev_nga            g__dev_nga_nukta            g__dev_ca            g__dev_ca_nukta            g__dev_cha            g__dev_cha_nukta
        g__dev_ja                g__dev_ja_nukta            g__dev_jha                g__dev_jha_nukta        g__dev_jha_alt            g__dev_jha_nukta_alt    g__dev_jha_alt2
        g__dev_jha_nukta_alt2        g__dev_nya            g__dev_nya_nukta            g__dev_tta            g__dev_tta_nukta
        g__dev_ttha                g__dev_ttha_nukta        g__dev_dda                g__dev_dda_nukta            g__dev_ddha                g__dev_ddha_nukta            g__dev_nna
        g__dev_nna_nukta            g__dev_ta            g__dev_ta_nukta            g__dev_ta_r         g__dev_ta_nukta_r            g__dev_tha
        g__dev_tha_nukta            g__dev_da            g__dev_da_nukta            g__dev_dha            g__dev_dha_nukta            g__dev_na            g__dev_na_nukta
        g__dev_pa                g__dev_pa_nukta        g__dev_pha                g__dev_pha_nukta            g__dev_ba                g__dev_ba_nukta
        g__dev_bha                g__dev_bha_nukta        g__dev_ma                g__dev_ma_nukta        g__dev_ya                g__dev_ya_nukta
        g__dev_ya_alt            g__dev_ya_nukta_alt        g__dev_ra                g__dev_ra_nukta
        g__dev_la                g__dev_la_nukta        g__dev_lla                g__dev_lla_nukta            g__dev_wa                g__dev_wa_nukta        g__dev_sha
        g__dev_ssa                g__dev_ssa_nukta        g__dev_sa                g__dev_sa_nukta        g__dev_ha                g__dev_ha_nukta        g__dev_gga
        g__dev_gga_nukta            g__dev_jja            g__dev_jja_nukta            g__dev_ddda            g__dev_ddda_nukta            g__dev_bba
        g__dev_bba_nukta            g__dev_nna_archaic    g__dev_k_ssa        g__dev_k_ssa_archaic                g__dev_j_nya    g__dev_t_ta
        g__dev_cha_alt);

    cls_half = (
        g__dev_half_ka            g__dev_half_ka_nukta            g__dev_half_kha            g__dev_half_kha_nukta            g__dev_half_ga            g__dev_half_ga_nukta                g__dev_half_gha
        g__dev_half_gha_nukta    g__dev_half_nga            g__dev_half_nga_nukta    g__dev_half_ca            g__dev_half_ca_nukta    g__dev_half_cha                g__dev_half_cha_nukta
        g__dev_half_ja            g__dev_half_ja_nukta            g__dev_half_jha            g__dev_half_jha_nukta    g__dev_half_jha_alt        g__dev_half_jha_nukta_alt    g__dev_half_jha_alt2
        g__dev_half_jha_nukta_alt2                        g__dev_half_nya            g__dev_half_nya_nukta    g__dev_half_tta            g__dev_half_tta_nukta
        g__dev_half_ttha            g__dev_half_ttha_nukta    g__dev_half_dda            g__dev_half_dda_nukta            g__dev_half_ddha            g__dev_half_ddha_nukta                g__dev_half_nna
        g__dev_half_nna_nukta    g__dev_half_ta            g__dev_half_ta_nukta    g__dev_half_ta_r        g__dev_half_ta_nukta_r                g__dev_half_tha
        g__dev_half_tha_nukta    g__dev_half_da            g__dev_half_da_nukta    g__dev_half_dha            g__dev_half_dha_nukta    g__dev_half_na                g__dev_half_na_nukta
        g__dev_half_pa            g__dev_half_pa_nukta    g__dev_half_pha            g__dev_half_pha_nukta            g__dev_half_ba            g__dev_half_ba_nukta
        g__dev_half_bha            g__dev_half_bha_nukta    g__dev_half_ma            g__dev_half_ma_nukta    g__dev_half_ya            g__dev_half_ya_nukta
        g__dev_half_ya_alt        g__dev_half_ya_nukta_alt        g__dev_half_ra            g__dev_half_ra
        g__dev_half_la            g__dev_half_la_nukta    g__dev_half_lla            g__dev_half_lla_nukta            g__dev_half_wa            g__dev_half_wa_nukta        g__dev_half_sha
        g__dev_half_ssa            g__dev_half_ssa_nukta    g__dev_half_sa            g__dev_half_sa_nukta    g__dev_half_ha            g__dev_half_ha_nukta        g__dev_half_gga
        g__dev_half_gga_nukta    g__dev_half_jja            g__dev_half_jja_nukta    g__dev_half_ddda            g__dev_half_ddda_nukta    g__dev_half_bba
        g__dev_half_bba_nukta    g__dev_half_nna_archaic    g__dev_half_k_ssa    g__dev_half_k_ssa_archaic            g__dev_half_j_nya    g__dev_half_t_ta
        g__dev_half_cha_alt);


    //    Full conjuncts

    //    The _cpress classes are included for documentation; they are not needed by rules.

    cls_0915_2ndhalf    = (g__dev_ka                g__dev_ta);
    cls_0915_conj         = (g__dev_k_ka        g__dev_k_ta);
//    cls_0915_conj_cpress= (g0915_094d_0915_alt    g0915_094d_0924);

    cls_0919_2ndhalf    = (g__dev_ka                g__dev_kha                g__dev_ga                g__dev_gha                g__dev_nga                g__dev_ha);
    cls_0919_conj        = (g__dev_ng_ka        g__dev_ng_kha        g__dev_ng_ga        g__dev_ng_gha        g__dev_ng_nga        g__dev_ng_ha);
//    cls_0919_conj_cpress= (g0919_094d_0915_alt    g0919_094d_0916_alt    g0919_094d_0917_alt    g0919_094d_0918_alt    g0919_094d_0919_alt    g0919_094d_0939_alt);

    cls_091a_2ndhalf    = (g__dev_ca);
    cls_091a_conj        = (g__dev_c_ca);
//    cls_091a_conj_cpress= (g091a_094d_091a_alt);

    cls_091f_2ndhalf    = (g__dev_tta                g__dev_ttha);
    cls_091f_conj        = (g__dev_tt_tta        g__dev_tt_ttha);
//    cls_091f_conj_cpress= (g091f_094d_091f_alt    g091f_094d_0920_alt);

    cls_0920_2ndhalf    = (g__dev_ttha);
    cls_0920_conj        = (g__dev_tth_ttha);
//    cls_0920_conj_cpress= (g0920_094d_0920_alt);

    cls_0921_2ndhalf    = (g__dev_dda);
    cls_0921_conj        = (g__dev_dd_dda);
//    cls_0921_conj_cpress= (g0921_094d_0921_alt);

    cls_0926_2ndhalf    = (g__dev_da            g__dev_dha            g__dev_ma            g__dev_ya            g__dev_wa);           // g095f
    cls_0926_conj        = (g__dev_d_da    g__dev_d_dha    g__dev_d_ma    g__dev_d_ya    g__dev_d_wa); // g0926_094d_095f

    cls_0936_2ndhalf    = (g__dev_ca            g__dev_wa);
    cls_0936_conj        = (g__dev_sh_ca    g__dev_sh_wa);

    cls_0937_2ndhalf    = (g__dev_tta            g__dev_ttha);
    cls_0937_conj        = (g__dev_ss_tta    g__dev_ss_ttha);

    cls_0939_2ndhalf    = (g__dev_na            g__dev_ma                g__dev_ya                g__dev_la                g__dev_wa);
    cls_0939_conj        = (g__dev_h_na    g__dev_h_ma    g__dev_h_ya    g__dev_h_la    g__dev_h_wa);

    cls_1sthalf_0924    = (g__dev_half_ta        g__dev_half_pa);
    cls_1sthalf_0924_nom= (g__dev_ta                g__dev_pa);
    cls_conj_0924        = (g__dev_t_ta        g__dev_p_ta);

    cls_1sthalf_0928    = (g__dev_half_na        g__dev_half_sa    g__dev_half_ha);
    cls_1sthalf_0928_nom= (g__dev_na                g__dev_sa                g__dev_ha);
    cls_conj_0928        = (g__dev_n_na        g__dev_s_na    g__dev_h_na);

    cls_1sthalf_0932    = (g__dev_half_ma        g__dev_half_la);
    cls_1sthalf_0932_nom= (g__dev_ma                g__dev_la);
    cls_conj_0932        = (g__dev_m_la        g__dev_l_la);
//    cls_conj_0932_cpress= (g092e_094d_0932_alt    g0932_094d_0932_alt);

    // Compressed stacked conjuncts

    cStackCompress = (
        g__dev_k_ka_alt, g__dev_ng_ka_alt, g__dev_ng_kha_alt, g__dev_ng_ga_alt, g__dev_ng_gha_alt,
        g__dev_ng_nga_alt, g__dev_ng_ha_alt, g__dev_c_ca_alt, g__dev_tt_tta_alt, g__dev_tt_ttha_alt,
        g__dev_tth_ttha_alt, g__dev_dd_dda_alt, g__dev_m_la_alt, g__dev_l_la_alt);

    cno_stackCompress = (
        g__dev_k_ka, g__dev_ng_ka, g__dev_ng_kha, g__dev_ng_ga, g__dev_ng_gha,
        g__dev_ng_nga, g__dev_ng_ha, g__dev_c_ca, g__dev_tt_tta, g__dev_tt_ttha,
        g__dev_tth_ttha, g__dev_dd_dda, g__dev_m_la, g__dev_l_la);

    // Lower matras cause the compression:
    cls_matraLower = (g__dev_maatra_u  g__dev_maatra_u_u  g__dev_maatra_r  g__dev_maatra_r_r  g__dev_vowel_l_l  g__dev_maatra_l
                    g__dev_maatra_u_nukta  g__dev_maatra_u_u_nukta  g__dev_maatra_r_nukta  g__dev_maatra_r_r_nukta  g__dev_vowel_l_l_nukta  g__dev_maatra_l_nukta);


    //    Conjunct components

    cls_conjSideBySide = (g__dev_k_ta, g__dev_d_ma, g__dev_d_ya, g__dev_h_ma, g__dev_h_ya)
            { component { c1 = box(0,bb.bottom,  aw/2,bb.top);
                          c2 = box(aw/2,bb.bottom,  aw,bb.top) } };

    cStackCompress
            { component { c1 = box(0, bb.bottom + bb.height/2,  aw, bb.top + 50m);
                          c2 = box(0, bb.bottom,  aw, bb.bottom + bb.height/2) } };

    g__dev_ha_nukta_maatra_u_u
            { component { c1 = box(0, bb.bottom + bb.height/3,  aw, bb.top + 50m);
                          c2 = box(0, bb.bottom,  aw, bb.bottom + bb.height/3) } };

    //    All other conjuncts are split horizontally through the middle.
    //    (Because AttributeOverride is false, the side-by-side ones will retain their values.)
    cls_conjAll = (cls_0915_conj, cls_0919_conj, cls_091a_conj, cls_091f_conj, cls_0920_conj,
        cls_0921_conj, cls_0926_conj, cls_0936_conj, cls_0937_conj, cls_0939_conj, cls_conj_0924,
        cls_conj_0928, cls_conj_0932)
            { component { c1 = box(0, bb.bottom + bb.height/2,  aw, bb.top + 50m);
                          c2 = box(0, bb.bottom,  aw, bb.bottom + bb.height/2) } };


    // Rakar full forms

    cls_woRakar = (
        g__dev_ka        g__dev_kha        g__dev_ga        g__dev_gha        g__dev_nga        g__dev_ca        g__dev_cha        g__dev_ja        g__dev_jha
        g__dev_nya        g__dev_tta        g__dev_ttha        g__dev_dda        g__dev_ddha        g__dev_nna        g__dev_ta        g__dev_tha        g__dev_da
        g__dev_dha        g__dev_na        g__dev_pa        g__dev_pha        g__dev_ba        g__dev_bha        g__dev_ma        g__dev_ya        g__dev_la
        g__dev_lla        g__dev_wa        g__dev_sha        g__dev_ssa        g__dev_sa        g__dev_ha        g__dev_gga        g__dev_jja        g__dev_ddda
        g__dev_bba        g__dev_ka_nukta        g__dev_kha_nukta        g__dev_ga_nukta        g__dev_gha_nukta    g__dev_nga_nukta    g__dev_ca_nukta    g__dev_cha_nukta    g__dev_ja_nukta
        g__dev_jha_nukta    g__dev_nya_nukta    g__dev_tta_nukta    g__dev_ttha_nukta    g__dev_dda_nukta        g__dev_ddha_nukta        g__dev_nna_nukta    g__dev_ta_nukta    g__dev_tha_nukta
        g__dev_da_nukta    g__dev_dha_nukta    g__dev_na_nukta        g__dev_pa_nukta    g__dev_pha_nukta        g__dev_ba_nukta    g__dev_bha_nukta    g__dev_ma_nukta    g__dev_ya_nukta        g__dev_ya_nukta_alt
        g__dev_ya_alt
        g__dev_la_nukta    g__dev_lla_nukta        g__dev_wa_nukta    g__dev_sha_nukta    g__dev_ssa_nukta    g__dev_sa_nukta    g__dev_ha_nukta    g__dev_gga_nukta    g__dev_jja_nukta
        g__dev_ddda_nukta    g__dev_bba_nukta    g__dev_k_ssa        g__dev_j_nya);

    cls_wRakar = (
        g__dev_ka_r        g__dev_kha_r        g__dev_ga_r        g__dev_gha_r        g__dev_nga_r        g__dev_ca_r        g__dev_cha_r        g__dev_ja_r        g__dev_jha_r
        g__dev_nya_r        g__dev_tta_r        g__dev_ttha_r        g__dev_dda_r        g__dev_ddha_r        g__dev_nna_r        g__dev_ta_r        g__dev_tha_r        g__dev_da_r
        g__dev_dha_r        g__dev_na_r        g__dev_pa_r        g__dev_pha_r        g__dev_ba_r        g__dev_bha_r        g__dev_ma_r        g__dev_ya_r        g__dev_la_r
        g__dev_lla_r        g__dev_wa_r        g__dev_sha_r        g__dev_ssa_r        g__dev_sa_r        g__dev_ha_r        g__dev_gga_r        g__dev_jja_r        g__dev_ddda_r
        g__dev_bba_r        g__dev_ka_nukta_r        g__dev_kha_nukta_r        g__dev_ga_nukta_r        g__dev_gha_nukta_r    g__dev_nga_nukta_r    g__dev_ca_nukta_r    g__dev_cha_nukta_r    g__dev_ja_nukta_r
        g__dev_jha_nukta_r    g__dev_nya_nukta_r    g__dev_tta_nukta_r    g__dev_ttha_nukta_r    g__dev_dda_nukta_r        g__dev_ddha_nukta_r        g__dev_nna_nukta_r    g__dev_ta_nukta_r    g__dev_tha_nukta_r
        g__dev_da_nukta_r    g__dev_dha_nukta_r    g__dev_na_nukta_r        g__dev_pa_nukta_r    g__dev_pha_nukta_r        g__dev_ba_nukta_r    g__dev_bha_nukta_r    g__dev_ma_nukta_r    g__dev_ya_nukta_r    g__dev_ya_nukta_r_alt
        g__dev_ya_r_alt
        g__dev_la_nukta_r    g__dev_lla_nukta_r        g__dev_wa_nukta_r    g__dev_sha_nukta_r    g__dev_ssa_nukta_r    g__dev_sa_nukta_r    g__dev_ha_nukta_r    g__dev_gga_nukta_r    g__dev_jja_nukta_r
        g__dev_ddda_nukta_r    g__dev_bba_nukta_r    g__dev_k_ssa_r        g__dev_j_nya_r);

    cls_woRakarHalf = (
        g__dev_ka        g__dev_kha        g__dev_ga        g__dev_gha
        g__dev_ca        g__dev_ja        g__dev_jha        g__dev_jha_alt
        g__dev_nya        g__dev_nna        g__dev_ta        //g0924_alt
        g__dev_tha        g__dev_dha        g__dev_na
        g__dev_na_nukta        g__dev_pa        g__dev_pha        g__dev_ba
        g__dev_bha        g__dev_ma        g__dev_ya        g__dev_la
        g__dev_wa        g__dev_sha        //g0936_alt
        g__dev_ssa        g__dev_sa        g__dev_ka_nukta        g__dev_ga_nukta
        g__dev_ja_nukta        g__dev_pha_nukta        g__dev_ya_nukta        g__dev_gga
        g__dev_jja        g__dev_bba);

    // These form rakar conjuncts with halants:
    cls_woRakarHalant = cls_woRakar;
    cls_woRakarHalant -= cls_woRakarHalf;

    // Used for placeholders:
    gBogus = pseudo(glyphid(1));

    // Rakar half forms

    cls_wRakarHalf = (
        g__dev_half_ka_r    g__dev_half_kha_r    g__dev_half_ga_r    g__dev_half_gha_r
        g__dev_half_ca_r    g__dev_half_ja_r    g__dev_half_jha_r    g__dev_half_jha_r_alt
        g__dev_half_nya_r    g__dev_half_nna_r    g__dev_half_ta_r    //g0924_094d_0930_094d_half_alt
        g__dev_half_tha_r    g__dev_half_dha_r    g__dev_half_na_r
        g__dev_half_na_nukta_r    g__dev_half_pa_r    g__dev_half_pha_r    g__dev_half_ba_r
        g__dev_half_bha_r    g__dev_half_ma_r    g__dev_half_ya_r    g__dev_half_la_r
        g__dev_half_wa_r    g__dev_half_sha_r    //g0936_094d_0930_094d_half_alt
        g__dev_half_ssa_r    g__dev_half_sa_r    g__dev_half_ka_nukta_r    g__dev_half_ga_nukta_r
        g__dev_half_ja_nukta_r    g__dev_half_pha_nukta_r    g__dev_half_ya_nukta_r    g__dev_half_gga_r
        g__dev_half_jja_r    g__dev_half_bba_r);

    cls_wNuktaWoRakarHalf = (
        g__dev_ka        g__dev_kha        g__dev_ga        g__dev_gha
        g__dev_ca
        g__dev_ja        g__dev_jha        g__dev_jha_alt
        g__dev_nya        g__dev_nna        g__dev_ta        //g0924_alt
        g__dev_tha        g__dev_dha        g__dev_na
        g__dev_pa        g__dev_pha        g__dev_ba
        g__dev_bha        g__dev_ma        g__dev_ya        g__dev_la
        g__dev_wa        g__dev_sha        //g0936_alt
        g__dev_ssa        g__dev_sa        g__dev_gga
        g__dev_jja        g__dev_bba);

    cls_wNuktaWRakarHalf = (
        g__dev_half_ka_nukta_r        g__dev_half_kha_nukta_r        g__dev_half_ga_nukta_r        g__dev_half_gha_nukta_r
        g__dev_half_ca_nukta_r
        g__dev_half_ja_nukta_r        g__dev_half_jha_nukta_r    g__dev_half_jha_nukta_r_alt
        g__dev_half_nya_nukta_r    g__dev_half_nna_nukta_r    g__dev_half_ta_nukta_r    //g0924_093c_094d_0930_094d_half_alt
        g__dev_half_tha_nukta_r    g__dev_half_dha_nukta_r    g__dev_half_na_nukta_r
        g__dev_half_pa_nukta_r    g__dev_half_pha_nukta_r        g__dev_half_ba_nukta_r
        g__dev_half_bha_nukta_r    g__dev_half_ma_nukta_r    g__dev_half_ya_nukta_r        g__dev_half_la_nukta_r
        g__dev_half_wa_nukta_r    g__dev_half_sha_nukta_r    //g0936_093c_094d_0930_094d_half_alt
        g__dev_half_ssa_nukta_r    g__dev_half_sa_nukta_r    g__dev_half_gga_nukta_r
        g__dev_half_jja_nukta_r    g__dev_half_bba_nukta_r);

    cls_rakarHalf = (cls_wRakarHalf, cls_wNuktaWRakarHalf);

    cls_yaRakarHalf_pre = ( g__dev_nga    g__dev_cha    g__dev_tta    g__dev_ttha    g__dev_dda    g__dev_ddha    g__dev_da    g__dev_ha );
    cls_yaRakarHalf_conj = (
        g__dev_half_ng_ya_ra        g__dev_half_ch_ya_ra
        g__dev_half_tt_ya_ra        g__dev_half_tth_ya_ra
        g__dev_half_dd_ya_ra        g__dev_half_ddh_ya_ra
        g__dev_half_d_ya_ra        g__dev_half_h_ya_ra
    );
    cls_yyaRakarHalf_conj = (
        g__dev_half_ng_ya_nukta_ra        g__dev_half_ch_ya_nukta_ra
        g__dev_half_tt_ya_nukta_ra        g__dev_half_tth_ya_nukta_ra
        g__dev_half_dd_ya_nukta_ra        g__dev_half_ddh_ya_nukta_ra
        g__dev_half_d_ya_nukta_ra        g__dev_half_h_ya_nukta_ra
    );

    cls_yaRakarHalf_pre094d = (
        g__dev_half_da                            g__dev_half_ha );
    cls_yaRakarHalf_conj_subs = (
        g__dev_half_d_ya_ra        g__dev_half_h_ya_ra    );
    cls_yyaRakarHalf_conj_subs = (
        g__dev_half_d_ya_nukta_ra        g__dev_half_h_ya_nukta_ra    );


    //    The "rakar" shows up in different forms in these glyphs. The following classes holds glyphs
    //    that show the rakar looking like a real rakar at the bottom of the glyph. Since they are
    //    so distinct, we make a real ligature out of them so the rakar can be manipulated.

    //    These first few have the rakars slightly higher.
    cls_wRakarCaretHigh = (g__dev_lla_r  g__dev_lla_nukta_r)
        { comp    { cons  = box(0,-descent+600m,  aw,ascent);
                    rakar = box(0,-descent,  aw,-descent+600m) }};

    cls_wRakarCaret = (
        g__dev_nga_r        g__dev_cha_r        g__dev_jha_r_alt2    g__dev_tta_r
        g__dev_ttha_r        g__dev_dda_r        g__dev_ddha_r            g__dev_lla_r
        g__dev_lla_nukta_r        g__dev_dda_nukta_r        g__dev_ddha_nukta_r            g__dev_jja_r
        // w/ nuktas
        g__dev_nga_nukta_r    g__dev_cha_nukta_r    g__dev_jha_nukta_r_alt2    g__dev_tta_nukta_r
        g__dev_ttha_nukta_r    g__dev_jja_nukta_r
    )
        { comp    { cons  = box(0,-descent+400m,  aw,ascent);
                    rakar = box(0,-descent,  aw,-descent+400m) }};

    cls_woRakarCaret = (
        g__dev_nga        g__dev_cha        g__dev_jha_alt2        g__dev_tta
        g__dev_ttha        g__dev_dda        g__dev_ddha            g__dev_lla
        g__dev_lla_nukta        g__dev_dda_nukta        g__dev_ddha_nukta            g__dev_jja
        // w/ nuktas
        g__dev_nga_nukta        g__dev_cha_nukta        g__dev_jha_nukta_alt2    g__dev_tta_nukta
        g__dev_ttha_nukta        g__dev_jja_nukta
    )

    //    These form a true ligature, where the rakar looks like a little slash buried in the glyph.
    //    For now we're not defining components for these.
/****
    cls_wRakarSlash = (
        g0915_094d_0930    g0916_094d_0930    g0917_094d_0930    g0918_094d_0930        g091a_094d_0930    g091d_094d_0930    g091d_094d_0930_alt
        g091e_094d_0930    g0923_094d_0930    g0924_094d_0930    g0924_094d_0930_alt    g0922_094d_0930    g0926_094d_0930
        g0927_094d_0930    g0928_094d_0930    g0929_094d_0930    g092a_094d_0930        g092b_094d_0930    g092c_094d_0930    g092d_094d_0930
        g092e_094d_0930    g092f_094d_0930    g092f_094d_0930_alt    g0932_094d_0930    g0935_094d_0930    g0936_094d_0930    g0936_094d_0930_alt
        g0937_094d_0930    g0938_094d_0930    g0939_094d_0930    g0958_094d_0930        g0959_094d_0930    g095a_094d_0930    g095b_094d_0930
        g095e_094d_0930    g095f_094d_0930    g095f_094d_0930_alt    g097b_094d_0930    g097c_094d_0930    g097f_094d_0930
        // w/ nuktas
//        g0915_093c_094d_0930_alt
        g0918_093c_094d_0930    g091a_093c_094d_0930    g091d_093c_094d_0930        g091d_093c_094d_0930_alt
        g091e_093c_094d_0930        g0923_093c_094d_0930    g0924_093c_094d_0930    g0924_093c_094d_0930_alt    g0925_093c_094d_0930    g0926_093c_094d_0930
        g0927_093c_094d_0930        g092a_093c_094d_0930    g092c_093c_094d_0930    g092d_093c_094d_0930
        g092e_093c_094d_0930        g0932_093c_094d_0930    g0935_093c_094d_0930    g0936_093c_094d_0930        g0936_093c_094d_0930_alt
        g0937_093c_094d_0930        g0938_093c_094d_0930    g0939_093c_094d_0930    g097b_093c_094d_0930        g097c_093c_094d_0930    g097f_093c_094d_0930
        // conjuncts
        g0915_094d_0937_094d_0930    g091c_094d_091e_094d_0930
    );
****/

    //    Matras

    cls_matraI = (g__dev_maatra_i, g__dev_maatra_i_nukta);
    cls_matraI_width20 = (g__dev_maatra_i_width20, g__dev_maatra_i_nukta_width20);
    cls_matraI_width30 = (g__dev_maatra_i_width30, g__dev_maatra_i_nukta_width30);
    cls_matraI_width40 = (g__dev_maatra_i_width40, g__dev_maatra_i_nukta_width40);

    cls_matraII = (g__dev_maatra_i_i, g__dev_maatra_i_i_nukta);
    cls_matraII_width20 = (g__dev_maatra_i_i_width20, g__dev_maatra_i_i_nukta_width20);
    cls_matraII_width30 = (g__dev_maatra_i_i_width30, g__dev_maatra_i_i_nukta_width30);

    cls_matraII_all = (cls_matraII, cls_matraII_width20, cls_matraII_width30);

    // classes to choose correct width of matra

    consWidth20_matraI = (cls_fullKa, cls_fullGa, cls_fullGha, cls_fullNga, cls_fullTta, cls_fullTtha,
        cls_fullDda, cls_fullDdha, cls_fullTa, cls_fullDa, cls_fullNa, cls_fullPa, cls_fullPha, cls_fullBa,
        cls_fullBha, cls_fullMa, cls_fullYa, cls_fullWa, cls_fullSsa, cls_fullHa, cls_fullGga, cls_fullDdda,
        cls_fullBba, g__dev_k_ka, g__dev_k_ta, g__dev_ng_ka, g__dev_ng_kha, g__dev_j_nya,
        g__dev_j_nya_r, g__dev_t_ta, g__dev_d_da, g__dev_d_wa, g__dev_n_na,
        g__dev_p_ta, g__dev_m_la, g__dev_l_la, g__dev_ss_tta, g__dev_ss_ttha, g__dev_h_na,
        g__dev_h_la, g__dev_h_wa);

    consWidth30_matraI = (cls_fullKha, cls_fullCa, cls_fullCha, cls_fullJa, cls_fullJha, cls_fullJha_alt,
        cls_fullNya, cls_fullNna, cls_fullTha, cls_fullDha, cls_fullYa_alt, cls_fullLa, cls_fullLla,
        cls_fullSha, cls_fullSa, cls_fullJja, g__dev_nna_archaic, g__dev_k_ssa, g__dev_k_ssa_r,
        g__dev_k_ssa_archaic, g__dev_c_ca, g__dev_d_dha, g__dev_d_ma, g__dev_d_ya,
        g__dev_sh_ca, g__dev_sh_wa, g__dev_s_na);

    consWidth40_matraI = (g__dev_h_ma, g__dev_h_ya, cls_half);

    // also for conjuncts, based on width of first (top) consonant
    conjWidth00_matraI = (g__dev_ng_ga, g__dev_ng_gha, g__dev_ng_nga, g__dev_ng_ha, // nga (added 2023-04)
        cls_091f_conj, cls_0920_conj, cls_0921_conj ); // tta, ttha, dda (added 2023-04)

    conjWidth20_matraI = (cls_0915_conj, g__dev_ng_ka, g__dev_ng_kha,  // ka, nga (mod 2023-04)
        g__dev_t_ta,  cls_0926_conj,                         // ta, da
        g__dev_n_na, g__dev_p_ta, g__dev_m_la, g__dev_l_la,     // na, pa, ma, la (mod 2023-04)
        cls_0937_conj, cls_0939_conj, g__dev_h_na );         // ssa, ha

    conjWidth30_matraI = (cls_091a_conj, g__dev_l_la, cls_0936_conj, g__dev_s_na);    // ca, la, sha, sa


    // Would these consonants look better with the larger matra-I? I guess the designer thinks not...
//    consWidth20_matraI += (cls_fullKa, cls_fullTta, cls_fullTtha, cls_fullTa, cls_fullDa,
//        cls_fullDa_0928, cls_fullDa_092A, cls_fullDa_092b, cls_fullSsa, cls_fullSa, cls_fullHa);

    consWidth20_matraII = (cls_fullNga, cls_fullCha, cls_fullJha_alt2, cls_fullTtha, cls_fullLla,
        g__dev_glottal_stop, g__dev_glottal_stop_alt, g__dev_ng_ka);

    consWidth30_matraII = (cls_fullKa, cls_fullJha, cls_fullPha, g__dev_k_ka, g__dev_k_ta);


    //    Ligatures below

    cls_noLigBelow_0939 = (g__dev_maatra_r);
    cls_ligBelow_0939   = (g__dev_h_ri);

    cls_noLigBelow_0930     = (g__dev_maatra_u            g__dev_maatra_u_u);
    cls_ligBelow_0930       = (g__dev_r_u        g__dev_r_u_u);
    cls_ligBelow_0930_alt    = (g__dev_ra_maatra_u    g__dev_ra_maatra_u_u);    // currently not used

    cls_noLigBelow_0931     = (g__dev_maatra_u            g__dev_maatra_u_u);
    cls_ligBelow_0931       = (g__dev_r_nukta_u        g__dev_r_nukta_u_u);
    cls_ligBelow_0931_alt    = (g__dev_ra_nukta_maatra_u    g__dev_ra_nukta_maatra_u_u);    // currently not used

    // currently not used:
//    cls_ru_alt_ligs = (
//        g0930_0941_alt, g0931_0941_alt, g0930_0941_093c_alt, g0931_0941_093c_alt,
//        g0930_0942_alt, g0931_0942_alt, g0930_0942_093c_alt, g0931_0942_093c_alt)
//            { component { cr = box(0, bb.bottom + 550m, aw, bb.top + 50m);
//                          cu = box(0, bb.bottom,        aw, bb.bottom + 550m) } };

//    cls_noLigRephZwjU    = (g0941            g0942);
//    cls_ligRephZwjU        = (g0930_200d_0941    g0930_200d_0942)
//            { component { c1 = box(0, bb.top + 50m,      aw, bb.bottom + 550m);
//                        c2 = box(0, bb.bottom + 550m,  aw, bb.bottom) } };


    //    Halant (virama)

    g_halant = g__dev_halant;

    //    explicit halant forms: only needed if we have a feature to prefer the halant over the half-form
    //    for this character
//    cls_woHalant = (g0939                 g0939_093c);
//    cls_wHalant  = (g0939_094d_halant    g0939_093c_094d_halant);

    //    These forms "look like" they have an explicit halant in them, so they do not have the
    //    matra-I reorder around them; the I goes after these forms. We are probably being a little
    //    "smarter" than absolutely necessary.
    //    Note that the place where we do the reordering is before we've actually substituted the
    //    halant form, so we test for the nominal form.
    cls_hasExplicitHalant = (g__dev_nga, g__dev_dda_nukta, g__dev_cha, g__dev_tta, g__dev_ttha, g__dev_dda, g__dev_ddha, g__dev_da);
                // add g0939 if we add a feature to use halant form

    cls_halantExplicit = (g__dev_ha_halant, g__dev_ha_nukta_halant,
        g__dev_half_nga, g__dev_half_nga_nukta, g__dev_half_dda_nukta,
        g__dev_half_tta, g__dev_half_tta_nukta,
        g__dev_half_ttha, g__dev_half_ttha_nukta,
        g__dev_half_dda, g__dev_half_ddha, g__dev_half_ddha_nukta,
        g__dev_half_da, g__dev_half_da_nukta);

    //    Alternate YA form

    cls_ya        = (g__dev_ya        g__dev_half_ya            g__dev_ya_r
                   g__dev_ya_nukta        g__dev_half_ya_nukta            g__dev_ya_nukta_r);
    cls_ya_alt    = (g__dev_ya_alt    g__dev_half_ya_alt        g__dev_ya_r_alt
                   g__dev_ya_nukta_alt    g__dev_half_ya_nukta_alt        g__dev_ya_nukta_r_alt);

    //    This glyph causes any explicit halant in the previous consonant to be removed.
    //    It in essence forms a connection backwards to the previous consonant.
    cls_openBack = (g__dev_ya, g__dev_ya_nukta);


    //    Forms that collide with reph and anusvara:
    //    break into two pieces so that we can shift the upper Candra form.

    //    0949 (Candra-O)  =>  0945 (Candra-E) + 093E (AA)
    g0949_top = pseudo(unicode(0x0945))            // Candra-E
        {UpperM.x = g__dev_maatra_candra_e.UpperM.x; UpperM.y = g__dev_maatra_candra_e.UpperM.y};
    g0949_bottom = pseudo(unicode(0x093E))        // vowel-sign AA  - also defines HalantS
        {UpperS.x = g__dev_maatra_a_a.UpperS.x; UpperS.y = g__dev_maatra_a_a.UpperS.y};

    //    0949 (Candra-O) & nukta  =>  0945 (Candra-E)   +   AA-nukta
    g0949_093c_top = pseudo(unicode(0x0945))     // Candra-E - TODO: merge with g0949_top
        {UpperM.x = g__dev_maatra_candra_e.UpperM.x; UpperM.y = g__dev_maatra_candra_e.UpperM.y};
    g0949_093c_bottom = pseudo(glyphid(299))    // AA & nukta, g093e_093c - FIX THIS # FOR A NEW SET OF GLYPHS
                                                // glyph ID should = g0949_093c
        {UpperS.x = g__dev_maatra_a_a_nukta.UpperS.x; UpperS.y = g__dev_maatra_a_a_nukta.UpperS.y};    // also defines HalantS

    //    Candra-E  &  nukta  =>  back to its two original pieces
    g0945_093c_top = pseudo(unicode(0x0945))     // Candra-E
        {UpperM.x = g__dev_maatra_candra_e.UpperM.x; UpperM.y = g__dev_maatra_candra_e.UpperM.y};
    g0945_093c_bottom = pseudo(unicode(0x093C))    // nukta
        {NuktaM.x = g__dev_nukta.NuktaM.x; NuktaM.y = g__dev_nukta.NuktaM.y};    // also defines NuktaAltM

    cls_0949_top    = (g0949_top,    g0949_093c_top);
    cls_0949_bottom = (g0949_bottom, g0949_093c_bottom);

    cUpperDia += (g0949_top, g0949_093c_top, g0945_093c_top);
    cTakesUpperDia += (g0949_bottom, g0949_093c_bottom);
    cNuktaDia += (g0945_093c_bottom);

    cls_093b = (g__dev_maatra_o_o_e);
    cls_0940 = (g__dev_maatra_i_i, g__dev_maatra_i_i_nukta, g__dev_maatra_i_i_width20, g__dev_maatra_i_i_nukta_width20, g__dev_maatra_i_i_width30, g__dev_maatra_i_i_nukta_width30);
    cls_0949 = (g__dev_maatra_candra_o, g__dev_maatra_candra_o_nukta);
    cls_094a = (g__dev_maatra_short_o, g__dev_maatra_short_o_nukta);
    cls_094b = (g__dev_maatra_o, g__dev_maatra_o_nukta);
    cls_094c = (g__dev_maatra_a_u, g__dev_maatra_a_u_nukta);
    cls_094f = (g__dev_maatra_a_w);

    cls_0945 = (g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta, g0945_093c_top, g0949_top, g0949_093c_top);
    cls_0946 = (g__dev_maatra_short_e, g__dev_maatra_short_e_nukta);
    cls_0947 = (g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt);
    cls_0948 = (g__dev_maatra_ai, g__dev_maatra_ai_nukta);


    //    Attachments never happen across these glyphs:
    cls_noAttach = (g_space, g_zwnj);    // TODO: add punctuation?


    //    Marks can can interfere with vowels below:
    cls_lowerMark = (g__dev_anudatta, g__dev_maatra_u_e, g__dev_maatra_u_u_e);


    // Small candrabindu:
    g__dev_candrabindu_alt {CaM.x = bb.left + (bb.width/2); CaM.y = bb.bottom};
    g__dev_inv_candrabindu_alt {CaM.x = bb.left + (bb.width/2); CaM.y = bb.bottom};
    // Anusvara:
    g__dev_anusvara {CaM.x = bb.left + (bb.width/2); CaM.y = bb.bottom };

    cls_candrab = (g__dev_candrabindu, g__dev_inv_candrabindu);
    cls_candrab_alt = (g__dev_candrabindu_alt, g__dev_inv_candrabindu_alt);

    // Allow candrabindu/anusvara to attach to candra-E and other dependent vowels:
    g__dev_maatra_o_e {CaS.x = UpperM.x; CaS.y = bb.top + 100m};
    g__dev_maatra_candra_e {CaS.x = UpperM.x - 50m; CaS.y = bb.top};
    g__dev_maatra_short_e {CaS = point(0m, bb.bottom + 110m)};
    g__dev_maatra_e {CaS = point(-150m, bb.bottom + 110m)};
    g__dev_maatra_ai {CaS = point(-130m, bb.bottom + 110m)};

    g__dev_maatra_candra_e_nukta        {CaS.x = g__dev_maatra_candra_e.CaS.x; CaS.y = g__dev_maatra_candra_e.CaS.y};
    g__dev_maatra_short_e_nukta        {CaS.x = g__dev_maatra_short_e.CaS.x; CaS.y = g__dev_maatra_short_e.CaS.y};
    g__dev_maatra_e_nukta        {CaS.x = g__dev_maatra_e.CaS.x; CaS.y = g__dev_maatra_e.CaS.y};
    g__dev_maatra_e_nukta_alt    {CaS.x = g__dev_maatra_e.CaS.x; CaS.y = g__dev_maatra_e.CaS.y};
    g__dev_maatra_ai_nukta        {CaS.x = g__dev_maatra_e.CaS.x; CaS.y = g__dev_maatra_e.CaS.y};

    g0945_093c_top    {CaS.x = g__dev_maatra_candra_e.CaS.x; CaS.y = g__dev_maatra_candra_e.CaS.y};    // pseudo-glyphs that use g0945 (candra-E)
    g0949_top        {CaS.x = g__dev_maatra_candra_e.CaS.x; CaS.y = g__dev_maatra_candra_e.CaS.y};
    g0949_093c_top    {CaS.x = g__dev_maatra_candra_e.CaS.x; CaS.y = g__dev_maatra_candra_e.CaS.y};

    cls_0940 {CaS.x = UpperS.x; CaS.y = UpperS.y + 300m};
    cls_0949 {CaS.x = UpperS.x - 50m; CaS.y = bb.top};    // looks like 0945
    cls_094a {CaS.x = 525m; CaS.y = g__dev_maatra_short_e.CaS.y};        // looks like 0946 (g__dev_maatra_short_e)
    cls_094b {CaS.x = 400m; CaS.y = g__dev_maatra_e.CaS.y};        // looks like 0947 (g__dev_maatra_e)
    cls_094c {CaS.x = 450m; CaS.y = g__dev_maatra_e.CaS.y};        // looks like 0948 (g__dev_maatra_e)

    cTakesBindu = (cls_0940, cls_0945, cls_0946, cls_0947, cls_0948, cls_0949, cls_094a, cls_094b, cls_094c, g__dev_maatra_o_e);
    cBindu = (g__dev_candrabindu_alt, g__dev_anusvara, g__dev_inv_candrabindu_alt);

    // Special case for anusvara attaching to an iikar (the candrabindu is raised higher than we want to do
    // for the anusvara):
    g__dev_anusvara {AnM.x = bb.left + (bb.width/2) - 200m; AnM.y = bb.bottom + 200m };
    cls_0940 {AnS.x = UpperS.x; AnS.y = UpperS.y + 300m}; // identical to CaS
    cTakesAn = (cls_0940);
    cAn = (g__dev_anusvara);


    //    These have special glyphs for superscript reph (with or without candrabindu/anusvara).
    //    Also, nuktas have to be kept as separate glyphs and attached.
    cls_vowelRtHigh                    =     (g__dev_maatra_short_o                    g__dev_maatra_o                    g__dev_maatra_a_u
                                         g__dev_maatra_i_i                    g__dev_maatra_i_i_width20);    // currently no real-life uses of width30

    cls_vowelRtHigh_0930_094d        =    (g__dev_maatra_short_o_reph        g__dev_maatra_o_reph            g__dev_maatra_a_u_reph
                                         g__dev_maatra_i_i_reph        g__dev_maatra_i_i_width20_reph)
            { component { c1 = box(0,bb.bottom,    aw,(2*bb.top)/3);
                          c2 = box(0,(2*bb.top)/3, aw,bb.top+100m) };
              NuktaS = point(275m, -160m) };

    cls_vowelRtHigh_0930_094d_0901    =    (g__dev_maatra_short_o_reph_candrabindu    g__dev_maatra_o_reph_candrabindu    g__dev_maatra_a_u_reph_candrabindu
                                         g__dev_maatra_i_i_reph_candrabindu    g__dev_maatra_i_i_width20_reph_candrabindu)
            { component { c1 = box(0,bb.bottom,       aw,(2*bb.top)/3);
                          c2 = box(0,(2*bb.top)/3,    aw/2+200m,bb.top);
                          c3 = box(aw/2,(2*bb.top)/3, aw+300m,bb.top-100m) };
              NuktaS = point(275m, -160m) };

    cls_vowelRtHigh_0930_094d_0902    =    (g__dev_maatra_short_o_reph_bindu    g__dev_maatra_o_reph_bindu    g__dev_maatra_a_u_reph_bindu
                                         g__dev_maatra_i_i_reph_bindu    g__dev_maatra_i_i_width20_reph_bindu)
            { component { c1 = box(0,bb.bottom,       aw,(2*bb.top)/3);
                          c2 = box(0,(2*bb.top)/3,    aw/2+50m,bb.top);
                          c3 = box(aw/2,(2*bb.top)/3, aw,bb.top-200m) };
              NuktaS = point(275m, -160m) };

    cTakesNuktaDia += (cls_vowelRtHigh_0930_094d, cls_vowelRtHigh_0930_094d_0901, cls_vowelRtHigh_0930_094d_0902);

    g__dev_reph_candrabindu {component {c1 = box(bb.left,bb.bottom,            bb.left+bb.width/2+100m,bb.top);
                                c2 = box(bb.left+bb.width/2,bb.bottom, bb.right,bb.top-100m)}};
    g__dev_reph_bindu {component {c1 = box(bb.left,bb.bottom,            bb.left+bb.width/2+50m,bb.top);
                                c2 = box(bb.left+bb.width/2,bb.bottom, bb.right,bb.top-100m)}};

endtable;

/*******************************************************************

    FEATURES

*******************************************************************/

#include "annapurna_gr_features.gdh"


/*******************************************************************

    RULES

*******************************************************************/

// SUBSTITUTION

table(substitution)

pass(PASS_RRA)    // 1

    //    RA forms
    //    Unfortunately this needs to be in a pass by itself, otherwise the rule below
    //    that marks rakar conjuncts gets confused.
    g_ra  g_nukta  >  g_rra:(1 2)  _;

endpass;


pass(PASS_MARKSYL)    // 2

    //    Mark the live and dead consonants based on the syllable structure.
    //    Live = with inherent or explicit dependent vowel; Dead = viramacized.

    //    Recognize and mark conjuncts.
    //    NOTE: These rules must match those below that actually form the conjuncts.
    //    TODO: figure out if we really need to distinguish between F_CONJ1 and F_HALF.

    //    Sept 2017: Note that in many of the rules below, the inclusion of g_halant in the base of the rule
    //    instead of only in the context is a workaround for a bug in the Graphite engine (which is
    //    in the process of being fixed).

    g__dev_ka {form = F_CONJ1}  g_nukta?  g_halant  cls_0915_2ndhalf  /  _  _  _ ^ _;
    g__dev_nga {form = F_CONJ1}  g_nukta?  g_halant  cls_0919_2ndhalf  /  _  _  _ ^ _;
    g__dev_ca {form = F_CONJ1}  g_nukta?  g_halant  cls_091a_2ndhalf  /  _  _  _ ^ _;
    g__dev_tta {form = F_CONJ1}  g_nukta?  g_halant  cls_091f_2ndhalf  /  _  _  _ ^ _;
    g__dev_ttha {form = F_CONJ1}  g_nukta?  g_halant  cls_0920_2ndhalf  /  _  _  _ ^ _;
    g__dev_dda {form = F_CONJ1}  g_nukta?  g_halant  cls_0921_2ndhalf  /  _  _  _ ^ _;
    g__dev_da {form = F_CONJ1}  g_nukta?  g_halant  cls_0926_2ndhalf  /  _  _  _ ^ _;
    g__dev_sha {form = F_CONJ1}  g_nukta?  g_halant  cls_0936_2ndhalf  /  _  _  _ ^ _;
    g__dev_ssa {form = F_CONJ1}  g_nukta?  g_halant  cls_0937_2ndhalf  /  _  _  _ ^ _;
    g__dev_ha {form = F_CONJ1}  g_nukta?  g_halant  cls_0939_2ndhalf  /  _  _  _ ^ _;

    cls_1sthalf_0924_nom {form = F_CONJ1}  g_nukta?  g_halant  g__dev_ta  /  _  _  _ ^ _;
    cls_1sthalf_0928_nom {form = F_CONJ1}  g_nukta?  g_halant  g__dev_na  /  _  _  _ ^ _;
    cls_1sthalf_0932_nom {form = F_CONJ1}  g_nukta?  g_halant  g__dev_la  /  _  _  _ ^ _;

    //  Rakar conjuncts with halants
    cls_woRakarHalant {form = F_CONJ1}  g_ra {form = F_HALCONS; raform = R_RAKAR}  g_halant /  _=C  g_nukta?  _=H  _=R  g_halant;

    //    Rakar conjuncts (note that cls_woRakar includes forms with nuktas attached, but this rule
    //    just won't recognize them).
    cls_woRakar {form = F_CONJ1}  g_halant  g_ra  /  _=C  g_nukta?  _=H ^ _=R;

    //    Three-way conjuncts:
    g__dev_ka {form = F_CONJ1}  g_halant  g__dev_ssa {form = F_CONJ1}  g_halant  g_ra  /  _  _  _  _ ^ _;
    g__dev_ja {form = F_CONJ1}  g_halant  g__dev_nya {form = F_CONJ1}  g_halant  g_ra  /  _  _  _  _ ^ _;

    //    ZWNJ forces an explicit halant:
    cls_consNom {form = F_HALANT}  g_halant  /  _  g_nukta?  _=H  g_zwnj ^;

    //    Exception to the "look-like-halant" rule below: a YA has a form that "connects"
    //    with the previous consonant, even if it would normally use an explicit halant.
    cls_hasExplicitHalant {form = F_NOHALANT}  g_halant  /    _  g_nukta?  _=H ^ g_zwj?  cls_lowerMark?  cls_openBack;

    //    These produce half-forms that "look like" they have an explicit halant, so make them
    //    behave that way.
    cls_hasExplicitHalant {form = F_HALCONS}  g_halant  /  _  g_nukta?  _=H ^ g_zwj?  cls_lowerMark?  cls_consNom;

    //    These have true half-forms:
    cls_nHalf {form = F_HALF}  g_halant  /  _  g_nukta?  _=H ^ g_zwj?  cls_lowerMark?  cls_consNom;

    //    ZWJ forces a half-form:
    cls_nHalf {form = F_HALF}  g_halant  /  _  g_nukta?  _=H  g_zwj ^;

    //    Default to halant form if there is a halant.
    cls_consNom {form = F_HALANT}  g_halant  /  _  g_nukta?  _=H ^;

    //    No halant--just a standard live consonant.
    cls_consNom {form = F_LIVE}  /  _  g_nukta? ^;

endpass;


pass(PASS_RA)    // 3

    //    Deal with behavior of RA. These rules are based roughly on the Devanagari description
    //    in the Unicode Standard book.

    //    double-ra + ya
    //    In theory we could get away with a shorter context, but we need a longer one to increase the precedence
    //    over the "Cons pair" rule below that includes cls_vowelRight.
    g__dev_ra  g_halant  g__dev_ra  g_halant  _  _
        > g__dev_ra:R2 {raform = R_EYELASH}  g_halant:H2  _  _  g__dev_ra:R1 {raform = R_REPH}  g_halant:H1
        /  _=R1  _=H1  _=R2  _=H2  cls_openBack {form == F_LIVE}  cls_vowelRight?  _  _;

    // Special case for two ras + halants
    g__dev_ra  g_halant  g__dev_ra  g_halant
        > g__dev_ra:3 {raform = R_NOMINAL}  g_halant:4  g__dev_ra:1 {raform = R_REPH}  g_halant:2
        /  _  _  _  _  cls_consNom {form == F_LIVE};

    //    If RA+virama is to be applied to a dead consonant, then the mark is positioned after
    //    the whole cluster (cluster may be conjunct or half-form-plus-base) and it uses the
    //    reph (superscript) form.

    //    Cons pair (first cons is conjunct or half-form)
    //    Don't apply this rule if the RA has already been moved (raform == REPH).
    //    Reprocess the cons-cons sequence in case it also involves a RA.
    g_ra  g_halant  _  _  >  _  _  @Rd:Rd {raform = R_REPH}  @H:H
        /  _=Rd {raform != R_REPH} /* dead, !rakar */  _=H
            ^
            cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT}  g_nukta?  g_halant  g_zwj?
            [g_ra { form == F_HALF }  g_halant]? // rakar
            cls_consNom {form == F_LIVE}  g_nukta?
            [cls_vowelRight g_nukta?]?
            _  _;

    //    Reph is before half form - move reph after and mark its final position as still pending (R_REPH_P).
    //    Create a chain in order to continue to move it past any more dead forms.
    g_ra  g_halant  _  _  >  _  _  @R {raform = R_REPH_P}  @H
        /  _=R {raform != R_RAKAR && raform != R_REPH} /* dead but movable */  _=H
            cls_consNom {form == F_HALF}  g_nukta?  g_halant?
            ^  _  _;

    //    Reph is before halant form - move reph after and mark its final position as final (R_REPH).
    g_ra  g_halant  _  _  >  _  _  @R {raform = R_REPH}  @H
        /  _=R {raform != R_RAKAR && raform != R_REPH} /* dead but movable */  _=H
            cls_consNom {F_HALCONS <= form && form <= F_HALANT}  g_nukta?  g_halant?
            ^  _  _;

    //    When we hit a "live" consonant, the reph has found its final place; mark it R_REPH.
    //    Note that if the RA is *already* marked as a reph, it belongs with the previous syllable,
    //    not the following one.
    g_ra  g_halant  _  _  >  _  _  @Rd {raform = R_REPH}  @H
        /  _=Rd {raform != R_RAKAR && raform != R_REPH} /* dead */  _=H
            cls_consNom {F_LIVE == form}  g_nukta?  g_halant?
            [cls_vowelRight g_nukta?]?
            _  _ ;

    //    Can't move the reph any further (we hit a vowel, diacritic, space, etc.).
    g_ra  g_halant  >  @R {raform = R_REPH}  @H  /  _=R {raform == R_REPH_P}  _=H;

    //    According to the Unicode Standard, page 304, two RAs get reordered:
    g_ra  g_halant  g_ra  >  @R2  @R1 {raform = R_REPH}  @H
        /  _=R1 /*dead*/ {raform == R_NOMINAL}  _=H  _=R2 /*live*/;

    //    This is an odd sequence, but Steve Smith says it's the way fonts seem to work.
    g_rra  g_ra {raform = R_RAKAR}  /  _ /*dead*/  g_halant  _ {form == F_LIVE};

    //    In comformance with the ISCII standard, the half-consonant RRA is represented as
    //    eyelash-RA.
    g_rra  >  @R {raform = R_EYELASH}  /  _=R /*dead*/  g_halant;

    //    If the dead RA precedes ZWJ, use the eyelash-RA.
    g_ra  >  @R {raform = R_EYELASH}  /  _=R /*dead*/  g_halant  g_zwj ;

    //    Rakar half-forms.
    cls_woRakarHalf  g_halant g_ra  g_halant  >  cls_wRakarHalf:(1 2 3 4)  _  _  _
        /  _=Cd /*dead*/  _  _=Rd {form == F_HALF}  _ ;

    cls_wNuktaWoRakarHalf  g_nukta  g_halant g_ra  g_halant  >  cls_wNuktaWRakarHalf:(1 2 3 4 5)  _  _  _  _
        /  _=Cd /*dead*/  _  _  _=Rd {form == F_HALF}  _ ;


    //    When a dead consonant (other than RA) precedes a live RA, then the
    //    consonant is replaced with its nominal form and RA is given the rakar (subscript) form.
    //    No reordering happens. Eventually the halant will be deleted, but not yet.
    g_ra           g_ra  >  @Cd                   @Rl
        /  _=Cd /*dead*/   g_nukta?  g_halant  _=Rl {form == F_LIVE};
    cls_consNom    g_ra  >  @Cd {form = F_CONJ1}  @Rl {raform = R_RAKAR}
        /  _=Cd /*dead*/   g_nukta?  g_halant  _=Rl {form == F_LIVE};

    //    Use rakar otherwise. Back up and possibly process the RA further.
    //    For a rakar conjunct, the deadness of the rakar remains to possibly permit a further
    //    conjunct.
    cls_consNom  g_ra  >  @Cd /*conj1*/  @Rd {raform = R_RAKAR} // form = F_HALF
        /  _=Cd /*dead*/  g_nukta?  g_halant ^ _=Rd {form == F_HALF}  g_halant ;

endpass;

pass(PASS_VORDER)    // 4

    //    Reorder I vowel (i-kaar, matra-I) and 094E.
    //    TODO: possibly add yet another consonant in the chain.


    //    Matra-I does not reorder before explicit halants - redundant.
///    cls_hasExplicitHalant  _  _  cls_vowelLeft  g_nukta  >  @Ch  @V  @N  _  _
///        /  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  _=Ch /*dead*/ {form != F_CONJ1}  g_nukta?  g_halant  _  _  cls_consNom /*live*/  g_nukta?  _=V  _=N;
///    cls_hasExplicitHalant  _  cls_vowelLeft  >  @Ch  @V  _
///        /  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  _=Ch /*dead*/ {form != F_CONJ1}  g_nukta?  g_halant  _  cls_consNom /*live*/  g_nukta?  _=V;

    //     Matra-I does not reorder before ZWNJ - redundant.
///    g_zwnj _  _  cls_vowelLeft  g_nukta  >  @Z  @V  @N  _  _
///        /  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  cls_consNom /*dead*/  g_nukta?  g_halant  _=Z  _  _  cls_consNom /*live*/  g_nukta?  _=V  _=N;
///    g_zwnj _  cls_vowelLeft  >  @Z @V  _
///        /  [ cls_consNom /*dead*/  g_nukta?  g_halant]?  cls_consNom /*dead*/  g_nukta?  g_halant  _=Z  _  cls_consNom /*live*/  g_nukta?  _=V;


    //    Explicit halant case: move vowel to just after the halant.
    //    NOTE: we include the explicit-halant consonant in the LHS and RHS (not just the context)
    //    in order to ensure that the rule gets matched early enough in the processing.
    cls_consNom  _  _  cls_vowelLeft  g_nukta  >  @Chal  @V  @N  _  _
        /    [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
            _=Chal {form == F_HALCONS}  g_nukta?  g_halant  g_zwnj?
            _  _ /* insert here */
            cls_consNom /*live*/  g_nukta?
            _=V  _=N;
    cls_consNom  _  cls_vowelLeft  >  @Chal  @V  _
        /    [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
            _=Chal {form == F_HALCONS}  g_nukta?  g_halant  g_zwnj?
            _ /* insert here */
            cls_consNom /*live*/  g_nukta?
            _=V;

    //    Normal case: move vowel to beginning of consonant cluster.
    _  _  cls_vowelLeft  g_nukta  >  @V  @N  _  _
        /    _  _ /* insert here */
            [ [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
              cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
            cls_consNom /*live*/  g_nukta?  g_zwj?
            _=V  _=N;
    _  cls_vowelLeft  >  @V  _
        /    _  /* insert here */
            [ [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
              cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT && raform != R_REPH}  g_nukta?  g_halant  g_zwj? ]?
            cls_consNom /*live*/  g_nukta?  g_zwj?
            _=V;

    //  Rakar half-forms have already been created.
    _  _  cls_vowelLeft  g_nukta  >  @V  @N  _  _
        /    _  _ /* insert here */
            [ cls_rakarHalf  g_zwj? ]?
            cls_consNom /*live*/  g_nukta?  g_zwj?
            _=V  _=N;
    _  cls_vowelLeft  >  @V  _
        /    _  /* insert here */
            [ cls_rakarHalf g_zwj? ]?
            cls_consNom /*live*/  g_nukta?  g_zwj?
            _=V;

    //    Handle the fact that reph has been reordered.
    _  _  cls_vowelLeft  g_nukta  >  @V  @N  _  _
        /    _  _ /* insert here */
            [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT}  g_nukta?  g_halant?  g_zwj?  ]?
            cls_consNom /*live*/  g_nukta?  g_zwj?
            g_ra {raform == R_REPH}  g_halant
            _=V  _=N;
    _  cls_vowelLeft  >  @V  _
        /    _ /* insert here */
            [ cls_consNom {F_CONJ1 <= form && form <= F_NOHALANT}  g_nukta?   g_halant?  g_zwj?  ]?
            cls_consNom /*live*/  g_nukta?  g_zwj?
            g_ra {raform == R_REPH}  g_halant
            _=V;

endpass;

pass(PASS_NUKTA)    // 5
    //    Combine nuktas.

    // But DON'T do it for high vowels with reph (superscript); they use a special ligature form:
    cls_vowelRtHigh  g_nukta  g_ra  g_halant  >  @V  @N  g__dev_ra_reph:(3 4)  _
        / _=V  _=N  _=R {raform == R_REPH}  _=H;

    cls_woNukta  g_nukta  >  cls_wNukta:(1 2)  _ / ^ _  _;    // reprocess for rakar

endpass;

pass(PASS_AHKAND)    // 5
    //    Akhand = halant
    g__dev_ka  g_akhand  g__dev_ssa  >  g__dev_k_ssa:(1 2 3)  _  _;
    g__dev_ja  g_akhand  g__dev_nya  >  g__dev_j_nya:(1 2 3)  _  _;
    g__dev_ta  g_akhand  g__dev_ta  >  g__dev_t_ta:(1 2 3)  _  _;
endpass;

pass(PASS_REPHRAKAR)    // 5
    //    Reph & Rakar
    g_ra  g_halant  >  g__dev_ra_reph:(1 2)   _  /  _=R {raform == R_REPH}   _=H;

    g_ra  >  g__dev_ra_vattu  /  _=R {raform == R_RAKAR} ;
    // Otherwise RA functions as the base consonant of the syllable.
endpass;


pass(PASS_HALFFORMS)    // 6
    //    Odd exceptional case:
    g_rra  g_halant  >  g_rra:(1 2)  _  /  _  _  g__dev_ra_vattu;

    //    Use an alternate form of YA when the previous consonant would have an explicit halant.
    //    DON'T use so-called half form (which will have the explicit halant--we want to remove it).
    //    Also back up and reprocess the YA (eg, to make a rakar ligature).
    cls_nHalf  g_halant  cls_ya  >  cls_nHalf:(C1 H)  _  cls_ya_alt
        /  _=C1 {form == F_NOHALANT}  _=H  g__dev_ra_reph? ^ _=Y;

    //    Don't do any combining if a ZWNJ is present.
    cls_nHalf  g_halant  g_zwnj  /  _  _  g__dev_ra_reph? _ ;

    // Non-standard behavior for minority languages: eyelash ra with nukta.
    g__dev_ra_nukta  g_halant  >  g__dev_half_ra_nukta:(1 2)  _  /  _ {form == F_HALF || form == F_CONJ1}  _  g_zwj;

    //    Special case for two ras - don't use eyelash form (generated by half-form rule below),
    //    except when followed by YA.
    g__dev_ra  g__dev_halant  g__dev_ra_reph  >  g__dev_half_ra:(1 2)  _  @Reph  /  _=Reye {raform == R_EYELASH}  cls_openBack  _=H  _=Reph;
    g__dev_ra  g__dev_halant  g__dev_ra_reph; // don't change

    //    Create half forms (later we will turn some of them into conjuncts).
    cls_nHalf  g_halant  >  cls_half:(1 2)  _  /  _ {form == F_HALF || form == F_CONJ1}  _ ;
    
    //  Composite glyphs with visible halant
    g__dev_cha  g_halant  >  g__dev_half_cha:(1 2)  _  /  _  _ ;

endpass;

pass(PASS_RAKARFULL)    // 6
    //    Rakar full forms
    //    First do the ones that have components defined:

    //    Kludge: First merge consonant and halant together so they can occupy the same component:
    cls_woRakarCaret  g_halant  >  @C:(C H) {mergedHalant = true}  _
        / ^ _=C  _=H  g__dev_ra_vattu {raform == R_RAKAR} ;
    //    Then substitute the conjunct:
    cls_woRakarCaret  g__dev_ra_vattu
        >  cls_wRakarCaret:(C R) {comp {cons.ref=@C; rakar.ref=@R}}  _
        /  _=C {mergedHalant==true}  _=R;

    // No components defined:
    cls_woRakar  g_halant  g__dev_ra_vattu
        >  cls_wRakar:(1 2 3)  _  _ ;

    //    If no conjunct, at least just delete the halant.
    cls_consNom  g_halant  g__dev_ra_vattu  >  cls_consNom:(1 2)  _  @3;

endpass;


table(glyph)
    cls_narrowIBeforeCandrab = (g__dev_kha, g__dev_kha_nukta, g__dev_ga, g__dev_ga_nukta, g__dev_gha, g__dev_gha_nukta,
        g__dev_nga, g__dev_nga_nukta, g__dev_tta, g__dev_tta_nukta, g__dev_dda_nukta, g__dev_ca, g__dev_ca_nukta, g__dev_cha, g__dev_cha_nukta,
        g__dev_ja, g__dev_ja_nukta, g__dev_jha, g__dev_jha_nukta, g__dev_nya, g__dev_nya_nukta, g__dev_dda, g__dev_dda_nukta,
        g__dev_ddha, g__dev_ddha_nukta, g__dev_nna, g__dev_nna_nukta, g__dev_ta, g__dev_ta_nukta,
        g__dev_tha, g__dev_tha_nukta, g__dev_da, g__dev_da_nukta, g__dev_dha, g__dev_dha_nukta, g__dev_na, g__dev_na_nukta,
        g__dev_pa, g__dev_pa_nukta, g__dev_ba, g__dev_ba_nukta, g__dev_bha, g__dev_bha_nukta, g__dev_ma, g__dev_ma_nukta, g__dev_ya,
        g__dev_ya_nukta, g__dev_la, g__dev_la_nukta, g__dev_lla, g__dev_lla_nukta, g__dev_wa, g__dev_wa_nukta,
        g__dev_sha, g__dev_sha_nukta, g__dev_ssa, g__dev_ssa_nukta, g__dev_sa, g__dev_sa_nukta, g__dev_ha, g__dev_ha_nukta
        
        // include stacked conjuncts 2023-03-19
        g__dev_ng_ga g__dev_ng_gha g__dev_ng_nga g__dev_ng_ha  // ng
        g__dev_tt_tta g__dev_tt_ttha g__dev_tth_ttha g__dev_dd_dda   // tt, tth, dd
        g__dev_d_da   // d

    );
    cls_narrowIBeforeAnusv = (
        g__dev_nga, g__dev_nga_nukta, g__dev_dda_nukta, g__dev_ca, g__dev_ca_nukta, g__dev_cha, g__dev_cha_nukta, g__dev_ja, g__dev_ja_nukta,
        g__dev_nya, g__dev_nya_nukta, g__dev_dda, g__dev_dda_nukta, g__dev_ddha, g__dev_ddha_nukta,
        g__dev_nna, g__dev_nna_nukta, g__dev_tha, g__dev_tha_nukta, g__dev_ma, g__dev_ma_nukta, g__dev_ya, g__dev_ya_nukta
        
        // include stacked conjuncts 2023-03-19
        g__dev_ng_ga g__dev_ng_gha g__dev_ng_nga g__dev_ng_ha  // ng
        g__dev_tt_tta g__dev_tt_ttha g__dev_tth_ttha g__dev_dd_dda   // tt, tth, dd
        g__dev_d_da   // d

    );
    // These are okay after all: g0917, g095a, g0918, g0918_093c, g092d, g091d, g091d_093c, g0927, g0927_093c, g092c, g092c_093c, g092d_093c, g0935, g0935_093c, g0936, g0936_093c

    cls_shiftCandrabAfterI = (g__dev_ra, g__dev_ra_nukta); // narrow reph forms

    // These have a wide right side:
    ////////////////cls_noShiftAnusvBeforeCandraO = (g0915, g0958, g092b, g095e, g0960);
endtable;

pass(PASS_MARKMATRAI)  // 6
    //    If the swoop of the matra-I (ikar) is going to collide with a candrabindu or anusvara,
    //    use a narrower version. Here we just mark it as needing the narrower version, and we
    //    do the subtitution below.
    cls_matraI {useNarrow = true}  /  _  cls_narrowIBeforeCandrab  g__dev_nukta?  g__dev_candrabindu ;
    cls_matraI {useNarrow = true}  /  _  cls_narrowIBeforeAnusv    g__dev_nukta?  g__dev_anusvara ;
endpass;

pass(PASS_FULLCONJ)    //  7

    //    Full conjuncts
    //    NOTE: these rules must match those above that recognize conjuncts.

#define SETCOMP {component { c1.reference=@1; c2.reference=@2 }}

//    g0915_094d_half  cls_0915_2ndhalf  >  _  cls_0915_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//    g0919_094d_half  cls_0919_2ndhalf  >  _  cls_0919_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//    g091a_094d_half  cls_091a_2ndhalf  >  _  cls_091a_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//    g091f_094d_half  cls_091f_2ndhalf  >  _  cls_091f_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//    g0920_094d_half  cls_0920_2ndhalf  >  _  cls_0920_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//    g0921_094d_half  cls_0921_2ndhalf  >  _  cls_0921_conj_cpress:(1 2) SETCOMP  / _  _  cls_matraLower;
//    cls_1sthalf_0932  g0932  >  cls_conj_0932_cpress:(1 2) SETCOMP  _  / _  _  cls_matraLower;

    g__dev_half_ka  cls_0915_2ndhalf  >  _  cls_0915_conj:(1 2) SETCOMP;
    g__dev_half_nga  cls_0919_2ndhalf  >  _  cls_0919_conj:(1 2) SETCOMP;
    g__dev_half_ca  cls_091a_2ndhalf  >  _  cls_091a_conj:(1 2) SETCOMP;
    g__dev_half_tta  cls_091f_2ndhalf  >  _  cls_091f_conj:(1 2) SETCOMP;
    g__dev_half_ttha  cls_0920_2ndhalf  >  _  cls_0920_conj:(1 2) SETCOMP;
    g__dev_half_dda  cls_0921_2ndhalf  >  _  cls_0921_conj:(1 2) SETCOMP;
    g__dev_half_da  cls_0926_2ndhalf  >  _  cls_0926_conj:(1 2) SETCOMP;
    g__dev_half_sha  cls_0936_2ndhalf  >  _  cls_0936_conj:(1 2) SETCOMP;
    g__dev_half_ssa  cls_0937_2ndhalf  >  _  cls_0937_conj:(1 2) SETCOMP;
    g__dev_half_ha  cls_0939_2ndhalf  >  _  cls_0939_conj:(1 2) SETCOMP;

    cls_1sthalf_0924  g__dev_ta  >  cls_conj_0924:(1 2) SETCOMP  _;
    cls_1sthalf_0928  g__dev_na  >  cls_conj_0928:(1 2) SETCOMP  _;
    cls_1sthalf_0932  g__dev_la  >  cls_conj_0932:(1 2) SETCOMP  _;

    // rakar conjuncts
    g__dev_half_ka  g__dev_half_ssa_r  >  g__dev_half_k_ssa_r:(1 2)  _;
    g__dev_half_ja  g__dev_half_nya_r  >  g__dev_half_j_nya_r:(1 2)  _;

    // These forms basically have the effect of removing the halant from the first consonant in the cluster.
    cls_yaRakarHalf_pre  g_halant  g__dev_half_ya_r  >    cls_yaRakarHalf_conj:(1 2 3)  _  _;
    cls_yaRakarHalf_pre  g_halant  g__dev_half_ya_nukta_r  >    cls_yyaRakarHalf_conj:(1 2 3)  _  _;

    // 0926 is different in that it has already been put into a single glyph with halant.
    ////cls_yaRakarHalf_pre094d  g092f_094d_0930_094d_half  >  cls_yaRakarHalf_conj_subs:(1 2)  _;
    ////cls_yaRakarHalf_pre094d  g095f_094d_0930_094d_half  >  cls_yyaRakarHalf_conj_subs:(1 2)  _;

    // The form that includes the halant is not necessary except that includes an LowerAlt att pt,
    // needed for instance for 0952.
    g__dev_ha_r       g__dev_halant  >  g__dev_half_ha_r:(1 2)  _;
    g__dev_ha_nukta_r  g__dev_halant  >  g__dev_half_ha_nukta_r:(1 2)  _;

endpass;

pass(PASS_MATRAWIDTH)    // 7

    //    Choose a good width for matras.
    //    Since conjuncts may not yet have been formed, this will choose the wrong width for them.
    //    Fix them below.

    //    Narrower-than-normal versions to avoid conflict with candrabindu and anusvara.
    cls_matraI  >  @1  /  _ {useNarrow == true}  consWidth20_matraI;
    cls_matraI  >  cls_matraI_width20  /  _ {useNarrow == true}  consWidth30_matraI;
    cls_matraI  >  cls_matraI_width30  /  _ {useNarrow == true}  consWidth40_matraI;

    cls_matraI  >  cls_matraI_width40  /  _  cls_rakarHalf;
    cls_matraI  >  cls_matraI_width20  /  _  consWidth20_matraI;
    cls_matraI  >  cls_matraI_width30  /  _  consWidth30_matraI;
    cls_matraI  >  cls_matraI_width40  /  _  consWidth40_matraI;

    cls_matraII  >  cls_matraII_width20  /  consWidth20_matraII  _;
    cls_matraII  >  cls_matraII_width30  /  consWidth30_matraII  _;

endpass;

pass(PASS_LIGBELOW)        // 8
    //    Compress stacked conjuncts where necessary. In theory we should be able to replace one conjunct with
    //    a different form, but Graphite seems to lose the ligature components. So we use separate original
    //    rules above.
    cno_stackCompress  >  cStackCompress  /  _  cls_matraLower;

    //    Ligatures below
    g__dev_ha  cls_noLigBelow_0939  >  _  cls_ligBelow_0939:(1 2);
    g__dev_ra  cls_noLigBelow_0930  >  _  cls_ligBelow_0930:(1 2);
    g__dev_ra_nukta  cls_noLigBelow_0931  >  _  cls_ligBelow_0931:(1 2);

    // This rule produces a warning because the ZWJ does not form a component; that's okay.
    // No longer needed.
//    g0930  g200d  cls_noLigRephZwjU
//        >  _  _  cls_ligRephZwjU:(1 2 3) { component { c1.ref = @1; c2.ref = @3 } };

    // Combinations to avoid collisions
    g__dev_ha_nukta  g__dev_maatra_u_u  >  g__dev_ha_nukta_maatra_u_u:(1 2) { component { c1.ref = @1; c2.ref = @2 } }  _;
endpass;

///pass(PASS_HALANT) -- do we want a feature to turn these on?    // 8
///    //    Explicit halant forms
///    cls_woHalant  g_halant  >  cls_wHalant:(1 2)  _ ;
///endpass;


pass(PASS_FIXUPPERS)    // 8
    //    Use ligatures for high right vowels with reph (possibly with anusvara or candrabindu),
    //    to avoid collisions.
    cls_vowelRtHigh  g__dev_ra_reph           >   cls_vowelRtHigh_0930_094d:(V R)
                                                        {component {c1.ref = @V; c2.ref = @R}}
                                                    _
        / _=V  g_nukta?  _=R ;
    cls_vowelRtHigh  g__dev_ra_reph  g__dev_candrabindu    >   cls_vowelRtHigh_0930_094d_0901:(V R A)
                                                        {component {c1.ref = @V; c2.ref = @R; c3.ref = @A}}
                                                    _  _
        / _=V  g_nukta?  _=R  _=A ;
    cls_vowelRtHigh  g__dev_ra_reph  g__dev_anusvara    >   cls_vowelRtHigh_0930_094d_0902:(V R C)
                                                        {component {c1.ref = @V; c2.ref = @R; c3.ref = @C}}
                                                    _  _
        / _=V  g_nukta?  _=R  _=C ;

    //    Any other case of reph + upper mark:
    g__dev_ra_reph  g__dev_candrabindu   >   g__dev_reph_candrabindu:(1 2) {component {c1.ref = @1; c2.ref = @2}}  _;
    g__dev_ra_reph  g__dev_anusvara   >   g__dev_reph_bindu:(1 2) {component {c1.ref = @1; c2.ref = @2}}  _;

    // No special glyph for inverted candrabindu--use a small form and squeeze it in:
    g__dev_inv_candrabindu  >  g__dev_inv_candrabindu_alt  /  (cls_vowelRtHigh_0930_094d  g__dev_ra_reph)  _ ;

    //    Use small candrabindu whenever there is something else above the baseline.
    cls_candrab  >  cls_candrab_alt
            /  (cls_0945  cls_0946  cls_0947  cls_0948  g__dev_maatra_o_e)  _;            // dependent vowels
    cls_candrab  >  cls_candrab_alt
            /  (cls_0940  cls_0949  cls_094a  cls_094b  cls_094c  g__dev_maatra_o_o_e  g__dev_maatra_a_w)  _;    // tall vowels
    cls_candrab  >  cls_candrab_alt
            /  (g__dev_maatra_o_o_e g__dev_maatra_a_w)  g_nukta  _;
    cls_candrab  >  cls_candrab_alt
            /  (g__dev_vowel_candra_a  g__dev_vowel_candra_a_nukta  g__dev_vowel_o_e  g__dev_vowel_o_o_e  g__dev_vowel_a_w  g__dev_vowel_u_e  g__dev_vowel_u_u_e)  g_nukta?  _;

    //    Now that the conjuncts have been created, use a narrower matra-I where necessary.
    cls_matraI_width30  >  cls_matraI          /  _  conjWidth00_matraI;
    cls_matraI_width40  >  cls_matraI          /  _  conjWidth00_matraI;
    cls_matraI_width30  >  cls_matraI_width20  /  _  conjWidth20_matraI;
    cls_matraI_width40  >  cls_matraI_width20  /  _  conjWidth20_matraI;
    cls_matraI_width40  >  cls_matraI_width30  /  _  conjWidth30_matraI;

    //    No combined form for this vowel, but just use an alternate reph that fits better.
    g__dev_ra_reph  >  g__dev_ra_reph_alt  /  g__dev_maatra_a_w  g_nukta?  _;


endpass;

pass(PASS_FRACTIONS)    // 8
    //    Fractions
    g__dev_one  (g__frac_slash g_slash)  g__dev_four  >  g__dev_one_quarter:(1 2 3)  _  _;
    g__dev_one  (g__frac_slash g_slash)  g__dev_two  >  g__dev_one_half:(1 2 3)  _  _;
    g__dev_three  (g__frac_slash g_slash)  g__dev_four  >  g__dev_three_quarters:(1 2 3)  _  _;
endpass;

//    Classes for features
table(glyph)
    c_091d_noalt = (
        g__dev_jha        g__dev_half_jha        g__dev_jha_nukta            g__dev_half_jha_nukta
        g__dev_jha_r                    g__dev_jha_nukta_r);

    c_091d_alt1 = (
        g__dev_jha_alt    g__dev_half_jha_alt    g__dev_jha_nukta_alt        g__dev_half_jha_nukta_alt
        g__dev_jha_r_alt                g__dev_jha_nukta_r_alt);

    c_091d_alt2 = (
        g__dev_jha_alt2    g__dev_half_jha_alt2    g__dev_jha_nukta_alt2    g__dev_half_jha_nukta_alt2
        g__dev_jha_r_alt2                g__dev_jha_nukta_r_alt2);


    c_kra_noalt    = (g__dev_ka_r        g__dev_ka_nukta_r                g__dev_half_ka_r        g__dev_half_ka_nukta_r);
    c_kra_alt    = (g__dev_ka_r_alt    g__dev_ka_nukta_r_alt            g__dev_half_ka_r_alt    g__dev_half_ka_nukta_r_alt);

    c_tra_noalt    = (g__dev_ta_r        g__dev_ta_nukta_r        g__dev_half_ta_r        g__dev_half_ta_nukta_r);
    c_tra_alt    = (g__dev_ta_r_alt    g__dev_ta_nukta_r_alt    g__dev_half_ta_r_alt    g__dev_half_ta_nukta_r_alt);

    c_shra_noalt= (g__dev_sha_r        g__dev_sha_nukta_r        g__dev_half_sha_r        g__dev_half_sha_nukta_r);
    c_shra_alt    = (g__dev_sha_r_alt    g__dev_sha_nukta_r_alt    g__dev_half_sha_r_alt    g__dev_half_sha_nukta_r_alt);

    c_ukar_noalt= (g__dev_maatra_u_nukta            g__dev_maatra_u_u_nukta);
    c_ukar_alt    = (g__dev_maatra_u_nukta_alt        g__dev_maatra_u_u_nukta_alt);
    c_ukar_alt2 = (g__dev_maatra_u_nukta_alt2        g__dev_maatra_u_u_nukta_alt2);

    c_ekar_noalt= (g__dev_maatra_e_nukta);
    c_ekar_alt    = (g__dev_maatra_e_nukta_alt);

    //    Alternate DYA & HYA forms

    cls_dyahya            = (g__dev_d_ya                        g__dev_h_ya);
    cls_dyyahyya        = (g__dev_d_ya_nukta                        g__dev_h_ya_nukta);
    cls_dyahya_alt        = (g__dev_d_ya_alt                    g__dev_h_ya_alt);
    cls_daha_half        = (g__dev_half_da                        g__dev_half_ha);
    cls_dyahya_half        = (g__dev_d_half_ya            g__dev_h_half_ya);
    cls_dyyahyya_half    = (g__dev_d_half_ya_nukta            g__dev_h_half_ya_nukta);
    cls_dyrhyr            = (g__dev_d_ya_ra            g__dev_h_ya_ra);
    cls_dyyrhyyr        = (g__dev_d_ya_nukta_ra            g__dev_h_ya_nukta_ra);
    cls_dyrhyr_half        = (g__dev_half_d_ya_ra    g__dev_half_h_ya_ra);
    cls_dyyrhyyr_half    = (g__dev_half_d_ya_nukta_ra    g__dev_half_h_ya_nukta_ra);

    cls_dyahya_ligs = (cls_dyyahyya, cls_dyahya_half, cls_dyyahyya_half, cls_dyrhyr, cls_dyyrhyyr, cls_dyrhyr_half, cls_dyyrhyyr_half)
        { component { c1 = box(0,-descent,    aw/2,ascent);
                      c2 = box(aw/2,-descent, aw,ascent) } };

    g_ya            = (g__dev_ya);
    g_ya_half        = (g__dev_half_ya);
    g_yya            = (g__dev_ya_nukta);
    g_yya_half        = (g__dev_half_ya_nukta);
    g_ya_ra            = (g__dev_ya_r);
    g_yya_ra        = (g__dev_ya_nukta_r);
    g_ya_ra_half    = (g__dev_half_ya_r);
    g_yya_ra_half    = (g__dev_half_ya_nukta_r);

    cls_ya_noalt             = (g__dev_ya,                                g__dev_ya_nukta);
    cls_ya_noalt_half        = (g__dev_half_ya,                        g__dev_half_ya_nukta);
    cls_ya_ra_noalt         = (g__dev_ya_r,                        g__dev_ya_nukta_r);
    cls_rya_alt             = (g__dev_ra_ya,            g__dev_ra_ya_nukta);
    cls_rya_alt_half         = (g__dev_ra_half_ya,    g__dev_ra_half_ya_nukta);
    cls_rya_ra_alt_half     = (g__dev_ra_ya_ra,    g__dev_ra_ya_nukta_ra);
    
    // ra ukar dot ligatures
    c_rudot_stack  = (g__dev_ra_maatra_u_nukta, g__dev_ra_nukta_maatra_u_nukta, g__dev_ra_maatra_u_u_nukta, g__dev_ra_nukta_maatra_u_u_nukta);
    c_rudot_lig    = (g__dev_r_u_nukta,         g__dev_r_nukta_u_nukta,         g__dev_r_u_u_nukta,         g__dev_r_nukta_u_u_nukta);

endtable; // glyph

pass(PASS_FEATURES)    // 8

if (jha == india) // cv01
    c_091d_alt1  >  c_091d_noalt;
    c_091d_alt2  >  c_091d_noalt;
endif;

if (jha == nepal) // cv01=1
    c_091d_noalt  >  c_091d_alt1;
    c_091d_alt2   >  c_091d_alt1;
endif;

if (jha == newar) // cv01=2
    c_091d_noalt  >  c_091d_alt2;
    c_091d_alt1   >  c_091d_alt2;
endif;


if (kra) // cv03
    c_kra_noalt  >  c_kra_alt;
else
    c_kra_alt  >  c_kra_noalt;
endif;


if (tra) // cv04
    c_tra_noalt  >  c_tra_alt;
else
    c_tra_alt  >  c_tra_noalt;
endif;


if (shra) // cv05
    c_shra_noalt  >  c_shra_alt;
else
    c_shra_alt  >  c_shra_noalt;
endif;


if (ukar) // cv06
    c_ukar_noalt  >  c_ukar_alt2  /  cStackCompress _ ;
    c_ukar_noalt  >  c_ukar_alt;
else
    c_ukar_alt   >  c_ukar_noalt;
    c_ukar_alt2  >  c_ukar_noalt;
endif;


if (ekar) // cv07
    c_ekar_noalt  >  c_ekar_alt;
else
    c_ekar_alt  >  c_ekar_noalt;
endif;


if (digit5) // cv08
    g__dev_five  >  g__dev_five_alt;
else
    g__dev_five_alt  >  g__dev_five;
endif;


if (digit8) // cv09
    g__dev_eight  >  g__dev_eight_alt;
else
    g__dev_eight_alt  >  g__dev_eight;
endif;


if (digit9 == form1) // cv10
    g__dev_nine_alt  >  g__dev_nine;
    g__dev_nine_alt2 >  g__dev_nine;
endif;
if (digit9 == form2) // cv10=1
    g__dev_nine      >  g__dev_nine_alt;
    g__dev_nine_alt2 >  g__dev_nine_alt;
endif;
if (digit9 == form3) // cv10=2
    g__dev_nine     >  g__dev_nine_alt2;
    g__dev_nine_alt >  g__dev_nine_alt2;
endif;


if (visargabar) // cv12
    g__dev_visarga  >  g__dev_visarga_alt;
else
    g__dev_visarga_alt  >  g__dev_visarga;
endif;

if (glottalbar) // cv13 - alternate form has no bar
    g__dev_glottal_stop  >  g__dev_glottal_stop_alt;
else
    g__dev_glottal_stop_alt  >  g__dev_glottal_stop;
endif;


if (dyahya) // cv14
    cls_dyahya  >  cls_dyahya_alt;
    cls_daha_half  g_yya         >  cls_dyyahyya:(1 2)      {comp {c1.ref = @1; c2.ref = @2}}  _ ;
    cls_daha_half  g_ya_half     >  cls_dyahya_half:(1 2)   {comp {c1.ref = @1; c2.ref = @2}}  _ ;
    cls_daha_half  g_yya_half    >  cls_dyyahyya_half:(1 2) {comp {c1.ref = @1; c2.ref = @2}}  _ ;
    cls_daha_half  g_ya_ra       >  cls_dyrhyr:(1 2)        {comp {c1.ref = @1; c2.ref = @2}}  _ ;
    cls_daha_half  g_yya_ra      >  cls_dyyrhyyr:(1 2)      {comp {c1.ref = @1; c2.ref = @2}}  _ ;
    cls_daha_half  g_ya_ra_half  >  cls_dyrhyr_half:(1 2)   {comp {c1.ref = @1; c2.ref = @2}}  _ ;
    cls_daha_half  g_yya_ra_half >  cls_dyyrhyyr_half:(1 2) {comp {c1.ref = @1; c2.ref = @2}}  _ ;
endif;


if (archaic) // cv15
    cno_archaic  >  carchaic;
else
    carchaic  >  cno_archaic;
endif;


if (rudot) // cv16
//  c_rudot_stack  >  c_rudot_lig;
    g__dev_ra       g__dev_maatra_u_nukta    >  g__dev_r_u_nukta:(1 2) _;
    g__dev_ra_nukta g__dev_maatra_u_nukta    >  g__dev_r_nukta_u_nukta:(1 2) _;
    g__dev_ra       g__dev_maatra_u_u_nukta  >  g__dev_r_u_u_nukta:(1 2) _;
    g__dev_ra_nukta g__dev_maatra_u_u_nukta  >  g__dev_r_nukta_u_u_nukta:(1 2) _;
else
    c_rudot_lig  >  c_rudot_stack;
endif;


if (cha) // cv17
    g__dev_cha       >  g__dev_cha_alt;
    g__dev_half_cha  >  g__dev_half_cha_alt;
else
    g__dev_cha_alt       >  g__dev_cha;
    g__dev_half_cha_alt  >  g__dev_half_cha;
endif;
 
if (headstroke == standard) // cv21
    g__dev_headstroke_filler   >  g__dev_headstroke;
    g__dev_headstroke_discrete >  g__dev_headstroke;
endif;
if (headstroke == discrete) // cv21=1
    g__dev_headstroke          >  g__dev_headstroke_discrete;
    g__dev_headstroke_filler   >  g__dev_headstroke_discrete;
endif;
if (headstroke == filler)  // cv21=2
    g__dev_headstroke          >  g__dev_headstroke_filler;
    g__dev_headstroke_discrete >  g__dev_headstroke_filler;
endif;


if (jainom) // cv22
    g__dev_jain_om      >  g__dev_jain_om_alt;
else
    g__dev_jain_om_alt  >  g__dev_jain_om;
endif;


if (rya) // special case
    g__dev_ra g__dev_halant g_zwnj cls_ya_ra_noalt        >  _  _  _  cls_rya_ra_alt_half:(1 2 3 4);
    ///g0930 g094d g_zwnj cls_ya_noalt g094d      >  _  _  _  cls_rya_alt_half:(1 2 3 4 5) _;  // SC
    g__dev_ra g__dev_halant g_zwnj cls_ya_noalt_half      >  _  _  _  cls_rya_alt_half:(1 2 3 4);   // JC
    g__dev_ra g__dev_halant g_zwnj cls_ya_noalt          >  _  _  _  cls_rya_alt:(1 2 3 4) ;
endif;

endpass; // PASS_FEATURES


// Classes for Latin substitution
table(glyph)
    cls_ltnAllChars = ( g_exclam g_exclam_alt g_quotedbl g_numbersign g_dollar g_percent g_ampersand g_quotesingle g_parenleft g_parenright 
        g_asterisk g_plus g_comma g_hyphen g_period g_slash g_zero g_one g_two g_three g_four g_five g_six g_seven g_eight g_nine 
        g_colon g_semicolon g_less g_equal g_greater g_question g_question_alt g_at 
        g__a g__b g__c g__d g__e g__f g__g g__h g__i g__j g__k g__l g__m g__n g__o g__p g__q g__r g__s g__t g__u g__v g__w g__x g__y g__z 
        g_bracketleft g_backslash g_bracketright g_asciicircum g_underscore g_grave 
        g_a g_b g_c g_d g_e g_f g_g g_h g_i g_j g_k g_l g_m g_n g_o g_p g_q g_r g_s g_t g_u g_v g_w g_x g_y g_z 
        g_braceleft g_bar g_braceright g_asciitilde g_nbspace g_exclamdown g_cent g_sterling g_currency g_yen g_brokenbar 
        g_section g_dieresis g_copyright g_ordfeminine g_guillemotleft g_logicalnot g__registered_sgn g_macron g_degree 
        g_plusminus g_twosuperior g_threesuperior g_acute g_mu g_paragraph g_periodcentered g_cedilla g_onesuperior 
        g_ordmasculine g_guillemotright g_onequarter g_onehalf g_threequarters g_questiondown 
        g__agrave g__aacute g__acircumflex g__atilde g__adieresis g__aring g__a_e g__ccedilla g__egrave g__eacute g__ecircumflex g__edieresis 
        g__igrave g__iacute g__icircumflex g__idieresis g__eth g__ntilde g__ograve g__oacute g__ocircumflex g__otilde g__odieresis 
        g_multiply g__oslash g__ugrave g__uacute g__ucircumflex g__udieresis g__yacute  
        g__thorn g__ltn_sm_sharp_s g_agrave g_aacute g_acircumflex g_atilde g_adieresis g_aring g_ae g_ccedilla g_egrave g_eacute g_ecircumflex 
        g_edieresis g_igrave g_iacute g_icircumflex g_idieresis g_eth g_ntilde g_ograve g_oacute g_ocircumflex g_otilde g_odieresis g_divide 
        g_oslash g_ugrave g_uacute g_ucircumflex g_udieresis g_yacute g_thorn g_ydieresis g_amacron g_emacron g_itilde g_imacron g_dotlessi 
        g_eng g_omacron g__o_e g_oe g__scaron g_scaron g_utilde g_umacron g__ydieresis g_florin 
        g_ascript g_cturn g_ccurl g_drthook g_schwa g_epsilonlatin g__ismallcap g_nlftlfthook g_nrthook g_srthook g_trthook g_upsilonlatin 
        g_vturn g_zcurl g_glottalstop g_hsuper g_apostrophe g_circumflex g_length g_tilde g_gravenosp g_acutenosp g_circumflexnosp g_tildenosp 
        g_macronnosp g__comb_overline g_dotnosp g_dieresisnosp g__comb_ring_abv g_haceknosp g_candrabinducomb g_dotsubnosp g_ringsubnosp 
        g__comb_cedilla g_etilde g_endash g_emdash g_quoteleft g_quoteright g_quotesinglbase g_quotedblleft g_quotedblright g_quotedblbase 
        g_dagger g_daggerdbl g_bullet g_ellipsis g_perthousand g_guilsinglleft g_guilsinglright g_zerosuperior g_foursuperior g_fivesuperior 
        g_sixsuperior g_sevensuperior g_eightsuperior g_ninesuperior g_euro g_trademark g_minus g_amacrontilde g_emacrontilde g_imacrontilde 
        g_omacrontilde g_umacrontilde g_mcandrabindu );
endtable;


pass(PASS_LATINDIAC)    // 8

endpass; // PASS_LATINDIAC


pass(PASS_LATINPUNCT)    // 8

    g_exclam    >  g_exclam_alt    /  cls_ltnAllChars  _ ;
    g_question  >  g_question_alt  /  cls_ltnAllChars  _ ;

endpass; // PASS_LATINPUNCT


// Classes for collision-fixing substitution
table(glyph)
    cls_conjunctsYaAlt = (g__dev_ng_ya   g__dev_ch_ya   g__dev_tt_ya   g__dev_tth_ya   g__dev_dd_ya
        g__dev_ddh_ya   g__dev_ng_ya_nukta   g__dev_ch_ya_nukta   g__dev_tt_ya_nukta   g__dev_tth_ya_nukta   g__dev_dd_ya_nukta
        g__dev_ddh_ya_nukta   g__dev_ng_ya_ra   g__dev_ch_ya_ra   g__dev_tt_ya_ra
        g__dev_tth_ya_ra   g__dev_dd_ya_ra   g__dev_ddh_ya_ra   g__dev_ng_ya_nukta_ra
        g__dev_ch_ya_nukta_ra   g__dev_tt_ya_nukta_ra   g__dev_tth_ya_nukta_ra   g__dev_dd_ya_nukta_ra
        g__dev_ddh_ya_nukta_ra);

    cls_consNarrowRightOfStem = (cls_fullKha  cls_fullGa cls_fullGha  cls_fullNga  cls_fullCa  cls_fullCha
        cls_fullJa  cls_fullJha  cls_fullNya  cls_fullTta  cls_fullTtha  cls_fullDda  cls_fullDdha  cls_fullNna
        cls_fullTa  cls_fullTha  cls_fullDa   cls_fullDha  cls_fullNa    cls_fullPa   cls_fullBa    cls_fullBha
        cls_fullMa  cls_fullYa   cls_fullRa   cls_fullLa   cls_fullLla   cls_fullWa   cls_fullSha   cls_fullSsa
        cls_fullSa  cls_fullHa   g__dev_k_ssa   g__dev_k_ssa_r   g__dev_k_ssa_archaic   g__dev_c_ca
        g__dev_j_nya   g__dev_j_nya_r   g__dev_t_ta   g__dev_d_da   g__dev_d_dha
        g__dev_d_ma   g__dev_d_ya  g__dev_d_wa  g__dev_n_na   g__dev_p_ta   g__dev_m_la
        g__dev_l_la   g__dev_sh_ca   g__dev_sh_wa   g__dev_ss_tta   g__dev_ss_ttha   g__dev_s_na
        g__dev_h_na   g__dev_h_ma   g__dev_h_ya   g__dev_h_la   g__dev_h_wa   g__dev_h_ri
        cls_conjunctsYaAlt);

    cls_vowelNarrowRightOfStem = (g__dev_vowel_a  g__dev_vowel_a_a  g__dev_vowel_i  g__dev_vowel_e  g__dev_maatra_a_a)

    cls_vowelHighTop = (g__dev_vowel_short_a  g__dev_vowel_i_i  g__dev_vowel_candra_e  g__dev_vowel_short_e  g__dev_vowel_a_i  g__dev_vowel_candra_o  g__dev_vowel_short_o  g__dev_vowel_o  g__dev_maatra_o_o_e  g__dev_maatra_i_i
        g__dev_maatra_candra_o  g__dev_maatra_short_o  g__dev_maatra_o  g__dev_maatra_a_w);

    cls_matraAndRephComb = (g__dev_maatra_short_e_reph   g__dev_maatra_short_e_reph_bindu   g__dev_maatra_short_e_reph_candrabindu   g__dev_maatra_e_reph
         g__dev_maatra_e_reph_bindu   g__dev_maatra_e_reph_candrabindu   g__dev_maatra_ai_reph   g__dev_maatra_ai_reph_bindu   g__dev_maatra_ai_reph_candrabindu
         g__dev_ra_reph   g__dev_ra_reph_alt   g__dev_ra_reph_alt2   g__dev_reph_bindu   g__dev_reph_candrabindu);

    cls_matraWOreph = (g__dev_maatra_short_e  g__dev_maatra_e  g__dev_maatra_ai);

    cls_matraSpacingAdj = (g__dev_maatra_candra_o   g__dev_maatra_candra_o_nukta   g__dev_maatra_short_o   g__dev_maatra_short_o_nukta   g__dev_maatra_o   g__dev_maatra_o_nukta   g__dev_maatra_a_u   g__dev_maatra_a_u_nukta);

    cls_matraSpacingLeft2 = (g__dev_maatra_i_i_reph   g__dev_maatra_i_i_reph_bindu   g__dev_maatra_i_i_width20_reph_bindu
         g__dev_maatra_i_i_reph_candrabindu   g__dev_maatra_i_i_width20_reph_candrabindu  g__dev_maatra_short_o_reph
         g__dev_maatra_short_o_reph_bindu   g__dev_maatra_short_o_reph_candrabindu   g__dev_maatra_o_reph   g__dev_maatra_o_reph_bindu
         g__dev_maatra_o_reph_candrabindu   g__dev_maatra_a_u_reph   g__dev_maatra_a_u_reph_bindu   g__dev_maatra_a_u_reph_candrabindu
        //g094a  g094a_093c  g094b  g094b_093c  g094c   g094c_093c  -
        );

    cls_vowelMatraCandrabFix = (g__dev_maatra_candra_long_e   g__dev_maatra_o_o_e   g__dev_maatra_candra_o  g__dev_maatra_candra_o_nukta   g__dev_maatra_short_o   g__dev_maatra_short_o_nukta   g__dev_maatra_o   g__dev_maatra_o_nukta
         g__dev_maatra_a_u   g__dev_maatra_a_u_nukta   g__dev_maatra_candra_e   g__dev_maatra_candra_e_nukta   g__dev_maatra_short_e   g__dev_maatra_short_e_nukta   g__dev_maatra_e   g__dev_maatra_e_nukta   g__dev_maatra_e_nukta_alt
         g__dev_maatra_ai   g__dev_maatra_ai_nukta   g__dev_vowel_short_a   g__dev_vowel_short_a_nukta   g__dev_vowel_candra_a   g__dev_vowel_candra_a_nukta   g__dev_vowel_candra_o   g__dev_vowel_candra_o_nukta   g__dev_vowel_short_o   g__dev_vowel_short_o_nukta
         g__dev_vowel_o   g__dev_vowel_o_nukta   g__dev_vowel_a_u   g__dev_vowel_a_u_nukta   g__dev_vowel_i_i   g__dev_vowel_i_i_nukta   g__dev_vowel_candra_e   g__dev_vowel_candra_e_nukta   g__dev_vowel_short_e   g__dev_vowel_short_e_nukta
         g__dev_vowel_a_i   g__dev_vowel_a_i_nukta   cls_matraII_all   g__dev_maatra_o_e);

    cls_ra_rra = (g__dev_ra g__dev_ra_nukta);
    cls_ra_0947small = (g__dev_ra_e  g__dev_ra_nukta_e);
    cls_ra_0948small = (g__dev_ra_ai  g__dev_ra_nukta_ai);

    cls_candrab_collide = (g__dev_candrabindu  g__dev_maatra_candra_long_e  g__dev_maatra_candra_e  g__dev_maatra_candra_e_nukta);

    cls_reph_collide = (g__dev_ra_reph g__dev_ra_reph_alt g__dev_ra_reph_alt2  g__dev_reph_bindu  g__dev_reph_candrabindu);
endtable

pass(PASS_SUB4POS)    // 8
    //    The candra-O (w & w/o nukta) collides with the reph:
    //    break it into two glyphs so that we can adjust it.
    cls_0949    _  >  cls_0949_bottom:1  cls_0949_top$1:1       /  _  _  g__dev_ra_reph;
    //    Same for candra-E + nukta
    g__dev_maatra_candra_e_nukta  _  >  g0945_093c_top:2   g0945_093c_bottom:2  /  g__dev_ra_reph  _  _  ;

    //    The candra-O/E collides with the anusvara: break into two pieces.
    cls_0949    _  >  cls_0949_bottom:1  g0949_top:1          /  _  _  g__dev_anusvara=A;
    g__dev_maatra_candra_e_nukta  _  >  g0945_093c_top:1   g0945_093c_bottom:1  /  _  _  g__dev_anusvara=A;

    // Two matching diacritics in a row should have an intervening dotted circle.
    g__dev_candrabindu  _  g__dev_candrabindu   >   @1  g__dotted_circ:3  @3;
    g__dev_anusvara  _  g__dev_anusvara   >   @1  g__dotted_circ:3  @3;
    g__dev_nukta  _  g__dev_nukta   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_u  _  g__dev_maatra_u   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_u_u  _  g__dev_maatra_u_u   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_r  _  g__dev_maatra_r   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_r_r  _  g__dev_maatra_r_r   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_candra_e  _  g__dev_maatra_candra_e   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_short_e  _  g__dev_maatra_short_e   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_e  _  g__dev_maatra_e   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_ai  _  g__dev_maatra_ai   >   @1  g__dotted_circ:3  @3;
    g__dev_halant  _  g__dev_halant   >   @1  g__dotted_circ:3  @3;
    g__dev_udatta  _  g__dev_udatta   >   @1  g__dotted_circ:3  @3;
    g__dev_anudatta  _  g__dev_anudatta   >   @1  g__dotted_circ:3  @3;
    g__dev_grave  _  g__dev_grave   >   @1  g__dotted_circ:3  @3;
    g__dev_acute  _  g__dev_acute   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_candra_long_e  _  g__dev_maatra_candra_long_e   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_u_e  _  g__dev_maatra_u_e   >   @1  g__dotted_circ:3  @3;
    g__dev_maatra_u_u_e  _  g__dev_maatra_u_u_e   >   @1  g__dotted_circ:3  @3;

endpass;

pass(PASS_SUB4POSMORE)

    // Matra I & II collides with preceding candrabindu

    cls_ra_rra  g__dev_maatra_e  >  cls_ra_0947small:(1 2)  _  / g__dev_maatra_a_a  cls_candrab_collide _ _;
    cls_ra_rra  g__dev_maatra_ai  >  cls_ra_0948small:(1 2)  _  / g__dev_maatra_a_a  cls_candrab_collide _ _;

    cls_ra_rra  g__dev_maatra_e  >  cls_ra_0947small:(1 2)  _  /  (cls_vowelMatraCandrabFix cls_matraSpacingAdj)  (g__dev_candrabindu g__dev_candrabindu_alt)  g__dev_anusvara  _  _;
    cls_ra_rra  g__dev_maatra_ai  >  cls_ra_0948small:(1 2)  _  /  (cls_vowelMatraCandrabFix cls_matraSpacingAdj)  (g__dev_candrabindu g__dev_candrabindu_alt)  g__dev_anusvara  _  _;

    cls_ra_rra  g__dev_maatra_e  >  cls_ra_0947small:(1 2)  _  /  cls_matraSpacingLeft2  _  _;
    cls_ra_rra  g__dev_maatra_ai  >  cls_ra_0948small:(1 2)  _  /  cls_matraSpacingLeft2  _  _;

    cls_ra_rra  g__dev_maatra_e  >  cls_ra_0947small:(1 2)  _  /  cls_consNarrowRightOfStem  cls_matraAndRephComb  cls_matraWOreph?  _  _;
    cls_ra_rra  g__dev_maatra_ai  >  cls_ra_0948small:(1 2)  _  /  cls_consNarrowRightOfStem  cls_matraAndRephComb  cls_matraWOreph? _  _;

    cls_ra_rra  g__dev_maatra_e  >  cls_ra_0947small:(1 2)  _  /  cls_consNarrowRightOfStem  g__dev_candrabindu  _  _;
    cls_ra_rra  g__dev_maatra_ai  >  cls_ra_0948small:(1 2)  _  /  cls_consNarrowRightOfStem  g__dev_candrabindu  _  _;

    cls_ra_rra  g__dev_maatra_e  >  cls_ra_0947small:(1 2)  _  /  cls_candrab_collide  cls_reph_collide  _  _;
    cls_ra_rra  g__dev_maatra_ai  >  cls_ra_0948small:(1 2)  _  /  cls_candrab_collide  cls_reph_collide  _  _;

    cls_ra_rra  g__dev_maatra_e  >  cls_ra_0947small:(1 2)  _  /  g__dev_maatra_candra_o  _  _;
    cls_ra_rra  g__dev_maatra_ai  >  cls_ra_0948small:(1 2)  _  /  g__dev_maatra_candra_o  _  _;
endpass;

endtable; // substitution


// POSITIONING


table(glyph)

    // Redefine these classes to include only diacritics (this is due to an infelicity in the
    // behavior of makegdl which produces annapurna.gdl):
    cnUpperDiaX = (g__dev_nukta, g__dev_maatra_u, g__dev_maatra_u_nukta, g__dev_maatra_u_nukta_alt, g__dev_maatra_u_u, g__dev_maatra_u_u_nukta,
        g__dev_maatra_u_u_nukta_alt, g__dev_maatra_r, g__dev_maatra_r_nukta, g__dev_maatra_r_r, g__dev_maatra_r_r_nukta,
        g__dev_halant, g__dev_anudatta, g__dev_grave, g__dev_acute, g__dev_maatra_candra_long_e, g__dev_maatra_u_e, g__dev_maatra_u_u_e,
        g__dev_maatra_l, g__dev_maatra_l_nukta, g__dev_maatra_l_l, g__dev_maatra_l_l_nukta,
        g__dev_ra_reph); // handle using Reph, not Upper
    cnUpperCenterDiaX = (g__dev_ra_reph, g__dev_nukta, g__dev_maatra_u, g__dev_maatra_u_nukta, g__dev_maatra_u_nukta_alt, g__dev_maatra_u_u, g__dev_maatra_u_u_nukta,
        g__dev_maatra_u_u_nukta_alt, g__dev_maatra_r, g__dev_maatra_r_nukta, g__dev_maatra_r_r, g__dev_maatra_r_r_nukta,
        g__dev_maatra_candra_e_nukta, g__dev_maatra_short_e, g__dev_maatra_short_e_nukta, g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt, g__dev_maatra_ai, g__dev_maatra_ai_nukta,
        g__dev_halant, g__dev_anudatta, g__dev_maatra_candra_long_e, g__dev_maatra_u_e, g__dev_maatra_u_u_e, g__dev_maatra_l, g__dev_maatra_l_nukta, g__dev_maatra_l_l, g__dev_maatra_l_l_nukta,
        g__dev_candrabindu, g__dev_anusvara, g__dev_maatra_candra_e); // these last three don't really use UpperCenter even though it is defined
    cnLowerDiaX = (g__dev_candrabindu, g__dev_anusvara, g__dev_ra_reph, g__dev_nukta, g__dev_maatra_u, g__dev_maatra_u_u,
        g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta, g__dev_maatra_short_e, g__dev_maatra_short_e_nukta, g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt, g__dev_maatra_ai, g__dev_maatra_ai_nukta,
        g__dev_halant, g__dev_udatta, g__dev_anudatta, g__dev_grave, g__dev_acute, g__dev_maatra_candra_long_e, g__dev_maatra_u_e, g__dev_maatra_u_u_e);
    cnLowerCenterDiaX = (g__dev_candrabindu, g__dev_anusvara, g__dev_ra_reph, g__dev_nukta,
        g__dev_maatra_u, g__dev_maatra_u_nukta, g__dev_maatra_u_nukta_alt, g__dev_maatra_u_u, g__dev_maatra_u_u_nukta,
        g__dev_maatra_u_u_nukta_alt, g__dev_maatra_r, g__dev_maatra_r_nukta, g__dev_maatra_r_r, g__dev_maatra_r_r_nukta,
        g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta, g__dev_maatra_short_e, g__dev_maatra_short_e_nukta, g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt, g__dev_maatra_ai, g__dev_maatra_ai_nukta,
        g__dev_halant, g__dev_udatta, g__dev_grave, g__dev_acute, g__dev_maatra_candra_long_e,
        g__dev_maatra_l, g__dev_maatra_l_nukta, g__dev_maatra_l_l, g__dev_maatra_l_l_nukta);
    cnLowerAltDiaX = (g__dev_candrabindu, g__dev_anusvara, g__dev_ra_reph, g__dev_nukta,        // used for attaching 0952 to half-forms
        g__dev_maatra_u, g__dev_maatra_u_nukta, g__dev_maatra_u_nukta_alt, g__dev_maatra_u_u, g__dev_maatra_u_u_nukta,
        g__dev_maatra_u_u_nukta_alt, g__dev_maatra_r, g__dev_maatra_r_nukta, g__dev_maatra_r_r, g__dev_maatra_r_r_nukta,
        g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta, g__dev_maatra_short_e, g__dev_maatra_short_e_nukta, g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt, g__dev_maatra_ai, g__dev_maatra_ai_nukta,
        g__dev_halant, g__dev_udatta, g__dev_grave, g__dev_acute, g__dev_maatra_candra_long_e,
        g__dev_maatra_l, g__dev_maatra_l_nukta, g__dev_maatra_l_l, g__dev_maatra_l_l_nukta);
    cnNuktaDiaX = (g__dev_candrabindu, g__dev_anusvara, g__dev_ra_reph,
        g__dev_maatra_u, g__dev_maatra_u_nukta, g__dev_maatra_u_nukta_alt, g__dev_maatra_u_u, g__dev_maatra_u_u_nukta,
        g__dev_maatra_u_u_nukta_alt, g__dev_maatra_r, g__dev_maatra_r_nukta, g__dev_maatra_r_r, g__dev_maatra_r_r_nukta,
        g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta, g__dev_maatra_short_e, g__dev_maatra_short_e_nukta, g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt, g__dev_maatra_ai, g__dev_maatra_ai_nukta,
        g__dev_halant, g__dev_udatta, g__dev_anudatta, g__dev_grave, g__dev_acute, g__dev_maatra_candra_long_e, g__dev_maatra_u_e, g__dev_maatra_u_u_e,
        g__dev_maatra_l, g__dev_maatra_l_nukta, g__dev_maatra_l_l, g__dev_maatra_l_l_nukta);
    cnHalantDiaX = (g__dev_candrabindu, g__dev_anusvara, g__dev_ra_reph, g__dev_nukta,
        g__dev_maatra_u, g__dev_maatra_u_nukta, g__dev_maatra_u_nukta_alt, g__dev_maatra_u_u, g__dev_maatra_u_u_nukta,
        g__dev_maatra_u_u_nukta_alt, g__dev_maatra_r, g__dev_maatra_r_nukta, g__dev_maatra_r_r, g__dev_maatra_r_r_nukta,
        g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta, g__dev_maatra_short_e, g__dev_maatra_short_e_nukta, g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt, g__dev_maatra_ai, g__dev_maatra_ai_nukta,
        g__dev_udatta, g__dev_anudatta, g__dev_grave, g__dev_acute, g__dev_maatra_candra_long_e, g__dev_maatra_u_e, g__dev_maatra_u_u_e,
        g__dev_maatra_l, g__dev_maatra_l_nukta, g__dev_maatra_l_l, g__dev_maatra_l_l_nukta);

    //    To handle the fact that both reph and vowel-diacritics need to attach at the same
    //    place (assumes order is C R V): we include reph in the cnUpperDiaX class (above)
    //    so that first the V will be attached using the Upper rule. Then we attach
    //    the reph using the Reph rule, which actually uses the Upper APs. This works
    //    because in Graphite the longest rule is attached first.

    cRephDia = (g__dev_ra_reph);
    cTakesRephDia = cTakesUpperDia;
    cnTakesRephDia = cnTakesUpperDia;
    cnRephDiaX = (g__dev_candrabindu, g__dev_anusvara, g__dev_nukta,
        g__dev_maatra_u, g__dev_maatra_u_nukta, g__dev_maatra_u_nukta_alt, g__dev_maatra_u_u, g__dev_maatra_u_u_nukta,
        g__dev_maatra_u_u_nukta_alt, g__dev_maatra_r, g__dev_maatra_r_nukta, g__dev_maatra_r_r, g__dev_maatra_r_r_nukta,
        g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta, g__dev_maatra_short_e, g__dev_maatra_short_e_nukta, g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt, g__dev_maatra_ai, g__dev_maatra_ai_nukta,
        g__dev_halant, g__dev_udatta, g__dev_anudatta, g__dev_grave, g__dev_acute, g__dev_maatra_candra_long_e, g__dev_maatra_u_e, g__dev_maatra_u_u_e,
        g__dev_maatra_l, g__dev_maatra_l_nukta, g__dev_maatra_l_l, g__dev_maatra_l_l_nukta);

    cnRaDiaX = (cUpperDia, cLowerDia, cLowerCenterDia, cLowerAltDia, cHalantDia, cNuktaDia, cRephDia);

    //    The UpperCenter AP shouldn't really be used for anything but the acute and grave accents.
    cUpperCenterDiaX = (g__dev_grave, g__dev_acute);

    cnCaX = (g__dev_anusvara);    // kind of bogus, but the way we do positioning, we expect a class like this

endtable; // glyph

table(positioning)

pass(PASS_ATTACH)    // 9

// Optional diacritic sequence
#define DIASEQ3(x) [ x [ x x? ]? ]?
#define DIASEQ2(x) [ x x? ]?

//    The SD version of the rules is the one that uses insert = true on the diacritics, so that they
//    can be selected independently of the base.

#define pos_rule(  t, x, a, w, n)   t  x {attach {to = @1; at = a; with = w}; attached = 1} / ^ _ DIASEQ2(n) _ {attached == 0}
#define pos_ruleSD(t, x, a, w, n)   t  x {attach {to = @1; at = a; with = w}; insert = 1; attached = 1} / ^ _ DIASEQ2(n) _ {attached == 0}

// Since we don't have ligature components for the base-plus-nukta forms, to be consistent we don't
// allow insertions before the nuktas below. But allow insertion everywhere else.

//if (select_diac)
    pos_ruleSD(cTakesAn,            cAn,            AnS,            AnM,            cnCaX);
    pos_ruleSD(cTakesBindu,            cBindu,            CaS,            CaM,            cnCaX);
    pos_ruleSD(cTakesUpperDia,        cUpperDia,        UpperS,            UpperM,         cnUpperDiaX);
    pos_ruleSD(cTakesUpperCenterDia,cUpperCenterDiaX,UpperCenterS,    UpperCenterM,    cnUpperCenterDiaX);
    pos_ruleSD(cTakesLowerDia,        cLowerDia,        LowerS,            LowerM,         cnLowerDiaX);
    pos_ruleSD(cTakesLowerCenterDia,cLowerCenterDia,LowerCenterS,    LowerCenterM,    cnLowerCenterDiaX);
    pos_ruleSD(cTakesLowerAltDia,    cLowerAltDia,    LowerAltS,        LowerAltM,        cnLowerAltDiaX);
    pos_ruleSD(cTakesHalantDia,        cHalantDia,        HalantS,        HalantM,        cnHalantDiaX);
    // Don't allow the nukta to be selected independently:
//    pos_ruleSD(cTakesNuktaDia,        cNuktaDia,        NuktaS,            NuktaM,            cnNuktaDiaX);
    pos_ruleSD(cTakesRephDia,        cRephDia,        UpperS,            UpperM,            cnRephDiaX);
    pos_ruleSD(cTakesRaDia,            cRaDia,            RaS,            RaM,            cnRaDiaX);
//else
//    pos_rule(cTakesAn,                cAn,            AnS,            AnM,            cnCaX);
//    pos_rule(cTakesBindu,            cBindu,            CaS,            CaM,            cnCaX);
//    pos_rule(cTakesUpperDia,        cUpperDia,        UpperS,            UpperM,         cnUpperDiaX);
//    pos_rule(cTakesUpperCenterDia,    cUpperCenterDiaX,UpperCenterS,    UpperCenterM,    cnUpperCenterDiaX);
//    pos_rule(cTakesLowerDia,        cLowerDia,        LowerS,            LowerM,         cnLowerDiaX);
//    pos_rule(cTakesLowerCenterDia,    cLowerCenterDia,LowerCenterS,    LowerCenterM,    cnLowerCenterDiaX);
//    pos_rule(cTakesLowerAltDia,        cLowerAltDia,    LowerAltS,        LowerAltM,        cnLowerAltDiaX);
//    pos_rule(cTakesHalantDia,        cHalantDia,        HalantS,        HalantM,        cnHalantDiaX);
    // Don't allow the nukta to be selected independently:
    pos_rule(cTakesNuktaDia,        cNuktaDia,        NuktaS,            NuktaM,            cnNuktaDiaX);
//    pos_rule(cTakesRephDia,            cRephDia,        UpperS,            UpperM,            cnRephDiaX);
//endif;

endpass;


// Classes for collision fixing, etc.
table(glyph)

    cls_vowelWWideRt = (cls_fullKa);    // cls_fullTtha, cls_fullRa

    cls_nukta = (g_nukta, g0945_093c_bottom);

endtable;

pass(PASS_ADJUST) // 10

    //    Adjust positions to avoid collisions, etc.

    //    Modifiers above

    (g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta)  g__dev_candrabindu {shift {x = 700m}};

    (g__dev_maatra_candra_e, g0945_093c_top, g0949_top, g0949_093c_top)  g__dev_anusvara {shift {x = 600m; y = -300m}}  /  cls_vowelWWideRt  _  cls_nukta?  _ ;
    (g__dev_maatra_candra_e, g0945_093c_top, g0949_top, g0949_093c_top) {shift.x = -300m}  g__dev_anusvara {shift {x = 600m; y = -300m}}  /  _  cls_nukta?  _ ;

    (g__dev_maatra_short_e, g__dev_maatra_short_e_nukta)  cls_candrab_alt {shift.x = 70m};
    (g__dev_maatra_ai, g__dev_maatra_ai_nukta)  cls_candrab_alt {shift.x = 80m};
    (g__dev_maatra_short_o, g__dev_maatra_short_o_nukta)  cls_candrab_alt {shift.x = 50m};
    (g__dev_maatra_o, g__dev_maatra_o_nukta)  cls_candrab_alt {shift.x = 40m};
    (g__dev_maatra_a_u, g__dev_maatra_a_u_nukta)  cls_candrab_alt {shift.x = 70m};

    g__dev_maatra_o_o_e                cls_candrab_alt {shift.y = 250m}  /  _  g_nukta?  _;
    g__dev_maatra_a_w                cls_candrab_alt {shift {x = 230m; y = 200m}}  /  _  g_nukta?  _;


    //    Signs above

    g__dev_candrabindu                g__dev_udatta {shift {x =-160m; y = 560m}};
    g__dev_candrabindu                g__dev_grave {shift {x =  80m; y = 500m}};
    g__dev_candrabindu                g__dev_acute {shift {          y = 500m}};
    g__dev_anusvara                g__dev_udatta {shift {x =  90m; y = 320m}};
    g__dev_anusvara                g__dev_grave {shift {x = 300m; y = 260m}};
    g__dev_anusvara                g__dev_acute {shift {x = 200m; y = 260m}};
    (g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta)  g__dev_udatta {shift {x =-130m; y = 250m}};
    (g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta)  g__dev_grave {shift {          y = 250m}};
    (g__dev_maatra_candra_e, g__dev_maatra_candra_e_nukta)  g__dev_acute {shift {x = 200m; y = 250m}};
    (g__dev_maatra_short_e, g__dev_maatra_short_e_nukta)  g__dev_udatta {shift {          y = 250m}};
    (g__dev_maatra_short_e, g__dev_maatra_short_e_nukta)  g__dev_grave {shift {          y = 250m}};
    (g__dev_maatra_short_e, g__dev_maatra_short_e_nukta)  g__dev_acute {shift {          y = 250m}};
    (g__dev_maatra_ai, g__dev_maatra_ai_nukta)  g__dev_udatta {shift {          y = 160m}};
    (g__dev_maatra_ai, g__dev_maatra_ai_nukta)  g__dev_grave {shift {          y = 250m}};
    (g__dev_maatra_ai, g__dev_maatra_ai_nukta)  g__dev_acute {shift {x = 230m; y = 280m}};
    g__dev_ra_reph      g__dev_grave {shift {x =-250m; y = 350m}};
    g__dev_ra_reph      g__dev_acute {shift {x = 100m; y = 500m}};

    (g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt)  g__dev_udatta {shift {y = 160m}};
    (g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt)  g__dev_grave {shift {y = 160m}};
    (g__dev_maatra_e, g__dev_maatra_e_nukta, g__dev_maatra_e_nukta_alt)  g__dev_acute {shift {y = 250m}};

    g__dev_maatra_o_e  (g__dev_inv_candrabindu g__dev_candrabindu) {shift.y = 250m};

    //    Signs below

    (g__dev_maatra_u g__dev_maatra_u_u) (g__dev_maatra_u_e g__dev_maatra_u_u_e) {shift.y = -630m}; // not needed because these don't occur together, but oh well

    g__dev_maatra_u  g__dev_anudatta {shift.y =-560m};
    g__dev_maatra_u_u  g__dev_anudatta {shift.y =-600m};    // removed shift.x = 500m
    g__dev_maatra_r  cls_lowerMark {shift {x = 200m; y =-560m}};
    g__dev_maatra_r_r  cls_lowerMark {shift {          y =-650m}};
    g__dev_maatra_l  cls_lowerMark {shift {x = 100m; y =-620m}};
    g__dev_maatra_l_l  cls_lowerMark {shift {x = 100m; y =-650m}};

    //    Reph and vowel sign collisions
    //    Note that the reph has been reordered away from its original position.

    cls_0949_bottom  cls_0949_top {shift.x = -350m}  g__dev_ra_reph {shift.x = 300m};

//    g0930_094d_reph {shift.x = 300m}  g0945_093c_top {shift.x = -375m}  g0945_093c_bottom {shift.x = 375m};
    g__dev_ra_reph {shift.x = 300m}  (cls_0945 g__dev_maatra_candra_long_e) {shift.x = -375m};
    g__dev_ra_reph {shift.x = 100m}  cls_0946;
    g__dev_ra_reph {shift.x =  90m}  cls_0947;
    g__dev_ra_reph {shift.x = 120m}  cls_0948;

    g__dev_ra_reph_alt {shift.x = 200m}  /  g__dev_maatra_a_w  g_nukta? _ ;

    g__dev_ra_reph {shift.x = 350m}  /  g__dev_maatra_o_o_e  _;

    // swoop of the matra-I (ikar) hits candrabindu with narrow consonant in between
    cls_matraI  cls_shiftCandrabAfterI  g__dev_candrabindu {shift.x = 250m; shift.y = 75m};

    //    This vowel does not have the reph combined form like 094a-094c do (cls_vowelRtHigh).
    //    So shift as best we can.
    g__dev_maatra_a_w  g__dev_ra_reph_alt {shift.x = 140m}  /  _  g_nukta?  _;

    // Anusvara and vowel-sign ai
    g__dev_anusvara {shift.x = -175m}  /  (cls_vowelNarrowRightOfStem  cls_consNarrowRightOfStem)  _  (g__dev_ra g__dev_ra_nukta)  g__dev_maatra_ai;

    //    Tall vowels with candrabindu/anusvara

    cls_candrab_alt {shift{x = -100m; y = 250m}}    / (g__dev_vowel_candra_a g__dev_vowel_candra_a_nukta )  g_nukta?  _;
    cls_candrab_alt {shift.y = 250m}                / (g__dev_vowel_o_e g__dev_vowel_o_o_e)  g_nukta?  _;
    g__dev_anusvara {shift.y = 250m}                            / (g__dev_vowel_candra_a g__dev_vowel_candra_a_nukta g__dev_vowel_o_e g__dev_vowel_o_o_e)  g_nukta? _;
    (cls_candrab_alt g__dev_anusvara) {shift{x = 300m; y = 50m}}    /  g__dev_vowel_a_w  g_nukta? ^ _;

    //    Tall vowel signs with inverted candrabindu--there are no combined forms for these,
    //    so just shift as best we can.

    cls_candrab_alt {shift.x = 120m}    /  cls_matraII_width30  _;
    cls_candrab_alt {shift.x = 190m}    /  cls_matraII_width20  _;
    cls_candrab_alt {shift.x = 220m}    /  cls_matraII_all  _;

    // Reph, and tall vowels signs with attached reph:
    g__dev_inv_candrabindu_alt {shift {x = 350m; y = -50m}}
        / (g__dev_ra_reph  g__dev_maatra_i_i_reph  g__dev_maatra_i_i_width20_reph  g__dev_maatra_short_o_reph  g__dev_maatra_o_reph  g__dev_maatra_a_u_reph) _;
    g__dev_inv_candrabindu_alt {shift {x = 350m; y = -50m}}
        /  consWidth30_matraII  g__dev_ra_reph  (cls_0946 cls_0947 cls_0948)  _;
    g__dev_inv_candrabindu_alt {shift {x = 350m; y = -50m}}
        /  g__dev_ra_reph  (cls_0946 cls_0947 cls_0948)  _;

    // RA + nukta with U/UU below.
    // Note: this rule only applies when the RU/RUU alternate is turned on;
    // otherwise a special ligature is used.
    g__dev_ra_nukta  (g__dev_maatra_u g__dev_maatra_u_nukta g__dev_maatra_u_u g__dev_maatra_u_u_nukta) {shift.y = -80m};

endpass;


endtable; // positioning


/******************
// OpenType classes not used by Graphite
table(glyph)
    cls_fullCons = (    // cDevFullCForms
        g0915    g0916    g0917    g0918    g0919    g091a    g091b    g091c    g091d    g091e    g091f
        g0920    g0921    g0922    g0923    g0924    g0925    g0926    g0927    g0928    g092A    g092b
        g092c    g092d    g092e    g092f    g0930    g0932    g0933    g0935    g0936    g0937    g0938
        g0939    g097b    g097c    g097e    g097f    g097D);
    cls_consNoHaNoHalf = (    // cDevFullCForms_noHa_noHalf
        g0915    g0916    g0917    g0918    g091a    g091c    g091d    g091e    g0923    g0924    g0925
        g0927    g0928    g092A    g092b    g092c    g092d    g092e    g092f    g0930    g0932    g0933
        g0935    g0936    g0937    g0938    g097b    g097c    g097f    g097D);
    cls_fullConsNukta = (    // cDevFullCNukta
        g0958        g0959        g095a        g0918_093c    g0919_093c    g091a_093c    g091b_093c    g095b
        g091d_093c    g091e_093c g091f_093c    g0920_093c    g095c        g095d        g0923_093c g0924_093c
        g0925_093c    g0926_093c    g0927_093c    g0929        g092A_093c    g095e        g092c_093c    g092d_093c
        g092e_093c    g095f        g0931        g0932_093c    g0934        g0935_093c    g0936_093c    g0937_093c
        g0938_093c    g0939_093c    g097b_093c    g097c_093c    g097e_093c    g097f_093c);
    cls_fullConsNuktaRakar = (    // cDevFullCNuktaRakar
        g0958_094d_0930        g0959_094d_0930        g095a_094d_0930        g0918_093c_094d_0930
        g0919_093c_094d_0930    g091a_093c_094d_0930    g091b_093c_094d_0930    g095b_094d_0930
        g091d_093c_094d_0930    g091e_093c_094d_0930    g091f_093c_094d_0930    g0920_093c_094d_0930
        g095c_094d_0930        g095d_094d_0930        g0923_093c_094d_0930    g0924_093c_094d_0930
        g0925_093c_094d_0930    g0926_093c_094d_0930    g0927_093c_094d_0930    g0929_094d_0930
        g092A_093c_094d_0930    g095e_094d_0930        g092c_093c_094d_0930    g092d_093c_094d_0930
        g092e_093c_094d_0930    g095f_094d_0930        g0932_093c_094d_0930    g0934_094d_0930
        g0935_093c_094d_0930    g0936_093c_094d_0930    g0937_093c_094d_0930    g0938_093c_094d_0930
        g0939_093c_094d_0930    g097b_093c_094d_0930    g097c_093c_094d_0930    g097e_093c_094d_0930
        g097f_093c_094d_0930);
    cls_fullConsNuktaNoHaNoHalf = (    // cDevFullCNukta_noHa_noHalf
        g0958        g0959        g095a        g0918_093c    g091a_093c    g095b        g091d_093c    g091e_093c
        g0923_093c    g0924_093c    g0925_093c    g0927_093c    g0929        g092A_093c    g095e        g092c_093c
        g092d_093c    g092e_093c    g095f        g0931        g0932_093c    g0934        g0935_093c    g0936_093c
        g0937_093c    g0938_093c    g097b_093c    g097c_093c    g097f_093c);
    cls_fullConsRakar = (    // cDevFullCRakar
        g0915_094d_0930    g0916_094d_0930    g0917_094d_0930    g0918_094d_0930    g0919_094d_0930
        g091a_094d_0930    g091b_094d_0930    g091c_094d_0930    g091d_094d_0930    g091e_094d_0930
        g091f_094d_0930    g0920_094d_0930    g0921_094d_0930    g0922_094d_0930    g0923_094d_0930
        g0924_094d_0930    g0925_094d_0930    g0926_094d_0930    g0927_094d_0930    g0928_094d_0930
        g092A_094d_0930    g092b_094d_0930    g092c_094d_0930    g092d_094d_0930    g092e_094d_0930
        g092f_094d_0930    g0932_094d_0930    g0933_094d_0930    g0935_094d_0930    g0936_094d_0930
        g0937_094d_0930    g0938_094d_0930    g0939_094d_0930    g097b_094d_0930    g097c_094d_0930
        g097e_094d_0930    g097f_094d_0930);
    cls_fullVowels = (    // cDevFullVowels
        g0904    g0905    g0906    g0907    g0908    g0909    g090a    g090b    g0960 g090c    g0961    g090d
        g090e    g090f    g0910    g0911    g0912    g0913    g0914    g0972);
    cls_fullVowelsNukta = (    // cDevFullVowelsNukta
        g0904_093c    g0905_093c    g0906_093c    g0907_093c    g0908_093c    g0909_093c    g090a_093c    g090b_093c
        g0960_093c g090c_093c    g0961_093c    g090d_093c    g090e_093c    g090f_093c    g0910_093c    g0911_093c
        g0912_093c    g0913_093c    g0914_093c    g0972_093c);
    // cDevFullVowelsNukta_noE-Ai...
endtable;
********************/
